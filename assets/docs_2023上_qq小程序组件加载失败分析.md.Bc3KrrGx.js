import{_ as a,c as o,o as s,ag as d}from"./chunks/framework.6d7lLjym.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2023上/qq小程序组件加载失败分析.md","filePath":"docs/2023上/qq小程序组件加载失败分析.md","lastUpdated":1746346969000}'),i={name:"docs/2023上/qq小程序组件加载失败分析.md"};function c(t,e,p,h,l,n){return s(),o("div",null,e[0]||(e[0]=[d('<h2 id="_1-问题" tabindex="-1">1. 问题 <a class="header-anchor" href="#_1-问题" aria-label="Permalink to &quot;1. 问题&quot;">​</a></h2><p>qq小程序（基于uni-app）使用JS分发和组件分发插件后，有些页面会白屏，打开调试器，会看到下面的报错：</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2023/5/own_mike_a0f5dfd42aa98ffea0.jpg" width="500"><p>意思是找不到这个页面，然后列举了一系列的有效的组件。</p><p>这个问题只在qq小程序的真机上出现，在qq小程序开发者工具、微信小程序都没有。</p><h2 id="_2-原因" tabindex="-1">2. 原因 <a class="header-anchor" href="#_2-原因" aria-label="Permalink to &quot;2. 原因&quot;">​</a></h2><p>找了一圈原因，最后发现是执行顺序不同导致的原因。qq小程序真机上，并不是先运行<code>Page</code>页面，而是先执行每个组件，或者说校验每个合理的组件，而其他环境，都是先执行<code>Page</code>下的<code>js</code>。</p><p><code>Page</code>下的<code>js</code>会加载此分包下的<code>vendor.js</code>，也就是每个页面下的<code>js</code>第一句都是下面的代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./common/vendor.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);(global[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>这会加载分包中的<code>module</code>，注册一些<code>moduleId</code>。而<code>qq</code>小程序真机环境先执行了组件，此时如果某些<code>moduleId</code>还没注册的话，就会报错。</p><h2 id="_3-实验" tabindex="-1">3. 实验 <a class="header-anchor" href="#_3-实验" aria-label="Permalink to &quot;3. 实验&quot;">​</a></h2><p>我们检验一下这个结论，在组件和页面对应的JS中分别打印一句话，看看执行顺序。</p><p>在qq小程序真机下：</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2023/5/own_mike_5c035aeb5615e7ef18.jpeg" width="500"><p>在qq小程序开发者工具下：</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2023/5/own_mike_e92cb7473fdd00a4a7.jpeg" width="500"><p>上面的<code>create page</code>对应页面，<code>press switch</code>对应组件，可以看到<code>qq</code>小程序真机与开发者工具，对组件和页面的加载顺序确实不同。</p><h2 id="_4-解决" tabindex="-1">4. 解决 <a class="header-anchor" href="#_4-解决" aria-label="Permalink to &quot;4. 解决&quot;">​</a></h2><p>如何解决这个问题呢？既然组件需要这个<code>moduleId</code>，那就提前加载好就可以了。这里写了个插件，自动引入分包所在的<code>vendor</code>。</p><p>会不会有副作用呢？不会的，这里要了解下<code>webpack</code>运行时原理。<code>vendor.js</code>只是往<code>global[&quot;webpackJsonp&quot;]</code>中<code>push</code>了一些<code>module</code>，<code>push</code>方法被<code>hook</code>了，本质是会缓存一些<code>moduleId</code>。</p><p>另外，那些并非插件移动的组件为什么没问题呢，因为它们和<code>Page</code>下的<code>js</code>一样，第一句都引用了分包中的<code>vendor.js</code>。</p><h2 id="_5-后记" tabindex="-1">5. 后记 <a class="header-anchor" href="#_5-后记" aria-label="Permalink to &quot;5. 后记&quot;">​</a></h2><p>虽然是个小问题，定位却花了不少时间，因为微信小程序没问题，所以没往执行顺序不同那方面想，期间猜想问题原因可能是<code>moduleId</code>找错了之类的。</p><hr><h2 id="_2024-8-15-更新" tabindex="-1">2024.8.15 更新 <a class="header-anchor" href="#_2024-8-15-更新" aria-label="Permalink to &quot;2024.8.15 更新&quot;">​</a></h2><p>用了插件后，还是出现白屏。</p><p>问题原因：uni-app 问题，QQ小程序打包 <code>vendor</code> 时模块划分有问题，把应该放到主包的模块放到了分包中。</p><p>解决方法：需要确定被划分错的是哪个模块，比如最近一次的模块是 <code>pmd-tools/lib/time</code>，当前的解决方法是把它放到 <code>main.js</code> 中。</p>',28)]))}const u=a(i,[["render",c]]);export{k as __pageData,u as default};
