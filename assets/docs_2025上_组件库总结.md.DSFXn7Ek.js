import{_ as t,c as i,o as l,ag as r}from"./chunks/framework.6d7lLjym.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2025上/组件库总结.md","filePath":"docs/2025上/组件库总结.md","lastUpdated":1748489149000}'),s={name:"docs/2025上/组件库总结.md"};function a(o,e,p,n,d,u){return l(),i("div",null,e[0]||(e[0]=[r('<h4 id="开始" tabindex="-1">开始 <a class="header-anchor" href="#开始" aria-label="Permalink to &quot;开始&quot;">​</a></h4><p>同步下组件库最新进展、业务使用情况、未来规划。</p><h5 id="最新进展" tabindex="-1">最新进展 <a class="header-anchor" href="#最新进展" aria-label="Permalink to &quot;最新进展&quot;">​</a></h5><ol><li>Press UI 新增 <a href="https://h5.igame.qq.com/pmd-mobile.support.press-ui.press-ui/components/press/press-rolling-text.html" target="_blank" rel="noreferrer">RollingText</a>, <a href="https://h5.igame.qq.com/pmd-mobile.support.press-ui.press-ui/components/press/press-signature.html" target="_blank" rel="noreferrer">Signature</a>, <a href="https://h5.igame.qq.com/pmd-mobile.support.press-ui.press-ui/components/press/press-text-ellipsis.html" target="_blank" rel="noreferrer">TextEllipsis</a>, <a href="https://h5.igame.qq.com/pmd-mobile.support.press-ui.press-ui/components/press/press-barrage.html" target="_blank" rel="noreferrer">Barrage</a> 等组件，一些组件已应用到和平赛事等业务中</li><li>Press UI 中 <a href="https://h5.igame.qq.com/pmd-mobile.support.press-ui.press-ui/components/press/press-dialog-plus.html" target="_blank" rel="noreferrer">Dialog</a>, <a href="https://h5.igame.qq.com/pmd-mobile.support.press-ui.press-ui/components/press/press-toast.html" target="_blank" rel="noreferrer">Toast</a>, <a href="https://h5.igame.qq.com/pmd-mobile.support.press-ui.press-ui/components/press/press-notify.html" target="_blank" rel="noreferrer">Notify</a>, <a href="https://h5.igame.qq.com/pmd-mobile.support.press-ui.press-ui/components/press/press-image-preview.html" target="_blank" rel="noreferrer">ImagePreview</a> 等可函数调用的组件，增加更语义化、易理解的方法，如 showDialog/closeDialog/showNotify 等</li><li>Press Plus, Press Next 支持 tailwind，后续新增组件都需使用 tailwind，目前已沉淀 20+ 使用 tailwind 的组件</li></ol><h4 id="业务价值" tabindex="-1">业务价值 <a class="header-anchor" href="#业务价值" aria-label="Permalink to &quot;业务价值&quot;">​</a></h4><p><a href="https://h5.igame.qq.com/pmd-mobile.support.press-ui.press-ui/" target="_blank" rel="noreferrer">Press UI 组件库</a>自2022年11月5日发布第一个版本，现在已经2年多，目前已经在多个业务、多个团队使用。相比于 vant、uview、tdesign 等组件库，Press UI 有以下优势：</p><ol><li>兼容 uni-app 和 非 uni-app，兼容 Vue2 和 Vue3</li></ol><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/press/img/services.gif" width="700"><ol start="2"><li><p>使用条件编译，兼容多平台时，包体积不会增加</p></li><li><p>得益于丰富的兼容性，项目迁移和升级简单</p></li></ol><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/3/own_mike_cccff3207240d165fb.jpg" width="700"><p>按照是否跨端和 Vue 版本，项目可分为四象限。Press UI 组件库可支持四象限任意变动，但实际上，一般只会升级，不会降级，即：</p><ol><li>Vue2 非跨端 =&gt; Vue2 跨端，比如赛宝、和平赛事的第1次升级</li><li>Vue2 跨端 =&gt; Vue3 跨端，比如赛宝、和平赛事的第2次升级</li><li>Vue2 非跨端 =&gt; Vue3 非跨端，比如和平横版赛事的升级，这种一般是无需考虑小程序、APP平台的场景</li><li>Vue3 非跨端 =&gt; Vue3 跨端</li><li>Vue2 非跨端 =&gt; Vue3 跨端，比如无畏赛事的升级，跨度较大</li></ol><table tabindex="0"><thead><tr><th>源</th><th>目标</th><th>项目举例</th></tr></thead><tbody><tr><td>Vue2 非跨端</td><td>VUe2 跨端</td><td>赛宝、和平赛事的第1次升级</td></tr><tr><td>Vue2 跨端</td><td>Vue3 跨端</td><td>赛宝、和平赛事的第2次升级</td></tr><tr><td>Vue2 非跨端</td><td>Vue3 非跨端</td><td>和平横版赛事的升级</td></tr><tr><td>Vue3 非跨端</td><td>Vue3 跨端</td><td>-</td></tr><tr><td>Vue2 非跨端</td><td>Vue3 跨端</td><td>无畏赛事的升级</td></tr></tbody></table><h4 id="业务组件库" tabindex="-1">业务组件库 <a class="header-anchor" href="#业务组件库" aria-label="Permalink to &quot;业务组件库&quot;">​</a></h4><p>除了 Press UI 基础组件库外，还沉淀了 Press Plus 和 Press Next 业务组件库。目前也在游戏人生项目中深度应用。</p><p>Press Plus 和 Press Next 的区别是，前者会同时兼容 Vue2 和 Vue3，后者只兼容 Vue3，可以使用组合式API。</p><p>Press Plus 中物品列表、物品详情、物品兑换等相关组件，在多个业务项目中使用，部分业务项目升级困难，所以 Press Plus 组件库无法去除。</p><p>业务组件库是必需的：</p><ol><li>项目开发人员水平参差不齐，总有些人对代码的理解仅停留在能跑就行，拼命拉低代码质量，你写好的代码，他分分钟入侵，给你搞得四不像，所以必须物理隔离、权限隔离，把关键代码抽离出去</li><li>业务核心组件需要保持稳定，在组件库中每行代码都会单独 review，不会揉杂在业务的某次MR中，蒙混过关</li><li>复杂的、复用性强的组件需要示例、文档，典型的包括赛程树、物品相关组件</li></ol><p>所以这里鼓励沉淀高质量的核心业务组件，但宁缺毋滥，沉淀的组件必须符合 Press Plus、Press Next 规范：</p><ol><li>CSS 使用tailwind</li><li>详尽的文档、丰富的示例</li><li>完备的类型声明</li></ol><h5 id="核心价值观" tabindex="-1">核心价值观 <a class="header-anchor" href="#核心价值观" aria-label="Permalink to &quot;核心价值观&quot;">​</a></h5><ol><li>多平台、多技术栈统一体验</li><li>渐进式增强</li><li>对用户简单、易用 <ul><li>API 规范标准</li><li>示例丰富、文档详细</li></ul></li><li>对开发者高效、自动化 <ul><li>示例、文档自动派发</li><li>多端示例自动构建</li></ul></li><li>始终向下兼容，避免breaking changes。 要做到这一点并不容易，一开始就应该不能太差，对齐社区主流组件库的标准，能用多种方式实现同一效果</li></ol><h5 id="核心技术" tabindex="-1">核心技术 <a class="header-anchor" href="#核心技术" aria-label="Permalink to &quot;核心技术&quot;">​</a></h5><ol><li>多平台、多技术栈如何统一体验</li><li>多平台、多技术栈如何兼容而不增加组件体积（非 uni-app 的条件编译实现）</li><li>一些复杂组件的实现，以及小程序下的巧妙适配</li></ol><h4 id="tailwind" tabindex="-1">Tailwind <a class="header-anchor" href="#tailwind" aria-label="Permalink to &quot;Tailwind&quot;">​</a></h4><p>Tailwind 是一种原子化CSS的技术，其思想十分朴素，就是重复的样式应该复用。使用 Tailwind 有以下好处：</p><ol><li>大幅减少样式体积</li><li>无需费心想类名</li><li>变更更安全</li></ol><p>其中第3点，完全遵循 scoped 开发模式的项目感受不到。</p><p>我们项目更适合用 Tailwind，性能是一方面，更重要的是，类名起的过于随意了，不要说BEM规范，统一的前缀都没做到。要求严格一点的项目负责人还会多强调一下，其他的基本就是“百花齐放”。举个例子，一个按钮在同一个项目中的多种命名方式：</p><ol><li>btn</li><li>button</li><li>tip-btn</li><li>tip-match-btn</li><li>xx-match-btn</li></ol><p>使用 Tailwind 后，同一个CSS表达式，基本只有一个正确答案，再也不会看到乱七八糟的类名了。</p>',32)]))}const c=t(s,[["render",a]]);export{m as __pageData,c as default};
