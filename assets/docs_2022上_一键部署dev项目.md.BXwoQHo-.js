import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.6d7lLjym.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2022上/一键部署dev项目.md","filePath":"docs/2022上/一键部署dev项目.md","lastUpdated":1745468587000}'),p={name:"docs/2022上/一键部署dev项目.md"};function t(e,s,h,k,d,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h2 id="一、背景" tabindex="-1">一、背景 <a class="header-anchor" href="#一、背景" aria-label="Permalink to &quot;一、背景&quot;">​</a></h2><p>随着部署在devcloud项目的增多，比如研发平台、监控工具、自动化测试，以及更新迭代的频繁，之前的部署方案效率愈显低效，需要手动打包 =&gt; 登录服务器 =&gt; 解压缩到部署目录，后端项目还要<code>pm2 restart</code>，或者登录服务器后执行<code>git pull</code>，比较麻烦。</p><p>现开发了一个小工具，可以快速部署前端项目、Node.js后端项目。</p><h2 id="二、思想" tabindex="-1">二、思想 <a class="header-anchor" href="#二、思想" aria-label="Permalink to &quot;二、思想&quot;">​</a></h2><p>整体思路是：</p><ol><li><p>使用bash脚本上传项目压缩包</p></li><li><p>在服务器上监控某目录，当该目录新增某项目的文件时，就部署该项目。</p><ul><li>前端项目直接解压到部署目录</li><li>后端项目解压后，依次执行<code>npm install</code>、<code>pm2 restart</code>。</li></ul></li></ol><p>这里面最重要的是规范化，包括打包方式、前后端项目命名、压缩包名称、前端项目打包后路径、上传目录、部署目录等。</p><p>目前的规范包括：</p><ul><li>打包方式 <ul><li><code>gzip</code>，打包命令是<code>tar -zcvf</code>，对应的解压命令是<code>tar -zxvf</code></li></ul></li><li>前后端项目命名规范 <ul><li>前端项目为<code>xxx-frontend</code>，后端项目为<code>xxx-backend</code>。不要跟着不规范的仓库名称走。</li></ul></li><li>压缩包命名规范 <ul><li>项目名称加<code>.tar.gz</code></li></ul></li><li>前端项目本地打包路径 <ul><li>为<code>dist/project/xxx</code></li></ul></li><li>上传目录 <ul><li><code>/root/watch-to-deploy-dir</code></li></ul></li><li>部署目录 <ul><li><code>/root/deploy-dir</code></li></ul></li></ul><h2 id="三、使用指引" tabindex="-1">三、使用指引 <a class="header-anchor" href="#三、使用指引" aria-label="Permalink to &quot;三、使用指引&quot;">​</a></h2><p>新项目接入需要增加1个文件，<code>.env.local</code>，并将其加入<code>.gitignore</code>中。其内容包含项目名称、服务器地址、服务器密码，如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DEPLOY_PROJECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HOST_NAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1.1.1.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HOST_PWD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxx</span></span></code></pre></div><p>然后安装deploy-bash：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy-bash</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre></div><p>然后在package.json的script中增加这样一条命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;deploy&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;deploy 1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>部署的时候执行<code>npm run deploy</code>就行了。</p><p>如果后端项目之前没有配置<a href="https://pm2.keymetrics.io/docs/usage/application-declaration/" target="_blank" rel="noreferrer">ecosystem.config.js</a>的话，需要新增一下。</p><p>前端项目可以参考<a href="https://git.a.com/pmd-mobile/support/pmd-auto-test-frontend" target="_blank" rel="noreferrer">pmd-auto-test-frontend</a>，后端项目可以参考<a href="https://git.a.com/pmd-mobile/support/pmd-auto-test-svr" target="_blank" rel="noreferrer">pmd-auto-test-svr</a>。</p><h2 id="四、deploy-bash" tabindex="-1">四、deploy-bash <a class="header-anchor" href="#四、deploy-bash" aria-label="Permalink to &quot;四、deploy-bash&quot;">​</a></h2><p><a href="https://www.npmjs.com/package/deploy-bash" target="_blank" rel="noreferrer">deploy-bash</a>是部署脚本，使用方式是：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 参数依次为 isBackEndProject、targetDir</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># targetDir可以为空：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div><ul><li>第一个参数表示是否为后端项目，1: 是，0: 否，默认为0。</li><li>第二个参数表示上传目录，如果不传，则用默认逻辑。</li></ul><h2 id="五、知识点" tabindex="-1">五、知识点 <a class="header-anchor" href="#五、知识点" aria-label="Permalink to &quot;五、知识点&quot;">​</a></h2><p>编写过程中遇到一些小知识点，这里记录下。</p><p>1、 新 <code>publish</code> 的库还没同步到公司的镜像的时候，用：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy-bash@latest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --registry=https://registry.npmjs.org/</span></span></code></pre></div><p>2、 tar 默认不打包隐藏文件，也就是以点开头的。</p><p>3、 不要开启 <code>git clean -xdf</code>，不然之前的 <code>npm install</code> 的 <code>node_modules</code> 会被清除。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git clean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是一次 clean 的演习, 告诉你哪些文件会被删除，不会真的删除</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git clean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除当前目录下所有没有 track 过的文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不会删除 .gitignore 文件里面指定的文件夹和文件, 不管这些文件有没有被 track 过</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git clean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除指定路径下的没有被 track 过的文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git clean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除当前目录下没有被 track 过的文件和文件夹</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git clean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xf</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除当前目录下所有没有 track 过的文件.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不管是否是 .gitignore 文件里面指定的文件夹和文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git clean</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对于刚编译过的项目也非常有用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如, 他能轻易删除掉编译后生成的 .o 和 .exe 等文件. 这个在打包要发布一个 release 的时候非常有用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git reset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hard</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git clean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git status</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行后, 工作目录和缓存区回到最近一次 commit 时候一摸一样的状态。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此时建议运行 git status，会告诉你这是一个干净的工作目录, 又是一个新的开始了！</span></span></code></pre></div><p>4、 bash字符串赋值时提供一个默认值，<code>var=\${str-epr}</code>，比如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">\${1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-hello</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $var</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # hello</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # world</span></span></code></pre></div><p>5、 发布包的 <code>package.json</code> 的 <code>files</code>中填 <code>&quot;./dist/index.js&quot;</code> 不生效，要填 <code>&quot;dist/index.js&quot;</code>。 6、 Git的多用户配置</p><p>(1) 配置文件</p><p>我们常用的配置文件有两个：</p><ul><li>全局级别的配置文件：<code>~/.gitconfig</code></li><li>仓库级别的配置文件：git 仓库中的<code>.git/config</code></li></ul><p>除了上面这两个，还有两个不怎么常用的配置文件：</p><ul><li>系统级别的配置文件：<code>/etc/gitconfig</code></li><li>工作区级别的配置文件：git 仓库中的<code>.git/config.worktree</code></li></ul><p>这四个配置文件的优先级由高至低为： 工作区（<code>.git/config.worktree</code>） &gt; 仓库（<code>.git/config</code>） &gt; 用户（<code>~/.gitconfig</code>） &gt; 系统（<code>/etc/gitconfig</code>）</p><p>(2) 修改配置</p><p>命令行修改 git 配置的命令如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [--local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--system]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [key] [value]</span></span></code></pre></div><p>举个例子，修改全局级别的用户信息：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;您的名字&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;您的邮箱&quot;</span></span></code></pre></div><p>设置的时候默认是--local。</p><p>查看配置的命令是：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [--local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--global</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--system]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [key]</span></span></code></pre></div><p>查看配置的是按照优先级依次查找。</p><p>(3) 多用户配置</p><p>最简单的方式是在<code>~/.gitconfig</code>中增加1条对自己工作区的配置：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[user]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> youName</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> youEmail@example.com</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 私人项目</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[includeIf </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gitdir:path/to/you/dir/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    path</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.gitconfig_self</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 工作项目</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[includeIf </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gitdir:path/to/work/dir/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    path</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.gitconfig_work</span></span></code></pre></div><p><code>~/.gitconfig_self</code>中内容：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[user]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yourname-self</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yourname-self@gmail.com</span></span></code></pre></div><p><code>~/.gitconfig_work</code>中内容：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[user]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yourname-work</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yourname-work@yourCompanyName.com</span></span></code></pre></div><p>(4) 多用户配置的作用</p><ul><li>参与Github开源项目</li><li>Github的Contributions Graph需要提交的用户邮箱与登录邮箱一致</li></ul><p>(5) 参考</p><ul><li><a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/managing-contribution-graphs-on-your-profile/why-are-my-contributions-not-showing-up-on-my-profile" target="_blank" rel="noreferrer">Why are my contributions not showing up on my profile?</a></li><li><a href="https://juejin.cn/post/7012499070367301646" target="_blank" rel="noreferrer">git config多用户配置</a></li><li><a href="https://juejin.cn/post/7054370789050548231" target="_blank" rel="noreferrer">最简单的 Git 本地多用户管理</a></li></ul>`,59)]))}const g=i(p,[["render",t]]);export{c as __pageData,g as default};
