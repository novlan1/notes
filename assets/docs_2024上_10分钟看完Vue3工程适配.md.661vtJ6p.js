import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.6d7lLjym.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2024上/10分钟看完Vue3工程适配.md","filePath":"docs/2024上/10分钟看完Vue3工程适配.md","lastUpdated":1753673174000}'),t={name:"docs/2024上/10分钟看完Vue3工程适配.md"};function p(h,s,l,k,d,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="_1-开始" tabindex="-1">1. 开始 <a class="header-anchor" href="#_1-开始" aria-label="Permalink to &quot;1. 开始&quot;">​</a></h2><p>本文为 <code>Vue3.x</code> 工程适配记录。项目中很多老工具、组件都是基于 <code>Vue2.x</code> 的，而且还在用，所以基本是戴着镣铐跳舞，需要向下兼容，同时追求高效、简单。</p><p>适配大体分两类，运行时和编译时，运行时适配包括各种语法，编译时适配包括 <code>Webpack Loader</code>、<code>Plugin</code>、<code>transpileDependencies</code> 等方面。</p><h2 id="_2-基础配置" tabindex="-1">2. 基础配置 <a class="header-anchor" href="#_2-基础配置" aria-label="Permalink to &quot;2. 基础配置&quot;">​</a></h2><p>首先基于当前项目架构，搭建了 <code>vite</code> <a href="https://mobile.a.com/uni-plugin-light/zh/config/vite-config.html" target="_blank" rel="noreferrer">基础配置</a>。</p><p>当前架构是什么？就是形如 <code>src/project/user</code> 的 <code>monorepo</code> 模式。</p><p>还有对 <code>devcloud</code> 中 <code>node</code> 版本升级，打包产物位置的更新，等这些比较小的点。</p><h2 id="_3-适配" tabindex="-1">3. 适配 <a class="header-anchor" href="#_3-适配" aria-label="Permalink to &quot;3. 适配&quot;">​</a></h2><h3 id="_3-1-tip-platform-name-适配" tabindex="-1">3.1. TIP_PLATFORM_NAME 适配 <a class="header-anchor" href="#_3-1-tip-platform-name-适配" aria-label="Permalink to &quot;3.1. TIP_PLATFORM_NAME 适配&quot;">​</a></h3><p>一个 <a href="https://mobile.a.com/uni-plugin-light/zh/vite/cross-platform.html" target="_blank" rel="noreferrer">Vite 插件</a> 即可解决。</p><p>但是对于第三方库，需要额外的技巧。</p><p>需要在 <code>vite.config.ts</code> 中的 <code>optimizeDepsExcludes</code> 中将其排除，否则在 <code>vite</code> 的依赖分析的时候就会提前报错，此时还没到插件的处理时机。</p><p>这样处理后，一些用 <code>commonjs</code> 的三方库可能会报错，这时又需要添加 <code>optimizeDepsIncludes</code>，让插件处理这些依赖。</p><h3 id="_3-2-组件库适配" tabindex="-1">3.2. 组件库适配 <a class="header-anchor" href="#_3-2-组件库适配" aria-label="Permalink to &quot;3.2. 组件库适配&quot;">​</a></h3><p>一些三方库是以源码方式提供的，比如 <code>press-plus</code>，<code>Vue2.x</code> 时可以配置 <code>transpileDependencies</code>，但是 <code>Vite</code> 没有对应的配置项。</p><p>可以这么处理：</p><ol><li>将三方库复制到 <code>src</code> 下的某个目录下</li><li>为三方库配置 <code>alias</code>，指向 <code>src</code> 某目录下</li><li>配置 <code>tsconfig.json</code> 的 <code>compileOptions.paths</code></li></ol><p>除组件库外，一些类似 <code>pmd-tools</code> 的三方库也可以这样处理。需要注意的是，一旦配置 <code>alias</code> 为本地源码后，一些依赖要额外安装（比如 <code>vue-runtime-helpers</code>），否则在 <code>pnpm</code> 项目中可能找不到。</p><h3 id="_3-3-条件编译" tabindex="-1">3.3. 条件编译 <a class="header-anchor" href="#_3-3-条件编译" aria-label="Permalink to &quot;3.3. 条件编译&quot;">​</a></h3><p>项目支持条件编译，一些地方使用它会非常简单。比如 <code>src/component/logic/tip-merchant/jump-handle/helper.js</code> 中 对 <code>configInfo</code> 的适配。</p><h3 id="_3-4-node-js-版本" tabindex="-1">3.4. node.js 版本 <a class="header-anchor" href="#_3-4-node-js-版本" aria-label="Permalink to &quot;3.4. node.js 版本&quot;">​</a></h3><p><code>node</code> 版本必须 <code>&gt;= 16</code>，可以使用 <code>nvm</code> 切换，非常方便。</p><p><code>devcolud</code> 已支持。</p><h3 id="_3-5-template-v-for" tabindex="-1">3.5. template v-for <a class="header-anchor" href="#_3-5-template-v-for" aria-label="Permalink to &quot;3.5. template v-for&quot;">​</a></h3><p><code>Vue2.x</code> 和 <code>Vue3.x</code> 的 <code>:key</code> 使用互不兼容，前者不能放到 <code>template</code> 上，后者必须放到 <code>template</code> 上，且是 <code>vscode</code> 插件的报错，不是 <code>eslint</code> 的报错。</p><p>一个简单的解决办法就是把 <code>template</code> 改成 <code>div/span</code>。</p><p>参考：<a href="https://v3-migration.vuejs.org/zh/breaking-changes/key-attribute.html" target="_blank" rel="noreferrer">https://v3-migration.vuejs.org/zh/breaking-changes/key-attribute.html</a></p><h3 id="_3-6-vite-依赖缓存" tabindex="-1">3.6. vite 依赖缓存 <a class="header-anchor" href="#_3-6-vite-依赖缓存" aria-label="Permalink to &quot;3.6. vite 依赖缓存&quot;">​</a></h3><p>vite 有依赖缓存，禁用缓存可以用 <code>sudo npm run dev --force</code></p><h3 id="_3-7-vite-root" tabindex="-1">3.7. vite root <a class="header-anchor" href="#_3-7-vite-root" aria-label="Permalink to &quot;3.7. vite root&quot;">​</a></h3><p>修改了 <code>vite.config.ts</code> 中的 <code>root</code> 后，比如设置为 <code>subProject</code> 路径，需要更改 <code>envDir</code>，否则客户端拿不到环境变量。</p><h3 id="_3-8-支持-history-模式" tabindex="-1">3.8. 支持 history 模式 <a class="header-anchor" href="#_3-8-支持-history-模式" aria-label="Permalink to &quot;3.8. 支持 history 模式&quot;">​</a></h3><p><code>router</code> 需要改成:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> baseUrl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VITE_ROUTER_BASE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // hash 模式为 createWebHashHistory(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  history: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWebHistory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseUrl),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routes,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><code>vite.config.ts</code> 中增加额外配置，支持上云和 <code>history</code> 模式。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vueAppBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VUE_APP_PUBLICPATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> experimentalConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vueAppBase </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  experimental: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    renderBuiltUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hostId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hostType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      hostId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      hostType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[experimental] &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hostType, hostId, type, filename);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeLastSlash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vueAppBase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">filename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  root: subProjectRoot,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  envDir: process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cwd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  base: vueAppBase </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">experimentalConfig,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-9-其他" tabindex="-1">3.9. 其他 <a class="header-anchor" href="#_3-9-其他" aria-label="Permalink to &quot;3.9. 其他&quot;">​</a></h3><p>还有很多其他小的适配和改造，直接看<a href="https://v3-migration.vuejs.org/zh/" target="_blank" rel="noreferrer">官方文档</a>就行了。</p><p>比如 <code>.sync</code> 的去除，这里我写了脚本对 <code>component</code> 子仓库进行了批量替换，</p><h2 id="_4-实例" tabindex="-1">4. 实例 <a class="header-anchor" href="#_4-实例" aria-label="Permalink to &quot;4. 实例&quot;">​</a></h2><p>Vue 中的实例分应用实例和组件实例，<code>Vue2.x</code> 中开发者不用太关心，因为它用了原型链，在组件实例尝试获取应用实例的属性，也可以拿到。<code>Vue3.x</code> 中则不一样。</p><p>比如 <code>$ebus</code> 的适配，首先 <code>$ebus</code> 一定是挂载在应用实例上，这样每个组件才能拿到相同的。下面代码是错误的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(component, {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">propsData,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eBus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventBus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 挂载目标不对</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.config.globalProperties.$ebus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eBus;</span></span></code></pre></div><p>并且挂载时机也必须在 <code>mount</code> 之前。下面的代码就是错误的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(component, {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">propsData,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">componentInstance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eBus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventBus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 挂载太晚了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.config.globalProperties.$ebus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eBus;</span></span></code></pre></div><p>贴两张图，直观感受下应用实例和组件示例的差别。应用实例：</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2024/1/own_mike_c20cc965e3ff166983.png" width="500"><p>组件实例：</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2024/1/own_mike_b7b0e0ea9ff730394f.png" width="500"><h2 id="_5-总结" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>好的工程配置可以事半功倍，升级 Vue3 在我看来不只是语法的升级，更重要的是工程的配置。你可以在 Vue3 中写 <code>hooks</code>，也可以写 <code>options API</code>，这些都是小事，重要的是你得有这样一套配置，并且对基础组件、基础工具库做好兼容。</p><p>复杂的事情简单做，而不是反过来。一天天吭哧吭哧加班，装作很忙的样子，最后代码写的像屎一样。对应到 Vue3 适配，Press 系列组件库、底层工具都是兼容 Vue3 的，所以上层改动很少，如果由 KPI 驱动型的人来做，估计又要重新写一套组件库，当作自己辉煌的 KPI 了。</p><p>至于 Press 系列组件库是如何兼容 Vue3 的，可以参考<a href="https://juejin.cn/spost/7325693010569609266" target="_blank" rel="noreferrer">之前的文章</a>。</p>`,53)]))}const E=i(t,[["render",p]]);export{c as __pageData,E as default};
