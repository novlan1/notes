import{_ as a,c as o,o as t,ag as c}from"./chunks/framework.6d7lLjym.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2025上/csrf-nick.md","filePath":"docs/2025上/csrf-nick.md","lastUpdated":1743064617000}'),i={name:"docs/2025上/csrf-nick.md"};function d(s,e,r,n,l,p){return t(),o("div",null,e[0]||(e[0]=[c('<h2 id="_1-开始" tabindex="-1">1. 开始 <a class="header-anchor" href="#_1-开始" aria-label="Permalink to &quot;1. 开始&quot;">​</a></h2><p>记录下业务被门神拦截的问题。</p><h2 id="_2-问题暴露" tabindex="-1">2. 问题暴露 <a class="header-anchor" href="#_2-问题暴露" aria-label="Permalink to &quot;2. 问题暴露&quot;">​</a></h2><p>测试同学发现页面打不开，被重定向到 501 页面。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/6/own_mike_beXrP2MsbMdTek58.png" width="500"><h2 id="_3-问题排查" tabindex="-1">3. 问题排查 <a class="header-anchor" href="#_3-问题排查" aria-label="Permalink to &quot;3. 问题排查&quot;">​</a></h2><p>问了一圈，得到原因是门神拦截的，具体是：</p><ul><li>洞悉平台扫描后台接口，种下了脏 <code>cookie</code></li><li>门神平台同样扫了后台接口，检测到脏 <code>cookie</code>，重定向到 501</li></ul><p>脏 <code>cookie</code> 举例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>${url:UTF-8:http://tst2.qq.com/cmd_inject/310d5a77b52e0d65752d5de079e97e05}</span></span></code></pre></div><p>洞悉种这个是为了检测页面是否有 CSRF 漏洞。门神检测到 <code>cookie</code> 里有不合法的字符，如 <code>${}&lt;&gt;</code>等就关键字拦截请求并重定向到 501。</p><p>比较奇葩的是这一拦截没有官方文档，全靠口口相传。</p><h2 id="_4-问题解决" tabindex="-1">4. 问题解决 <a class="header-anchor" href="#_4-问题解决" aria-label="Permalink to &quot;4. 问题解决&quot;">​</a></h2><p>前端尝试发送请求前清理脏数据，发现并不能生效。最后解决办法是后台过滤，遇到这种<code>cookie</code>，拦截、过滤，不入库、不下发。</p>',14)]))}const u=a(i,[["render",d]]);export{_ as __pageData,u as default};
