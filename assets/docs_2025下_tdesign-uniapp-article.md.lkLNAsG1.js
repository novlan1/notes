import{_ as a,c as i,o as s,ag as o}from"./chunks/framework.6d7lLjym.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2025下/tdesign-uniapp-article.md","filePath":"docs/2025下/tdesign-uniapp-article.md","lastUpdated":1761359758000}'),l={name:"docs/2025下/tdesign-uniapp-article.md"};function t(d,e,c,n,p,r){return s(),i("div",null,e[0]||(e[0]=[o(`<h2 id="_1-开始" tabindex="-1">1. 开始 <a class="header-anchor" href="#_1-开始" aria-label="Permalink to &quot;1. 开始&quot;">​</a></h2><p>跨端需求一直就有，一套代码用在多个平台。国内使用 <a href="https://uniapp.dcloud.net.cn/" target="_blank" rel="noreferrer">uniapp</a> 框架人数较多，一直有外部声音想要 uniapp 版本的 TDesign，如 TDesign Miniprogram 下的众多 <a href="https://github.com/Tencent/tdesign-miniprogram/issues?q=uniapp" target="_blank" rel="noreferrer">issue</a>。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/10/own_mike_z2BC3Qi7FE8DNNWx.png" width="600"><p>原生小程序和 uniapp 有差异，有人在 uniapp 项目里用了原生小程序组件，需要魔改内部组件代码。</p><p>基于以上需求，写了 <a href="https://www.npmjs.com/package/tdesign-uniapp" target="_blank" rel="noreferrer">TDesign UniApp</a> 项目，目前支持 H5/微信小程序/iOS/安卓等（2025.10.25）。</p><h2 id="_2-转化过程" tabindex="-1">2. 转化过程 <a class="header-anchor" href="#_2-转化过程" aria-label="Permalink to &quot;2. 转化过程&quot;">​</a></h2><h3 id="_2-1-整体思路" tabindex="-1">2.1. 整体思路 <a class="header-anchor" href="#_2-1-整体思路" aria-label="Permalink to &quot;2.1. 整体思路&quot;">​</a></h3><p>之前写过 Press UI，整体思路差不多。就是将小程序的 <code>wxml/wxss/js/json</code> 转成 uniapp 的 Vue，四个文件合成一个文件。以及将小程序的语法进行转化，以下是核心部分：</p><ol><li>uniComponent 包裹，内部有一些公共处理</li><li>properties =&gt; props</li><li>setData =&gt; data 正常赋值</li><li>生命周期改造</li><li>事件改造</li><li>props 文件改造，from: <code>value: ([^{]+)</code>，to: <code>default: $1</code></li></ol><p>其他部分，如 <code>externalClasses</code>、<code>relations</code>，以及组件库特有的受控属性、命令调用等都需要进行额外的处理。</p><h3 id="_2-2-api-设计" tabindex="-1">2.2. API 设计 <a class="header-anchor" href="#_2-2-api-设计" aria-label="Permalink to &quot;2.2. API 设计&quot;">​</a></h3><p>API 一定要与官方一致，这是最不能妥协的，包括 <code>props</code>、<code>events</code>、事件参数，参数类型、插槽、CSS变量。</p><p>这样做的好处是，开发者没有额外心智负担，同时限制开发人员的胡乱发挥，以及减少开发者的决策成本。</p><p>API 尽量与小程序对齐，而不是 <code>mobile-vue/mobile-react</code>，因为 <code>uniapp</code> 语法主要是小程序的语法。</p><h3 id="_2-3-事件参数" tabindex="-1">2.3. 事件参数 <a class="header-anchor" href="#_2-3-事件参数" aria-label="Permalink to &quot;2.3. 事件参数&quot;">​</a></h3><p><code>tdesign-miniprogram</code> 中的事件参数，在 <code>tdesign-uniapp</code> 中都被去掉了 <code>detail</code> 一层。以 Picker 组件为例，在 <code>tdesign-miniprogram</code> 中，这样获取参数</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onPickerChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.detail.value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <code>tdesign-uniapp</code> 中，需要去掉 <code>.detail</code>，即</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onPickerChange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样做是为了简化使用。<code>tdesign-uniapp</code> 中所有组件都采用了这种方式。</p><h3 id="_2-4-可维护性" tabindex="-1">2.4. 可维护性 <a class="header-anchor" href="#_2-4-可维护性" aria-label="Permalink to &quot;2.4. 可维护性&quot;">​</a></h3><p>转换工具无法做到 100%，意味着一定会有人工介入。工具转换结果中，会出现一些奇怪的、难以理解的、难以维护的代码，需要改造。</p><ul><li>用统一的语法</li><li>不使用编译后的、混淆后的变量</li></ul><h2 id="_3-细节" tabindex="-1">3. 细节 <a class="header-anchor" href="#_3-细节" aria-label="Permalink to &quot;3. 细节&quot;">​</a></h2><h3 id="_3-1-命令调用" tabindex="-1">3.1. 命令调用 <a class="header-anchor" href="#_3-1-命令调用" aria-label="Permalink to &quot;3.1. 命令调用&quot;">​</a></h3><p>tdesign-uniapp 中支持命令调用的组件有</p><ul><li>ActionSheet</li><li>Dialog</li><li>Message</li><li>Toast</li></ul><p>TDesign UniApp 下，命令调用的核心思路是数据转化，就是把所有 <code>props</code> 都声明成 <code>data</code>，比如 <code>visible</code> =&gt; <code>dataVisible</code>，这样组件自身才能既能从方法（<code>methods</code>）中得到值，又能从 <code>props</code> 中得到值。要改的地方包括</p><ol><li><code>data</code> 中初始化</li><li><code>watch</code> 中监听</li><li><code>setData</code> 收口，设置的时候都加上特殊开头</li></ol><p>每个组件具体实现不同。</p><ul><li>Message 嵌套了一层 <code>message-item</code>，<code>message-item</code> 没有 <code>props</code>，都是 <code>setData</code> 直接给的 <code>data</code>，所以根本不需要转换。 <ul><li>这是另一种解决思路了，用嵌套子组件，而不是转换数据。子组件一嵌套，且数据全部不走 <code>props</code>，而是调用子组件内部方法。</li><li>展示时， <code>setMessage</code>（组件调用、命令调用都走） =&gt; <code>addMessage</code> ( =&gt; <code>showMessageItem</code>) 或者 <code>updateMessage</code></li><li>Message 中的 <code>setMessage/addMessage/showMessageItem</code> 都是指的内部的 <code>message-item</code>，是循环的 <code>messageList</code>，而不是页面级别的 <code>t-message</code></li></ul></li><li>Dialog、ActionSheet 需要转换 <ul><li>调用 <code>setData</code>，将属性（包含 <code>visible: true</code>）传进去，同时将 <code>instance</code> 的 <code>_onConfirm</code> 设置为 <code>promise</code> 的 <code>resolve</code></li></ul></li><li>Toast 没有组件调用，只有命令式，无需数据转换。 <ul><li>调用 <code>instance.show</code>，内部还是 <code>setData</code></li></ul></li></ul><h3 id="_3-2-受控属性" tabindex="-1">3.2. 受控属性 <a class="header-anchor" href="#_3-2-受控属性" aria-label="Permalink to &quot;3.2. 受控属性&quot;">​</a></h3><p>存在受控属性的非表单组件有</p><ul><li>反馈类：ActionSheet、DropdownItem、Guide</li><li>展示类：CheckTag、Collapse、Image-viewer</li><li>导航类：Indexes、Sidebar、Steps、Tabbar、Tabs</li></ul><p>TDesign UniApp 中受控属性的处理，和小程序版本差不多。是将其转成 <code>data</code> 开头的内部属性，初始化的时候，会判断受控和非受控值。同时触发事件的时候也要判断当前是否存在受控属性，非受控的时候直接改变内部值并抛出事件，受控的时候只抛出事件。以及，<code>props</code> 中受控属性的默认值需是 <code>null</code> 或 <code>undefined</code>。</p><p>不同的是，小程序受控属性，可以使用 <code>this.setData({ [value]: this.defaultValue })</code>，也就是 <code>data</code> 中声明了一个和 <code>properties</code> 中一样的变量，Vue 中不可以，会报错 <code>&#39;set&#39; on proxy: trap returned falsish for property &#39;value&#39;</code></p><p>总结下来，受控属性要处理的：</p><ol><li><code>watch</code> 中监听</li><li><code>created</code> 中初始化</li><li><code>methods</code> 中新增 <code>_trigger</code>，作为抛出事件的收口</li></ol><h3 id="_3-3-三方库" tabindex="-1">3.3. 三方库 <a class="header-anchor" href="#_3-3-三方库" aria-label="Permalink to &quot;3.3. 三方库&quot;">​</a></h3><p><code>tdesign-miniprogram</code> 执行 <code>npm run build</code>，在 <code>miniprogram_dist/node_modules</code> 目录下 拿到 <code>dayjs</code> 和 <code>tinycolor2</code> 的产物，复制到 <code>tdesign-uniapp</code> 的 <code>npm</code> 目录下，用啥拿啥 。</p><p>一次性工作，一般不会改。</p><h3 id="_3-4-input-受控" tabindex="-1">3.4. input 受控 <a class="header-anchor" href="#_3-4-input-受控" aria-label="Permalink to &quot;3.4. input 受控&quot;">​</a></h3><p>H5 下，uni-app 封装了 <code>input</code>，且不支持受控。</p><p>Input 限制中文字符在 uni-app 实现的话，解决方案是先设置一次，然后在 <code>nextTick</code> 中再设置一次。</p><p>参考：<a href="https://ask.dcloud.net.cn/article/39736" target="_blank" rel="noreferrer">https://ask.dcloud.net.cn/article/39736</a></p><p>其他方案：</p><ol><li>可以动态创建 <code>input</code> 元素，不用 uni-app 包裹的，缺点是更新属性麻烦。</li><li>动态计算 <code>maxlength</code>，用浏览器原生属性约束，缺点是实现稍复杂、代码量稍多。</li></ol><h3 id="_3-5-externalclass" tabindex="-1">3.5. externalClass <a class="header-anchor" href="#_3-5-externalclass" aria-label="Permalink to &quot;3.5. externalClass&quot;">​</a></h3><p>uni-app 下，<code>externalClasses</code> 是不生效的。</p><p>参考：</p><ul><li><a href="https://github.com/dcloudio/uni-app/issues/3275" target="_blank" rel="noreferrer">https://github.com/dcloudio/uni-app/issues/3275</a></li><li><a href="https://ask.dcloud.net.cn/question/163695" target="_blank" rel="noreferrer">https://ask.dcloud.net.cn/question/163695</a></li></ul><p>所以 <code>styleIsolation: apply-shared</code> 不够用，以只能改成 <code>styleIsolation: shared</code>，这样开发者才能在任意使用的地方覆盖组件样式。</p><p>可以改下 <code>packages/site/node_modules/@dcloudio/uni-mp-compiler/dist/transforms/transformComponent.js</code>，把 <code>isComponentProp</code> 方法，将 <code>t-class</code> 排除，就能解决，但是官方不会推出。</p><h3 id="_3-6-scoped" tabindex="-1">3.6. scoped <a class="header-anchor" href="#_3-6-scoped" aria-label="Permalink to &quot;3.6. scoped&quot;">​</a></h3><p>tdesign-uniapp 必须加 <code>scoped</code>，否则一个自定义组件加了 <code>styleIsolation: shared</code>，同一页面下其他没加此属性的自定义组件也会生效，只要 <code>class</code> 相同！</p><h3 id="_3-7-t-class" tabindex="-1">3.7. t-class <a class="header-anchor" href="#_3-7-t-class" aria-label="Permalink to &quot;3.7. t-class&quot;">​</a></h3><p>统一用 <code>tClass</code>，而不是 <code>class</code>。</p><img src="https://cdn.uwayfly.com/article/2025/10/own_mike_bR3Jm86QaWDeWRdD.png" width="600"><h3 id="_3-8-distancetop" tabindex="-1">3.8. distanceTop <a class="header-anchor" href="#_3-8-distancetop" aria-label="Permalink to &quot;3.8. distanceTop&quot;">​</a></h3><p>Drawer 顶部过高，是因为子组件 <code>popup</code> 中使用的 <code>--td-popup-distance-top</code> 变量为 <code>0</code>，这个变量由 <code>distanceTop</code> 生成，<code>distanceTop</code> 又是由 <code>using-custom-navbar</code> 这个 <code>mixin</code> 生成。</p><p><code>distanceTop</code> 由 <code>uni.getMenuButtonBoundingClientRect</code> 计算生成，H5下没有这个API，可以直接传入 <code>customNavbarHeight</code>，这个值由业务自行计算得到。</p><p>目前使用到 <code>using-custom-navbar</code> 这个 <code>mixin</code> 的组件有</p><ul><li>Overlay，基础，使用到它的也会引用 <ul><li>Popup</li><li>Picker</li><li>ActionSheet</li><li>Calendar</li><li>Dialog</li><li>Drawer</li><li>Guide</li><li>Toast</li></ul></li><li>Fab</li><li>ImageViewer</li></ul><h3 id="_3-9-page-scroll" tabindex="-1">3.9. page-scroll <a class="header-anchor" href="#_3-9-page-scroll" aria-label="Permalink to &quot;3.9. page-scroll&quot;">​</a></h3><p>APP-PLUS 下，动态监听 <code>onPageScroll</code> 不生效，需要业务自己在页面中监听，下面给出最佳实践之一。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 页面 Vue 文件下，引入组件库提供的监听方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 该方法内部会通过 event-bus，传递参数给对应的组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { handlePageScroll } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;tdesign-uniapp/mixins/page-scroll&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onPageScroll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handlePageScroll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>目前使用到 <code>page-scroll</code> 这个 <code>mixin</code> 的组件有</p><ol><li>Sticky</li><li>Indexes</li><li>Tabs(引入了 Sticky)</li></ol><p>示例页面有</p><ul><li>Fab</li><li>PullDownRefresh</li></ul><h3 id="_3-10-getcustomnavbarheight-报错" tabindex="-1">3.10. getCustomNavbarHeight 报错 <a class="header-anchor" href="#_3-10-getcustomnavbarheight-报错" aria-label="Permalink to &quot;3.10. getCustomNavbarHeight 报错&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Cannot read properties of null (reading &#39;parentElement&#39;)</span></span></code></pre></div><img src="https://cdn.uwayfly.com/article/2025/10/own_mike_ycz2zafE5BbMiDDs.png" width="600"><p>这种就是 <code>mounted</code> 之后没延时，没获取到对应元素。</p><h3 id="_3-11-site-工程中的-alias" tabindex="-1">3.11. site 工程中的 alias <a class="header-anchor" href="#_3-11-site-工程中的-alias" aria-label="Permalink to &quot;3.11. site 工程中的 alias&quot;">​</a></h3><p>tdesign-uniapp 在 H5 下使用 <code>vite.config</code> 中的 <code>alias</code>，不使用 <code>workspace</code>，可解决修改组件后必须重启才能生效。</p><p>小程序下，这种方式需要进一步改造，只能引用同一个子工程，即不能跨 <code>src</code>，解决方案就是监听组件变动，同步复制到 <code>site</code> 工程下。</p><h3 id="_3-12-watch" tabindex="-1">3.12. watch <a class="header-anchor" href="#_3-12-watch" aria-label="Permalink to &quot;3.12. watch&quot;">​</a></h3><p>小程序的 <code>observers</code> 和 <code>vue</code> 的 <code>watch</code> 逻辑并不完全相同，小程序下，如果 <code>prop</code> 接收外部传入的实参与该 <code>prop</code> 的默认值不相等时，会导致 <code>observer</code> 被立即调用一次，Vue 而不是。</p><p><code>image</code> 中 <code>calcSize</code> 中就用到了。</p><h2 id="_4-其他" tabindex="-1">4. 其他 <a class="header-anchor" href="#_4-其他" aria-label="Permalink to &quot;4. 其他&quot;">​</a></h2><h3 id="_4-1-button" tabindex="-1">4.1. button <a class="header-anchor" href="#_4-1-button" aria-label="Permalink to &quot;4.1. button&quot;">​</a></h3><p><code>button</code> 不是最简单的，<code>loading/icon</code> 才是最简单的，它们是 <code>button</code> 的子元素。</p><h3 id="_4-2-组件" tabindex="-1">4.2. 组件 <a class="header-anchor" href="#_4-2-组件" aria-label="Permalink to &quot;4.2. 组件&quot;">​</a></h3><p>下面是个人对一些移动端组件的理解。</p><p>导航类</p><ul><li>Navbar、Tabbar、Sidebar、Indexes 分别是上下左右四个方向的导航，固定</li><li>Drawer、Backtop 都是可隐藏的，点击某处或滑动到某处时才显示</li><li>Tabs 是业务中最常用的导航类组件，Steps 比 Tabs 更苛刻，有顺序，这两都以 <code>s</code> 结尾</li></ul><p>反馈类</p><ul><li>Overlay、Popup、Loading 基础</li><li>Message、Toast、Dialog、NoticeBar 是一类，Message 上+动态，Toast 中间，Dialog 中间，更重，NoticeBar 上+固定</li><li>DropdownMenu、ActionSheet 一个从上往下显示，一个从下往上</li><li>SwipeCell，PulldownRefresh 一个向左滑，一个向下滑</li><li>Guide 特殊，全局，其他的都是局部</li></ul><p>输入类</p><ul><li>Input、Textarea、Search，文字输入</li><li>Radio、Checkbox、Switch，点击选择</li><li>Stepper、Slider，数字选择（输入）一个是点击，一个是滑动</li><li>Picker，Cascader、TreeSelect，滑动选择</li><li>Calendar、DatetimePicker，特殊场景</li><li>ColorPicker，特殊场景</li><li>Rate，特殊场景</li><li>Upload，特殊场景</li></ul><h3 id="_4-3-wxcomponent" tabindex="-1">4.3. wxComponent <a class="header-anchor" href="#_4-3-wxcomponent" aria-label="Permalink to &quot;4.3. wxComponent&quot;">​</a></h3><p><code>tdesign-miniprogram</code> 中 <code>wxComponent</code> 类的作用：</p><ol><li>属性，处理受控属性，增加 <code>default*</code> 属性的默认值，增加 <code>style/customStyle</code> 属性，增加 <code>aria*</code> 相关属性</li><li><code>externalClasses</code>，增加 <code>class</code></li><li>方法，增加 <code>_trigger</code>，兼容受控情况下的抛出事件，非生命周期函数挂载在 <code>methods</code> 对象上</li><li>生命周期函数放到 <code>lifetimes</code> 上</li></ol><h3 id="_4-4-uni-app" tabindex="-1">4.4. uni-app <a class="header-anchor" href="#_4-4-uni-app" aria-label="Permalink to &quot;4.4. uni-app&quot;">​</a></h3><p><code>src/core/runtime/mp/polyfill/index.js</code></p><p>uni-app 中运行时对 <code>vant-weapp</code> 的 <code>polyfill</code> 核心逻辑</p><h3 id="_4-5-data" tabindex="-1">4.5. data <a class="header-anchor" href="#_4-5-data" aria-label="Permalink to &quot;4.5. data&quot;">​</a></h3><p>只要不在模板中使用，<code>data</code> 不用提前声明，<code>created</code> 中动态声明即可</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.xxx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_5-总结" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>TDesign UniApp 的开发，像一种翻译，原创部分当然也有。这里向 TDesign Miniprogram 的开发者致敬🫡。</p><p>后续规划是</p><ol><li>同步 TDesign Miniprogram 改动，尽量在小程序版本发布后的一周内，同步改动到 uniapp 版本上</li><li>兼容调试更多平台</li><li>模板工程等</li></ol>`,104)]))}const g=a(l,[["render",t]]);export{u as __pageData,g as default};
