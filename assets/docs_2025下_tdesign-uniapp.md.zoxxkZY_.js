import{_ as i,c as s,o as e,ag as l}from"./chunks/framework.6d7lLjym.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2025下/tdesign-uniapp.md","filePath":"docs/2025下/tdesign-uniapp.md","lastUpdated":1760514335000}'),t={name:"docs/2025下/tdesign-uniapp.md"};function n(o,a,p,d,h,c){return e(),s("div",null,a[0]||(a[0]=[l(`<h3 id="_1-button" tabindex="-1">1. button <a class="header-anchor" href="#_1-button" aria-label="Permalink to &quot;1. button&quot;">​</a></h3><p>button 不是最简单的，loading/icon才是最简单的，它们是 button 的子元素</p><h3 id="_2-tdesign-miniprogram" tabindex="-1">2. tdesign-miniprogram <a class="header-anchor" href="#_2-tdesign-miniprogram" aria-label="Permalink to &quot;2. tdesign-miniprogram&quot;">​</a></h3><p><code>tdesign-miniprogram</code> 中 <code>wxComponent</code> 类的作用：</p><ol><li>属性，处理受控属性，增加 <code>default*</code> 属性的默认值，增加 <code>style/customStyle</code> 属性，增加 <code>aria*</code> 相关属性</li><li><code>externalClasses</code>，增加 <code>class</code></li><li>方法，增加 <code>_trigger</code>，兼容受控情况下的抛出事件，非生命周期函数挂载在 <code>methods</code> 对象上</li><li>生命周期函数放到 <code>lifetimes</code> 上</li></ol><h3 id="_3-uni-app" tabindex="-1">3. uni-app <a class="header-anchor" href="#_3-uni-app" aria-label="Permalink to &quot;3. uni-app&quot;">​</a></h3><p><code>src/core/runtime/mp/polyfill/index.js</code></p><p>uni-app 中运行时对 <code>vant-weapp</code> 的 <code>polyfill</code> 核心逻辑</p><h3 id="_4-data" tabindex="-1">4. data <a class="header-anchor" href="#_4-data" aria-label="Permalink to &quot;4. data&quot;">​</a></h3><p><code>data</code> 不用提前声明，<code>created</code> 中动态声明即可</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.xxx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_5-uni-app-中-事件的处理" tabindex="-1">5. uni-app 中 事件的处理 <a class="header-anchor" href="#_5-uni-app-中-事件的处理" aria-label="Permalink to &quot;5. uni-app 中 事件的处理&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> oldEmit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm.$emit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">triggerEvent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">eventName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">detail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      dataset: vm.$el.dataset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      target,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      currentTarget: target,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      detail,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      preventDefault: noop,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      stopPropagation: noop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oldEmit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, eventName, event)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 主要是Vant 自己封装了 $emit,放到 methods 中会触发 Vue 的警告,索性,框架直接重写该方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">triggerEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h3 id="_6-watch" tabindex="-1">6. watch <a class="header-anchor" href="#_6-watch" aria-label="Permalink to &quot;6. watch&quot;">​</a></h3><p><code>watch</code>，这么获取</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>vm.$options.watch</span></span></code></pre></div><p>小程序的 <code>observers</code> 和 <code>vue</code> 的 <code>watch</code> 逻辑并不完全相同，小程序下，如果 <code>prop</code> 接收外部传入的实参与该 <code>prop</code> 的默认值不相等时，会导致 <code>observer</code> 被立即调用一次，vue 而不是。</p><p><code>image</code> 中 <code>calcSize</code> 中用到了。</p><h3 id="_7-props" tabindex="-1">7. props <a class="header-anchor" href="#_7-props" aria-label="Permalink to &quot;7. props&quot;">​</a></h3><p><code>miniprogram-to-uniapp</code> 直接转化后的代码有 <code>this = props</code>，这肯定是不对的，需要改成 <code>this.props = props</code></p><h3 id="_8-通用" tabindex="-1">8. 通用 <a class="header-anchor" href="#_8-通用" aria-label="Permalink to &quot;8. 通用&quot;">​</a></h3><ol><li>去掉 <code>zpMixins</code>， <code>zpMixins.extend</code></li><li>组件位置改成<code> index</code>，比如 <code>loading/index</code>，而不是 <code>loading/loading</code></li><li><code>demo</code> 转换的 <code>base</code> 有问题，需改成两个单词的</li><li>引入路径 <code>./tdesign-miniprogram/icon/icon</code>，需改成 <code>tdesign-uniapp/icon</code></li><li>工具把 <code>icon</code> 的 <code>font-family</code> 也转换错了</li><li>转换工具对 <code>cell</code> 组件 <code>title</code> 的处理有问题</li><li><code>&lt;tag arrow /&gt;</code> 中 <code>arrow</code> 在组件里取到的值为空字符串，但是期望是 <code>boolean</code>。<code>tdesign-miniprogram</code> 中一些 <code>props</code> 的 <code>type</code> 为 <code>null</code>，会导致这个问题。 <code>&lt;tag arrow /&gt;</code> <code>arrow</code> 在组件里取到的值为空字符串，但是期望是 <code>true</code>。</li></ol><h3 id="_9-token-核心" tabindex="-1">9. token 核心 <a class="header-anchor" href="#_9-token-核心" aria-label="Permalink to &quot;9. token 核心&quot;">​</a></h3><blockquote><p>颜色色板 =&gt; 全局语义token =&gt; 组件token</p></blockquote><hr><p>2025.10.9</p><hr><h3 id="_10-api-设计" tabindex="-1">10. API 设计 <a class="header-anchor" href="#_10-api-设计" aria-label="Permalink to &quot;10. API 设计&quot;">​</a></h3><p>API 一定要与官方一致，这是最不能妥协的，包括 <code>props</code>、<code>events</code>、事件参数，参数类型、插槽、CSS变量。</p><p>一方面开发者没有额外心智负担，一方限制开发人员的胡乱发挥，也减少开发者的决策成本。</p><p>尽量与小程序对齐，而不是 <code>mobile-vue</code>，因为 <code>uniapp</code> 语法主要是小程序的语法。</p><h3 id="_11-todo" tabindex="-1">11. TODO <a class="header-anchor" href="#_11-todo" aria-label="Permalink to &quot;11. TODO&quot;">​</a></h3><ul><li>[ ] <s>组件结构优化，components/name/name =&gt; components/name/index</s></li><li>[x] 组件中 css 改回 less</li><li>[ ] image 的 mode 属性在 H5 的适配</li><li>[ ] props 由 tdesign-api 统一自动生成</li><li>[ ] 事件抛出检查，统一去掉 detail，以及 tap =&gt; click</li><li>[ ] 统一 externalClasses 的使用，去掉手动写在 props 中的，以及 extra-class =&gt; t-class</li><li>[ ] badge 在 h5 下有偏移</li><li>[ ] 之前组件中的 pageLifetimes 处理</li><li>[x] Grid 组件css修改</li><li>[ ] dialog confirm/cancel 按钮的 class 都改成 tClass了，小程序下要确认</li><li>[x] dialog with-input 示例</li><li>[ ] getInstance 这个方法，refs要兼容带或不带#</li><li>[ ] 每个组件补充 emits，尤其是 click 事件，并提到单独文件中，由 tdesign-api 生成</li><li>[x] pull-down-refresh 中与back-top的relation</li><li>[ ] demo 中 组件和样式放一起，一起自动渲染到文档中</li><li>[ ] Icon 组件太大（样式文件大），需要优化</li><li>[ ] 组件中之前的 externalClasses 的 class 检查</li><li>[ ] 下面这种传值被过滤了，要检查 <code>icon=&quot;{
  &quot;name&quot;: &quot;xx&quot;
}&quot;</code></li><li>[ ] 检查需要增加 v-model 的组件，有些属性必须受控，比如 cascader/calendar 的 visible</li><li>[ ] 文档代码格式不友好，两个属性再换行，充分利用空间</li><li>[ ] Loading 示例 slider 部分 需要补充</li><li>[x] Less 编译成 css，以及将 rpx 转成 px</li><li>[ ] Slider 组件 h5 竖向，有错位</li><li>[ ] calendar 小程序展示时没有动画（非必现）</li><li>[ ] miniprogram uploader 组件 defaultFiles 未使用</li><li>[ ] tdesign-uniapp 模板</li><li>[ ] 文档顶部链接问题</li><li>[ ] 其他端适配问题</li></ul><p>link 新增 css</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* #ifdef H5 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:deep(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.navigator-wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* #endif */</span></span></code></pre></div><h3 id="_12-命令调用" tabindex="-1">12. 命令调用 <a class="header-anchor" href="#_12-命令调用" aria-label="Permalink to &quot;12. 命令调用&quot;">​</a></h3><p>tdesign-uniapp 中支持命令调用的组件有</p><ul><li>action-sheet</li><li>dialog</li><li>message</li><li>toast</li></ul><p>关于数据转换</p><ul><li><p>toast 没有组件调用，只有命令式，无需数据转换。</p></li><li><p>message 嵌套了一层 message-item，message-item 没有 props，都是 setData 直接给的 data，所以根本不需要转换。</p><ul><li>这是另一种解决思路了，用嵌套子组件，而不是转换数据。子组件一嵌套，且数据全部不走props，而是调用子组件内部方法。</li><li>当前 message 父组件只监听 visible。这种方式有个弊端，就是组件调用时，其他属性变化，并没有监听到。</li><li>message 核心 setMessage（组件调用、命令调用都走） =&gt; addMessage (=&gt; showMessageItem) 或者 updateMessage</li><li>Message.ts 中的 setMessage/addMessage/showMessageItem 都是指的 message 内部的 message-item，是循环的 messageList，而不是页面级别的 t-message</li></ul></li><li><p>dialog/action-sheet 需要转换</p></li></ul><p>核心</p><ul><li>dialog 的命令调用核心就跟 press-ui 的一样了，调用 setData，将属性（包含 visible: true）传进去，同时将 instance 的 _onConfirm 设置为 promise 的 resolve</li><li>toast 一样的，只是用来 instance.show 方法，内部还是 setData</li></ul><p>转换就是把所有props都声明成data，比如 visible=&gt; dataVisible，要改的地方包括</p><ol><li>data 中初始化</li><li>watch 中监听</li><li>setData 收口，设置的时候都加上 data 开头</li></ol><h3 id="_13-受控属性" tabindex="-1">13. 受控属性 <a class="header-anchor" href="#_13-受控属性" aria-label="Permalink to &quot;13. 受控属性&quot;">​</a></h3><p>存在受控属性的非表单组件有</p><ul><li>反馈类：action-sheet、dropdown-item、guide</li><li>展示类：check-tag、collapse、image-viewer</li><li>导航类：indexes、sidebar、steps、tabbar、tabs</li></ul><p>小程序受控属性，可以使用 <code>this.setData({ [value]: this.defaultValue })</code>，即改变 props 的值，vue 中不可以，会报错 <code>&#39;set&#39; on proxy: trap returned falsish for property &#39;value&#39;</code></p><p>所以，需要 useDefaultValue 这种 hook，根据 defaultValue和value，得出新的 newValue，用于组件中真正判断</p><p>当前受控属性的处理，是将其转成 data 开头的内部属性，不过初始化的时候，会判断受控和非受控值。同时触发事件的时候也要判断当前是否存在受控属性，非受控的时候直接改变内部值并抛出事件，受控的时候只抛出事件。</p><p>注意，props 中受控和非受控属性的默认值都是 null 或 undefined</p><p>总结下来，受控属性要处理的：</p><ol><li>watch 中监听</li><li>created 中初始化</li><li>methods 中新增 _trigger，作为抛出事件的收口</li></ol><h3 id="_14-可维护性" tabindex="-1">14. 可维护性 <a class="header-anchor" href="#_14-可维护性" aria-label="Permalink to &quot;14. 可维护性&quot;">​</a></h3><ul><li>用统一的语法</li><li>不使用编译后的、混淆后的变量</li></ul><h3 id="_15-最新转换步骤" tabindex="-1">15. 最新转换步骤 <a class="header-anchor" href="#_15-最新转换步骤" aria-label="Permalink to &quot;15. 最新转换步骤&quot;">​</a></h3><ol><li>uniComponent包裹</li><li>去掉 setData，改成直接赋值</li><li>externalClasses 改成 props，在模板中同步修改</li><li>prefix 改具名导入，之前是 const { prefix } = config;</li><li>replace props.js，from: <code>value: ([^{]+)</code>，to: <code>default: $1</code></li></ol><h3 id="_16-site-工程中的-alias" tabindex="-1">16. site 工程中的 alias <a class="header-anchor" href="#_16-site-工程中的-alias" aria-label="Permalink to &quot;16. site 工程中的 alias&quot;">​</a></h3><p>tdesign-uniapp 在 H5下使用 vite.config 中的 alias，不使用 workspace，解决修改组件后必须重启才能生效</p><p>小程序下，这种方式会报错，找不到组件，只能找js文件，所以vite.config 需根据环境判断，是否设置 alias</p><h3 id="_17-hard" tabindex="-1">17. hard <a class="header-anchor" href="#_17-hard" aria-label="Permalink to &quot;17. hard&quot;">​</a></h3><p>The hard road might not lead to glory But the easy road definitely won&#39;t.</p><h3 id="_18-wxs" tabindex="-1">18. WXS <a class="header-anchor" href="#_18-wxs" aria-label="Permalink to &quot;18. WXS&quot;">​</a></h3><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/10/own_mike_62aJQAxB8dp3b6j7.png" width="600"><h3 id="_19-artwork" tabindex="-1">19. artwork <a class="header-anchor" href="#_19-artwork" aria-label="Permalink to &quot;19. artwork&quot;">​</a></h3><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/10/own_mike_YerJ44De845RSASw.png" width="600"><h3 id="_20-三方库" tabindex="-1">20. 三方库 <a class="header-anchor" href="#_20-三方库" aria-label="Permalink to &quot;20. 三方库&quot;">​</a></h3><p><code>tdesign-miniprogram</code> 执行 <code>npm run build</code>，在 <code>miniprogram_dist/node_modules</code> 目录下 拿到 <code>dayjs</code> 和 <code>tinycolor2</code> 的产物，复制到 <code>tdesign-uniapp</code> 的 <code>npm</code> 目录下，用啥拿啥 。</p><p>一次性工作，一般不会改。</p><h3 id="_21-input-受控" tabindex="-1">21. input 受控 <a class="header-anchor" href="#_21-input-受控" aria-label="Permalink to &quot;21. input 受控&quot;">​</a></h3><p>H5 下，uni-app 封装了 <code>input</code>，且不支持受控。</p><p>Input 限制中文字符在 uni-app 实现的话，解决方案是先设置一次，然后在 nextTick 中再设置一次。</p><p>参考：<a href="https://ask.dcloud.net.cn/article/39736" target="_blank" rel="noreferrer">https://ask.dcloud.net.cn/article/39736</a></p><p>其他方案：</p><ol><li>可以动态创建input，不用 uni-app 包裹的，缺点是更新属性麻烦。</li><li>动态计算 maxlength，用浏览器原生属性约束。</li></ol><h3 id="_22-externalclass" tabindex="-1">22. externalClass <a class="header-anchor" href="#_22-externalclass" aria-label="Permalink to &quot;22. externalClass&quot;">​</a></h3><p>uni-app 下，externalClasses 是不生效的。</p><p>参考：</p><ul><li><a href="https://github.com/dcloudio/uni-app/issues/3275" target="_blank" rel="noreferrer">https://github.com/dcloudio/uni-app/issues/3275</a></li><li><a href="https://ask.dcloud.net.cn/question/163695" target="_blank" rel="noreferrer">https://ask.dcloud.net.cn/question/163695</a></li></ul><p>所以 <code>styleIsolation: apply-shared</code> 不够用，以只能改成 <code>styleIsolation: shared</code></p><p>可以改下 <code>packages/site/node_modules/@dcloudio/uni-mp-compiler/dist/transforms/transformComponent.js</code>，把 <code>isComponentProp</code> 方法，将 <code>t-class</code> 排除，就能解决，但是官方不会推出。</p><h3 id="_23-scoped" tabindex="-1">23. scoped <a class="header-anchor" href="#_23-scoped" aria-label="Permalink to &quot;23. scoped&quot;">​</a></h3><p>tdesign-uniapp 必须加 <code>scoped</code>，否则一个自定义组件加了 <code>styleIsolation: shared</code>，同一页面下其他没加此属性的自定义组件也会生效，只要 <code>class</code> 相同！</p><h3 id="_24-t-class" tabindex="-1">24. t-class <a class="header-anchor" href="#_24-t-class" aria-label="Permalink to &quot;24. t-class&quot;">​</a></h3><p>统一用 tClass，而不是 class</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/10/own_mike_bR3Jm86QaWDeWRdD.png" width="600"><h3 id="_25-distancetop" tabindex="-1">25. distanceTop <a class="header-anchor" href="#_25-distancetop" aria-label="Permalink to &quot;25. distanceTop&quot;">​</a></h3><p><code>drawer</code> 顶部过高，是因为子组件 <code>popup</code> 中使用的 <code>--td-popup-distance-top</code> 变量为0，这个变量由 <code>distanceTop</code> 生成，<code>distanceTop</code> 又是由 <code>using-custom-navbar</code> 这个 <code>mixin</code> 生成。</p><p>distanceTop 由 uni.getMenuButtonBoundingClientRect 计算生成，H5下没有这个API，可以直接传入 customNavbarHeight</p><h3 id="_26-page-scroll" tabindex="-1">26. page-scroll <a class="header-anchor" href="#_26-page-scroll" aria-label="Permalink to &quot;26. page-scroll&quot;">​</a></h3><p>使用到 <code>page-scroll</code> 这个 <code>mixin</code> 的组件有</p><ol><li>sticky</li><li>indexes</li><li>tabs(引入了sticky)</li></ol><p>所有如果改动了 <code>page-scroll</code>，这三个组件都要测试下</p><h3 id="_27-getcustomnavbarheight-报错" tabindex="-1">27. getCustomNavbarHeight 报错 <a class="header-anchor" href="#_27-getcustomnavbarheight-报错" aria-label="Permalink to &quot;27. getCustomNavbarHeight 报错&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Cannot read properties of null (reading &#39;parentElement&#39;)</span></span></code></pre></div><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/10/own_mike_ycz2zafE5BbMiDDs.png" width="600"><p>这种就是 mounted 之后没延时，没获取到对应元素。</p>`,97)]))}const g=i(t,[["render",n]]);export{k as __pageData,g as default};
