import{_ as t,c as p,o as l,ag as n,j as i,a,t as h}from"./chunks/framework.6d7lLjym.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2025上/PressUI支持头条小程序.md","filePath":"docs/2025上/PressUI支持头条小程序.md","lastUpdated":1744619817000}'),k={name:"docs/2025上/PressUI支持头条小程序.md"};function d(e,s,o,r,E,c){return l(),p("div",null,[s[4]||(s[4]=n(`<h2 id="_1-开始" tabindex="-1">1. 开始 <a class="header-anchor" href="#_1-开始" aria-label="Permalink to &quot;1. 开始&quot;">​</a></h2><p>头条小程序跟其他小程序很不一样。</p><h2 id="_2-问题及解决方法" tabindex="-1">2. 问题及解决方法 <a class="header-anchor" href="#_2-问题及解决方法" aria-label="Permalink to &quot;2. 问题及解决方法&quot;">​</a></h2><h3 id="_2-1-parent-收集" tabindex="-1">2.1. $parent 收集 <a class="header-anchor" href="#_2-1-parent-收集" aria-label="Permalink to &quot;2.1. $parent 收集&quot;">​</a></h3><p>其他小程序及H5可以通过 <code>provide/inject</code> 来收集 <code>parent</code>。头条小程序中找不到。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/6/own_mike_HHa8HeNminHbpC3j.png" width="600"><p>这里想到一个办法是递归调用 <code>$parent</code>，找最近的一个和目标组件名称相同的 <code>parent</code>。比如 <code>picker-column</code> 中就找组件名称为 <code>PressPicker</code> 最近的父组件。</p><p>但是，头条小程序子孙组件的 <code>$parent</code> 竟然就是页面，而页面的所有 <code>$children</code> 都是拉平的。基于此，想到的办法是从上往下遍历这个拉平的 <code>$children</code>，找距离子组件最近的一个父组件。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/6/own_mike_bmwwwRjGpQYYHhf8.png" width="600"><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/6/own_mike_XSEkhMDNRdNmXEDp.png" width="600"><p>但是，页面的 <code>$children</code> 并不是&quot;父子父子父子..&quot;这样顺序排列的，而是&quot;父父父子子子...&quot;，导致 <code>$children</code> 收集有问题，要么多于实际，要么为空。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/6/own_mike_b6aXQpMmPxh3naGG.png" width="600"><p>想到的办法是父子组件之间传递一个 <code>relationKey</code>，父组件初始化的时候生成，并传给子组件，这个值是唯一的，找 <code>$parent</code> 时就不会找错了</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findNearListParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">children</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> children) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parentRelationKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.$data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.$data.relationKey;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> thisRelationKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$props </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$props.relationKey;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (item.$options.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parentRelationKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> thisRelationKey) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> temp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-2-生命周期" tabindex="-1">2.2. 生命周期 <a class="header-anchor" href="#_2-2-生命周期" aria-label="Permalink to &quot;2.2. 生命周期&quot;">​</a></h3><p>Vue 中父子组件生命周期正常的执行顺序是：父组件先创建，然后子组件创建；子组件先挂载，然后父组件挂载，即“父beforeCreate-&gt; 父create -&gt; 子beforeCreate-&gt; 子created -&gt; 子mounted -&gt; 父mounted”。</p><p>头条小程序并不遵循这样的规律。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/6/own_mike_8rXrNdH7m6fmAaSd.png" width="600"><p>这个问题会导致父子组件的初始化数据出问题，之前在父组件 <code>mounted</code> 中执行的初始逻辑，都会因为还没收集完 <code>children</code>，而失败。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/6/own_mike_d3M8XdYzTBxHSRzh.png" width="600"><p>解决办法有两种，可用延时，也可用回调。回调更安全，延时可能跟机器性能有关。回调就是在子组件 <code>mounted</code> 的时候调用父组件的数据初始化方法。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PARENT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setColumns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>看一下 <code>area</code> 组件数据初始化流程：</p><p><code>column</code> 组件 <code>mounted</code> =&gt; 调用 <code>picker</code> 组件 <code>setColumns</code>; <code>emit afterSetColumns</code> =&gt; <code>area</code> 组件 <code>setValues</code> =&gt; 调用 <code>picker</code> 组件 <code>setColumnValues</code> 和 <code>setIndexes</code></p><h3 id="_2-3-样式覆盖" tabindex="-1">2.3. 样式覆盖 <a class="header-anchor" href="#_2-3-样式覆盖" aria-label="Permalink to &quot;2.3. 样式覆盖&quot;">​</a></h3><p>头条小程序下，父组件中不能在样式文件中覆盖子组件的样式。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/6/own_mike_HaQmC7fSnrBbXhzS.png" width="600"><p>解决办法是，通过 <code>customStyle</code> 属性传递，或者写在全局。写在全局是下策，业务过于关心组件库了，这里采用的是 <code>customStyle</code>。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/6/own_mike_X5XhDK4Gh5MxAQbN.png" width="600"><h3 id="_2-4-虚拟节点" tabindex="-1">2.4. 虚拟节点 <a class="header-anchor" href="#_2-4-虚拟节点" aria-label="Permalink to &quot;2.4. 虚拟节点&quot;">​</a></h3><p>使用 Fragment 组件节点后，自定义事件将失效。Press UI 针对头条小程序，一律不适用此属性，保持统一。</p><p>参考<a href="https://developer.open-douyin.com/docs/resource/zh-CN/mini-app/develop/tutorial/custom-component/component-model-and-style#7417c627" target="_blank" rel="noreferrer">文档</a></p><h2 id="_3-其他" tabindex="-1">3. 其他 <a class="header-anchor" href="#_3-其他" aria-label="Permalink to &quot;3. 其他&quot;">​</a></h2><h3 id="_3-1-onpagescroll" tabindex="-1">3.1. onPageScroll <a class="header-anchor" href="#_3-1-onpagescroll" aria-label="Permalink to &quot;3.1. onPageScroll&quot;">​</a></h3><p>必须在页面声明 <code>onPageScroll</code> 方法（空的也行）后，才能动态添加新的监听事件。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onPageScroll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-2-抖音授权登录" tabindex="-1">3.2. 抖音授权登录 <a class="header-anchor" href="#_3-2-抖音授权登录" aria-label="Permalink to &quot;3.2. 抖音授权登录&quot;">​</a></h3>`,37)),i("p",null,[s[0]||(s[0]=a("只能用原生组件以及原生方法。推测其会检测语法，")),s[1]||(s[1]=i("code",null,'@click="onLogin"',-1)),s[2]||(s[2]=a(" 也不行，因为他会转变成 ")),i("code",null,"bindtap="+h(e.xx),1),s[3]||(s[3]=a("，这种有大括号，不被认可。"))]),s[5]||(s[5]=n(`<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;onLogin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;抖音授权登录&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onLogin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUserProfile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onLogin.res&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, res)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;onLogin.fail&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,2))])}const m=t(k,[["render",d]]);export{y as __pageData,m as default};
