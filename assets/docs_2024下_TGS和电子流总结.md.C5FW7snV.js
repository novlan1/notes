import{_ as d,c as e,o,ag as a}from"./chunks/framework.6d7lLjym.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2024下/TGS和电子流总结.md","filePath":"docs/2024下/TGS和电子流总结.md","lastUpdated":1746156232000}'),r={name:"docs/2024下/TGS和电子流总结.md"};function c(i,t,l,n,s,h){return o(),e("div",null,t[0]||(t[0]=[a('<h3 id="开始" tabindex="-1">开始 <a class="header-anchor" href="#开始" aria-label="Permalink to &quot;开始&quot;">​</a></h3><p>TGS 和电子流项目都进行了重构，同步下设计原则、当前规范等。</p><h3 id="理解tgs和电子流" tabindex="-1">理解TGS和电子流 <a class="header-anchor" href="#理解tgs和电子流" aria-label="Permalink to &quot;理解TGS和电子流&quot;">​</a></h3><p>TGS 和电子流都是管理端，二者有以下不同：</p><table tabindex="0"><thead><tr><th>系统</th><th>TGS</th><th>电子流</th></tr></thead><tbody><tr><td>用户群体</td><td>偏内部</td><td>偏外部</td></tr><tr><td>设计规范</td><td>基本无，开发者自行堆砌组件库即可</td><td>有，需遵循</td></tr><tr><td>变更频率</td><td>频繁</td><td>较少</td></tr><tr><td>项目间差异</td><td>差异较大，多个页面需定制</td><td>差异较小，多数情况下改下主题图、样式、<code>gid</code> 即可</td></tr></tbody></table><h3 id="模板建设" tabindex="-1">模板建设 <a class="header-anchor" href="#模板建设" aria-label="Permalink to &quot;模板建设&quot;">​</a></h3><p>基于以上不同，TGS 和电子流模板设计也有所不同：</p><ul><li>模板代码量上，TGS 较少，电子流较多</li><li>接入一个新项目，TGS 用户较多，电子流分分钟接入</li></ul><h3 id="电子流优化" tabindex="-1">电子流优化 <a class="header-anchor" href="#电子流优化" aria-label="Permalink to &quot;电子流优化&quot;">​</a></h3><p>无畏契约电子流从旧项目改造，并改了部分接口，以及优化了以下部分。</p><table tabindex="0"><thead><tr><th>旧</th><th>新</th></tr></thead><tbody><tr><td>目录结构极为混乱，组件、逻辑放的到处都是</td><td>公共逻辑或组件放到 <code>local-component/logic</code>，非共用的放到子工程 <code>component/logic</code> 下</td></tr><tr><td>命名不统一，文件、目录有 <code>pascal</code>、也有 <code>kebab</code></td><td>文件、目录统一为 <code>kebab</code></td></tr><tr><td>引用混乱，子工程间相互引用，非共用的也写在外部，外层引用内层</td><td>规范引用关系，子工程间不可引用，非共用的写在子工程内，禁止反向依赖</td></tr><tr><td>过度封装路由跳转，更引入了 <code>mixin</code>，开发调试困难，来回跳跃</td><td>删除 <code>mixin</code>、<code>jump</code>，跳转逻辑直接写在组件、页面中，简单、清晰、易维护</td></tr><tr><td>全是 <code>js</code>，没有 <code>ts</code>，缺失类型提示、类型校验</td><td><code>js</code> 全部改成 <code>ts</code>，补充类型，增强健壮性</td></tr><tr><td>组件库乱用，PC 也用 Vant，H5 也用 Element</td><td>PC 统一用 Element，H5 统一用 Vant（这里不用 Press UI 是为了业务快速升级）</td></tr><tr><td>组件从 <code>index.js</code> 额外导出，冗余</td><td>删掉多余的 <code>index.js</code>，直接引入 Vue 文件</td></tr><tr><td>全是魔法字符串，如 gid、orgId、roleId 等</td><td>全部改成统一的配置文件引入</td></tr><tr><td>组件与样式位置分散，难以维护</td><td>样式就近放置在组件旁</td></tr><tr><td>大量 <code>typo</code> 拼写错误，有些甚至表现在 <code>url</code> 上，如 <code>/apply/authentification</code></td><td>改成正确的，避免低级错误</td></tr><tr><td>导出用大对象，不利于 <code>tree-shaking</code></td><td>分方法导出，避免大对象</td></tr></tbody></table>',11)]))}const b=d(r,[["render",c]]);export{_ as __pageData,b as default};
