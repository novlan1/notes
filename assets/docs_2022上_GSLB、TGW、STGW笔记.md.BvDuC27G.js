import{_ as e,c as a,o as i,ag as r}from"./chunks/framework.6d7lLjym.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2022上/GSLB、TGW、STGW笔记.md","filePath":"docs/2022上/GSLB、TGW、STGW笔记.md","lastUpdated":1748919683000}'),t={name:"docs/2022上/GSLB、TGW、STGW笔记.md"};function o(p,l,s,T,h,c){return i(),a("div",null,l[0]||(l[0]=[r('<h2 id="一、开始" tabindex="-1">一、开始 <a class="header-anchor" href="#一、开始" aria-label="Permalink to &quot;一、开始&quot;">​</a></h2><p>本文是一篇学习笔记。</p><p>一道前端经典面试题 从输入URL到页面加载发生了什么？</p><p>总体来说分为以下几个过程：</p><ol><li><p>DNS解析</p></li><li><p>TCP连接</p></li><li><p>发送HTTP请求</p></li><li><p>服务器处理请求并返回HTTP报文</p></li><li><p>浏览器解析渲染页面</p></li><li><p>连接结束</p></li></ol><h2 id="二、dns解析" tabindex="-1">二、DNS解析 <a class="header-anchor" href="#二、dns解析" aria-label="Permalink to &quot;二、DNS解析&quot;">​</a></h2><p>DNS解析其核心功能是根据域名解析出对应的IP地址（接入），除此之外DNS还能用于负载均衡和容灾调度。</p><h3 id="_1-域名解析" tabindex="-1">1. 域名解析 <a class="header-anchor" href="#_1-域名解析" aria-label="Permalink to &quot;1. 域名解析&quot;">​</a></h3><p>用户在浏览器输入要浏览的网址（t.qq.com）后，浏览器首先要通过DNS域名解析获取服务器IP。</p><p>域名解析其具体流程如下：</p><ol><li>浏览器首先想当地ISP的DNS（Local DNS）发起一个域名解析请求；</li><li>Local DNS首先向根域授权的DNS获取到(.com)授权的DNS svr地址</li><li>Local DNS 再向(.com)授权的DNS svr获取qq.com授权的DNS svr地址（这里即GSLB）</li><li>Local DNS 再向qq.com授权的DNS（GSLB）获取t.qq.com的服务器IP</li><li>Local DNS 最后将t.qq.com的服务器IP返回给client</li></ol><h3 id="_2-调度、负载均衡、容灾" tabindex="-1">2. 调度、负载均衡、容灾 <a class="header-anchor" href="#_2-调度、负载均衡、容灾" aria-label="Permalink to &quot;2. 调度、负载均衡、容灾&quot;">​</a></h3><p>DNS系统还可以通过解析域名，将不同的请求调度到不同的server IP地址去，从而实现精准的用户导向及智能流量调度。可以根据用户的地域将用户请求调度到就近的IDCserver，实现就近接入；通过将请求分摊到多台server实现负载均衡；通过修改DNS服务器配置去掉一台挂掉的server实现容灾。</p><p>然而，由于client和DNS系统的缓存策略（一个请求在解析一次域名后，在往后的一个域名解析TTL内，所有的请求都是发往同一台server），很容易导致server之间的负载不均衡，一台server挂掉后，也需要一段时间才能生效。这就是为什么除了DNS要有负载均衡能力外，还需要引入lvs or tgw的原因之一。</p><h3 id="_3-gslb" tabindex="-1">3. GSLB <a class="header-anchor" href="#_3-gslb" aria-label="Permalink to &quot;3. GSLB&quot;">​</a></h3><p>GSLB即我们公司的qq.com授权的DNS。其在提供域名解析最基本功能的同时，提供了：</p><ol><li>用户的就近接入。GSLB通过在域名解析时，针对不同地区、运营商的用户返回不同IDC的服务器IP，来实现用户就近接入的。比如将广东电信用户引导至深圳电信IDC服务器，北京网通用户引导北京网通IDC服务器；</li><li>实现全局的流量负载均衡及调度。将用户流量均分到各个服务器上，并且一旦出现服务器故障或者流量过高则将用户迁移。</li></ol><h2 id="三、lvs-tgw" tabindex="-1">三、LVS/TGW <a class="header-anchor" href="#三、lvs-tgw" aria-label="Permalink to &quot;三、LVS/TGW&quot;">​</a></h2><p>如果业务都是域名直接指向web server。在接入成千上百台web server的情况下，web server 挂是经常有的事。</p><p>从上节我们了解到，即使故障得到了及时的处理（修改GSLB配置），用户还是要等一段时间(一个域名解析TTL内)才能获得服务。而这就是引入lvs初衷。那么什么是lvs？什么是TGW？</p><h3 id="_1-lvs" tabindex="-1">1. LVS <a class="header-anchor" href="#_1-lvs" aria-label="Permalink to &quot;1. LVS&quot;">​</a></h3><p>LVS(Linux Virtual Server) 是构建于一组由真实服务器（real server，简称RS）构成的服务器集群上的高可靠，高可用性server。对端用户来说，其架构是透明的，就好像是和一台高性能的虚拟服务器相连。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2022/lvs.pic_hd.jpg" width="500"><ul><li>Load Balancer 负载均衡器：是整个集群最前端的服务，它将client的请求均衡的分发到真实的服务器RS上。因此端用户认为所有服务都是有单个IP提供。</li><li>Real Server 真实服务器：是提个服务的真实服务器，提供业务接入层的应用逻辑处理，与中间层（app）、数据层通讯。</li></ul><p>这里最重要的是如何实现负载均衡，一般可以从应用层(application-level)和IP层（ip-level）两个层次来实现。</p><p>比如我们常用的nginx反向代理就是应用层的负责均衡，他们通过将http 请求分派到web server服务器集群中不同的web server，并获取响应然后返回给客户端来进行实现。</p><p>由于在应用层处理并响应http请求的开销比较高，且请求包和响应包都要经过LB，所以应用层的LB能并发的server节点不大，一般在5个左右LB自身便成为新的瓶颈。</p><p>IP层的LB由于其开销小，能并发的server节点一般能达25甚至100，因此LVS采用的是这种方法。具体的，IP层LB又有三种方法：NAT，IP tunneling， direct routing，具体技术原理请参考：<a href="http://www.linuxvirtualserver.org/how.html" target="_blank" rel="noreferrer">http://www.linuxvirtualserver.org/how.html</a>.</p><h3 id="_2-tgw" tabindex="-1">2. TGW <a class="header-anchor" href="#_2-tgw" aria-label="Permalink to &quot;2. TGW&quot;">​</a></h3><p>公司的TGW借鉴了LVS技术，其具体功能有：负载均衡，多通接入，IP收敛等功能特点，其接入方式又分为七层接入和四层接入。TGW其架构如下图</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2022/tgw_01.pic.jpg" width="300"><h4 id="_1-负载均衡" tabindex="-1">(1) 负载均衡 <a class="header-anchor" href="#_1-负载均衡" aria-label="Permalink to &quot;(1) 负载均衡&quot;">​</a></h4><p>TGW负载均衡的基本原理如下。</p><p>在用户新建连接时，TGW根据server的权重选择一个server，并建立用户端到server的会话信息；对于已经建立连接的用户数据，根据会话信息，请求会转发到对应的server上，这样就达到了负载均衡的目的。TGW还可以根据用户IP来保存会话信息，用于满足某些较复杂的应用，例如使用http cookie的业务。</p><p>由于TGW保存了连接的会话信息，server可以很方便的进行扩容，已经存在的用户连接不会受到影响。</p><p>TGW周期性的探测server的状态，在1分钟内自动把故障server从可服务列表中踢除；当TGW检测到server恢复正常后，自动把它加回可服务列表中。</p><h4 id="_2-多通接入" tabindex="-1">(2) 多通接入 <a class="header-anchor" href="#_2-多通接入" aria-label="Permalink to &quot;(2) 多通接入&quot;">​</a></h4><p>中国的网络复杂，跨运营商访问延时非常大，互联而不互通。业务为了同时保证电信，联通用户的访问质量，传统的做法是分别部署电信，联通服务器，分而治之。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2022/tgw_02.pic.jpg" width="300"><p>如上图所示，可以通过TGW多通接入来解决跨运营商访问延时大的问题。多通接入基本原理是：TGW把外网不同运营商的请求，通过内网隧道转发给server，server返回数据时，再把数据通过内网隧道返回给TGW，再由TGW发送给不同的运营商。与传统的反向代理服务器最大的不同是，由于TGW使用了隧道技术，服务器看到的是用户的真实IP地址，而不是TGW的地址。</p><p>TGW多通功能实现了不同网络用户之间的互联互通，帮助业务提高了产品竞争力；业务只需要部署一套环境，就覆盖了所有运营商，这也节省了资源，降低了维护成本。</p><h4 id="_3-ip收敛" tabindex="-1">(3) IP收敛 <a class="header-anchor" href="#_3-ip收敛" aria-label="Permalink to &quot;(3) IP收敛&quot;">​</a></h4><p>业务部门只需要申请内网服务器，就可以接入TGW，对外提供服务。多个业务可以同时接入一个VIP(注:virtual ip，即业务提供服务的外网IP地址，由TGW分配)，TGW根据报文信息来识别业务，把属于各自业务的请求转发给各自业务的server上。不同业务的访问路径是完全独立的，业务不会相互影响。通过这种方式，TGW可以为公司和业务部门节省大量公网IP地址。</p><p>IP收敛的方式可以分为七层收敛和四层收敛：七层收敛根据域名识别业务，主要应用于web类业务，例如http服务器，网页游戏等；四层收敛根据同一VIP不同的端口识别业务，主要应用于非web类业务，例如C/S游戏，IM等业务。</p><h4 id="_4-接入方式" tabindex="-1">(4) 接入方式 <a class="header-anchor" href="#_4-接入方式" aria-label="Permalink to &quot;(4) 接入方式&quot;">​</a></h4><p>TGW目前提供两种接入方式：四层接入和七层接入。</p><p>四层接入比较适合那些使用私有协议的业务接入TGW，因为TGW是根据网络层和传输层（VIP+VPORT+PROTOCOL）来区分不同的业务，因此这里称之为四层接入。</p><p>七层接入目前只支持http协议，适合于那些采用http协议的业务的接入TGW。除此之外， TGW还支持flash业务和windows业务的接入。</p><h2 id="四、stgw" tabindex="-1">四、STGW <a class="header-anchor" href="#四、stgw" aria-label="Permalink to &quot;四、STGW&quot;">​</a></h2><p>stgw全称secure tencent gateway，腾讯安全网关，由TEG云架构平台部应用网关团队打造和维护。和TGW四层接入不同的是，STGW是一个七层应用层流量接入平台，平台的主要目标是稳定、高效、安全地接入公司各大业务的应用流量。</p><p>STGW承担了公司内大部分平台和业务的流量接入，同时也作为腾讯云CLB负载均衡器的底层引擎对外提供服务。</p><h3 id="_1-接入架构及流程" tabindex="-1">1. 接入架构及流程 <a class="header-anchor" href="#_1-接入架构及流程" aria-label="Permalink to &quot;1. 接入架构及流程&quot;">​</a></h3><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2022/stgw.pic.jpg" width="500"><p>以一个HTTPS请求为例，简单描述下接入转发流程：</p><ol><li>用户发起HTTPS请求，首先到达TGW。</li><li>TGW将该请求转发给STGW。由于TGW只是四层的转发，所以无法识别HTTPS请求内容。</li><li>STGW会对HTTPS请求进行卸载，也就是完成SSL握手及应用层内容的解密，将HTTPS转换成HTTP协议，再按照分流配置转发给业务侧RS。</li><li>业务侧收到HTTP请求后，生产响应内容并回复给STGW。</li><li>STGW将业务的响应内容进行加密，回复给TGW。</li><li>TGW再返回给用户</li></ol><h3 id="_2-主要功能" tabindex="-1">2. 主要功能 <a class="header-anchor" href="#_2-主要功能" aria-label="Permalink to &quot;2. 主要功能&quot;">​</a></h3><ol><li>负载均衡</li></ol><ul><li>STGW支持业界常用的WRR(加权轮询），IP哈希，Cookie会话保持，最小连接数等常用算法。</li></ul><ol start="2"><li>流量转发</li></ol><ul><li>STGW能够根据HTTP协议的任意字段实现请求的转发，常见的包括： <ul><li>URL转发。即根据不同的URL指定不同的后端业务集群。</li><li>Header转发。 即根据HTTP协议不同的Header字段指定不同的业务业务集群。比如Host， Cookie等。</li></ul></li></ul><ol start="3"><li>SSL加速</li></ol><ul><li>STGW针对HTTPS协议进行了深度优化，通过对Openssl协议栈及Nginx事件框架的改造，STGW的HTTPS卸载能力相比常规的CPU方案提升了3.5倍。</li></ul><ol start="4"><li>多协议接入及适配</li></ol><ul><li>HTTP1.0/1.1</li><li>HTTPS</li><li>SPDY3.1</li><li>HTTP2</li><li>Websocket</li><li>Quic</li><li>支持多协议的好处是能够极大减轻业务适配不同协议的负担，提升协议对业务的透明度。不管客户端使用何种协议接入，STGW都能够将该协议卸载成HTTP1.1/1.0协议转发给业务端。同时也能将业务端返回的HTTP1.1/1.0协议内容还原成客户端发起的协议返回给客户端。</li></ul><ol start="5"><li>安全防攻击。主要包括如下功能：</li></ol><ul><li>IP黑名单，白名单。</li><li>限制指定业务的速率。</li><li>限制高频率IP攻击。</li><li>防CC攻击。</li><li>WAF，防御0-day漏洞，SQL注入，XSS漏洞等。</li></ul><ol start="6"><li>流量质量分析</li></ol><ul><li>STGW能够展示业务返回的4XX、5XX状态码，不同业务的响应时间及丢弃的连接数。同时根据业务的配置设置监控阈值，发送报警信息。</li></ul><p>个人理解，GSLB的调度是DNS层的，TGW的调度是IP层的，最终解决了单个服务器性能、稳定性不足的问题。</p>',69)]))}const d=e(t,[["render",o]]);export{S as __pageData,d as default};
