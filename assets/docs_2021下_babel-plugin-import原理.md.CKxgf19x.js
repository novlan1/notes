import{_ as o,c as a,o as t,ag as l}from"./chunks/framework.6d7lLjym.js";const s=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2021下/babel-plugin-import原理.md","filePath":"docs/2021下/babel-plugin-import原理.md","lastUpdated":1746461257000}'),i={name:"docs/2021下/babel-plugin-import原理.md"};function n(r,e,p,d,c,b){return t(),a("div",null,e[0]||(e[0]=[l('<h2 id="一、babel-plugin-import-原理" tabindex="-1">一、babel-plugin-import 原理 <a class="header-anchor" href="#一、babel-plugin-import-原理" aria-label="Permalink to &quot;一、babel-plugin-import 原理&quot;">​</a></h2><p>主要有3步：</p><ol><li>在<code>importDeclaration</code>节点处，收集依赖，就是获取<code>import { Button } from &#39;antd&#39;</code>中的<code>Button</code></li><li>在<code>CallExpression</code>等节点处，判断该组件是否使用</li><li>对于使用的UI组件，通过<code>addSideEffect/addNamed/addDefault</code>等方式增加额外的<code>css</code>导入语句。</li></ol><h2 id="二、babel-plugin-component" tabindex="-1">二、babel-plugin-component <a class="header-anchor" href="#二、babel-plugin-component" aria-label="Permalink to &quot;二、babel-plugin-component&quot;">​</a></h2><p><code>babel-plugin-component</code>是<code>fork</code>的<code>babel-plugin-import</code>项目，二者原理、使用方式基本相同。</p><h2 id="三、相关资料" tabindex="-1">三、相关资料 <a class="header-anchor" href="#三、相关资料" aria-label="Permalink to &quot;三、相关资料&quot;">​</a></h2><ol><li><a href="https://juejin.cn/post/6905708824703795214" target="_blank" rel="noreferrer">简单实现 babel-plugin-import 插件</a></li><li><a href="https://segmentfault.com/q/1010000022005673" target="_blank" rel="noreferrer">babel-plugin-component 和 babel-plugin-import区别</a></li></ol>',7)]))}const u=o(i,[["render",n]]);export{s as __pageData,u as default};
