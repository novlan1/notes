import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.6d7lLjym.js";const r=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2021下/详解Unicode、UTF-8、UTF-16.md","filePath":"docs/2021下/详解Unicode、UTF-8、UTF-16.md","lastUpdated":1748491479000}'),p={name:"docs/2021下/详解Unicode、UTF-8、UTF-16.md"};function l(h,s,t,k,d,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h2 id="一、编码与解码" tabindex="-1">一、编码与解码 <a class="header-anchor" href="#一、编码与解码" aria-label="Permalink to &quot;一、编码与解码&quot;">​</a></h2><p>计算机程序信息都是以二进制形式存储，也就是说我们在代码中定义的一个<code>char</code>字符或者一个<code>int</code>整数都会被转换成二进制码储存起来，这个过程可以被称为编码，而将计算机底层的二进制码转换成屏幕上有意义的字符（如<code>hello world</code>），这个过程就称为解码。</p><p>编解码会涉及到字符集（<code>Character Set</code>） 这个概念，他就相当于能够将一个字符与一个整数一一对应的一个映射表，常见的字符集有<code>ASCII</code>、<code>Unicode</code>等。</p><h2 id="二、ascii-码" tabindex="-1">二、ASCII 码 <a class="header-anchor" href="#二、ascii-码" aria-label="Permalink to &quot;二、ASCII 码&quot;">​</a></h2><p>ASCII (<code>American Standard Code for Information Interchange</code>)，美国信息交换标准代码是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。</p><p>ASCII 码一共规定了<code>128</code>个字符的编码，比如空格<code>SPACE</code>是<code>32</code>（二进制<code>00100000</code>），大写的字母<code>A</code>是<code>65</code>（二进制<code>01000001</code>）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的一位统一规定为0。</p><img src="http://doc.uwayfly.com/ASCII.png" width="900"><h2 id="三、unicode" tabindex="-1">三、Unicode <a class="header-anchor" href="#三、unicode" aria-label="Permalink to &quot;三、Unicode&quot;">​</a></h2><h3 id="_1-概念" tabindex="-1">1. 概念 <a class="header-anchor" href="#_1-概念" aria-label="Permalink to &quot;1. 概念&quot;">​</a></h3><p>Unicode，也叫统一码、万国码、单一码，是计算机科学领域里的一项业界标准，包括字符集、编码方案等。它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p><p>Unicode 兼容 ASCII，即<code>0～127</code>意义依然不变。</p><p>Unicode 用数字<code>0-0x10FFFF</code>来映射世界上的字符，最多可以容纳<code>1114112</code>个字符，或者说有<code>1114112</code>个码位。码位就是可以分配给字符的数字。<code>UTF-8</code>、<code>UTF-16</code>、<code>UTF-32</code>都是将数字转换到程序数据的编码方案。</p><h3 id="_2-码点" tabindex="-1">2. 码点 <a class="header-anchor" href="#_2-码点" aria-label="Permalink to &quot;2. 码点&quot;">​</a></h3><p>它从0开始，为每个符号指定一个编号，这叫做&quot;码点&quot;（<code>code point</code>）。比如，码点0的符号就是<code>null</code>（表示所有二进制位都是0）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>U+0000 = null</span></span>
<span class="line"><span></span></span>
<span class="line"><span>U+597D = 好</span></span></code></pre></div><p>上式中，<code>U+</code>表示紧跟在后面的十六进制数是Unicode的码点。</p><p>Unicode分区定义这些符号。每个区可以存放<code>65536</code>个（<code>2^16</code>）字符，称为一个平面（<code>plane</code>）。目前，一共有<code>17</code>（<code>2^5</code>）个平面，整个Unicode字符集的大小现在是<code>2^21</code>，但是现在用到的是<code>65536*17=1114112</code>个码位。</p><p>最前面的<code>65536</code>个字符位，称为基本多语言平面（<code>Basic Multilingual Plane</code>，即BMP），它的码点范围是从0一直到<code>2^16-1</code>，写成16进制就是从<code>U+0000</code>到<code>U+FFFF</code>。所有最常见的字符都放在这个平面，这是Unicode最先定义和公布的一个平面。</p><p>剩下的字符都放在辅助平面（<code>Supplementary Planes</code>，即SP），码点范围从<code>U+010000</code>一直到<code>U+10FFFF</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>0000-FFFF：基本平面</span></span>
<span class="line"><span></span></span>
<span class="line"><span>10000–1FFFF：第1辅助平面</span></span>
<span class="line"><span>20000–2FFFF：第2辅助平面</span></span>
<span class="line"><span>30000–3FFFF：第3辅助平面</span></span>
<span class="line"><span>40000–DFFFF：第4-13辅助平面</span></span>
<span class="line"><span>E0000–EFFFF：第14辅助平面</span></span>
<span class="line"><span>F0000–FFFFF：第15辅助平面</span></span>
<span class="line"><span>100000–10FFFF：第16辅助平面</span></span></code></pre></div><h3 id="_3-iconfont" tabindex="-1">3. iconfont <a class="header-anchor" href="#_3-iconfont" aria-label="Permalink to &quot;3. iconfont&quot;">​</a></h3><p>大部分编码都有其固定作用，比如『中日韩统一表意文字』的码位范围就在：<code>4E00 - 9FFF</code>，共包含 20992 个字符，可以显示大多数中文文字。</p><p>但 unicode 留出了一个『私用区』可以用来进行字体扩展，大部分 iconfont 也都默认使用了这一区域。这一区域的码值范围是：<code>E000 - F8FF</code>，所以你会看到 font awesome 的编码从 F000 开始，iconmoon 从 E900 开始，阿里 从 E000 开始。</p><p>如果把图标编码设置为 5 位的或者不在私用区范围以内的，就会侵占其他的一些码段，使得使用该字体时无法正确显示其他的字体。比如你占用了 77E5 这个码，那么用了这个字体之后你就显示不出知乎的『知』字了。</p><h2 id="四、编码方式" tabindex="-1">四、编码方式 <a class="header-anchor" href="#四、编码方式" aria-label="Permalink to &quot;四、编码方式&quot;">​</a></h2><p>Unicode只是指定了字符集，也就是每个字符的码点，到底用什么样的字节序表示这个码点，就涉及到编码方法。</p><h3 id="_1-utf-32" tabindex="-1">1. UTF-32 <a class="header-anchor" href="#_1-utf-32" aria-label="Permalink to &quot;1. UTF-32&quot;">​</a></h3><p>每个码点使用四个字节表示，字节内容一一对应码点。这种编码方法就叫做UTF-32（<code>Universal Character Set/Unicode Transformation Format</code>）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>U+0000 = 0x0000 0000 = 00000000 00000000 00000000 00000000</span></span>
<span class="line"><span></span></span>
<span class="line"><span>U+597D = 0x0000 597D = 00000000 00000000 01011001 01111101</span></span></code></pre></div><p>UTF-32的优点在于，转换规则简单直观，查找效率高。缺点在于浪费空间，同样内容的英语文本，它会比ASCII编码大四倍。</p><h3 id="_2-utf-8" tabindex="-1">2. UTF-8 <a class="header-anchor" href="#_2-utf-8" aria-label="Permalink to &quot;2. UTF-8&quot;">​</a></h3><p>UTF-8是一种变长的编码方法，字符长度从1个字节到4个字节不等。越是常用的字符，字节越短，最前面的128个字符，只使用1个字节表示，与ASCII码完全相同。</p><p>UTF-8 的编码规则很简单，只有二条：</p><ul><li>对于单字节的符号，字节的第一位设为0，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。</li><li>对于n字节的符号（<code>n &gt; 1</code>），第一个字节的前n位都设为1，第<code>n + 1</code>位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Unicode符号范围       | 码点范围             | UTF-8编码方式</span></span>
<span class="line"><span>（十六进制）          | （十进制）           ｜（二进制）</span></span>
<span class="line"><span>--------------------+-----------------------------------------------</span></span>
<span class="line"><span>0000 0000-0000 007F | 0     -  127       ｜ 0xxxxxxx</span></span>
<span class="line"><span>0000 0080-0000 07FF | 128   -  2047      ｜ 110xxxxx 10xxxxxx</span></span>
<span class="line"><span>0000 0800-0000 FFFF | 2048  -  65535     ｜ 1110xxxx 10xxxxxx 10xxxxxx</span></span>
<span class="line"><span>0001 0000-0010 FFFF | 65536 -  1114111   ｜ 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span></span></code></pre></div><p>上面的字母x表示可用编码的位。</p><p>根据上表，解读 UTF-8 编码非常简单。如果一个字节的第一位是0，则这个字节单独就是一个字符；如果第一位是1，则连续有多少个1，就表示当前字符占用多少个字节。</p><p>下面，以汉字<code>严</code>为例，演示如何实现 UTF-8 编码。</p><p><code>严</code>的 Unicode 是<code>4E25</code>（<code>1001110 00100101</code>），根据上表，可以发现<code>4E25</code>处在第三行的范围内（<code>0000 0800 - 0000 FFFF</code>），因此<code>严</code>的 UTF-8 编码需要三个字节，即格式是<code>1110xxxx 10xxxxxx 10xxxxxx</code>。然后，从<code>严</code>的最后一个二进制位开始，依次从后向前填入格式中的<code>x</code>，多出的位补0。这样就得到了，<code>严</code>的 UTF-8 编码是<code>11100100 10111000 10100101</code>，转换成十六进制就是<code>E4B8A5</code>。</p><h3 id="_3-utf-16" tabindex="-1">3. UTF-16 <a class="header-anchor" href="#_3-utf-16" aria-label="Permalink to &quot;3. UTF-16&quot;">​</a></h3><p>UTF-16是一种变长的编码方法，长度为2个字节或4个字节。</p><p>基本平面的字符占用2个字节，辅助平面的字符占用4个字节。也就是说，UTF-16的编码长度要么是2个字节（<code>U+0000</code>到<code>U+FFFF</code>），要么是4个字节（<code>U+010000</code>到<code>U+10FFFF</code>）。</p><p>在基本平面内，从<code>U+D800</code>到<code>U+DFFF</code>是一个空段，即这些码点不对应任何字符。因此，这个空段可以用来映射辅助平面的字符。</p><p>具体来说，辅助平面的字符位共有<code>2^20</code>个，也就是说，对应这些字符至少需要20个二进制位。UTF-16将这20位拆成两半，前10位映射在<code>U+D800</code>到<code>U+DBFF</code>（空间大小<code>2^10</code>），称为高位（<code>H</code>），后10位映射在<code>U+DC00</code>到<code>U+DFFF</code>（空间大小2^10），称为低位（<code>L</code>）。这意味着，一个辅助平面的字符，被拆成两个基本平面的字符表示。</p><p>辅助平面字符的转码公式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>H = Math.floor((c-0x10000) / 0x400)+0xD800</span></span>
<span class="line"><span></span></span>
<span class="line"><span>L = (c - 0x10000) % 0x400 + 0xDC00</span></span></code></pre></div><p>以字符𝌆为例，它是一个辅助平面字符，码点为<code>U+1D306</code>，将其转为UTF-16的计算过程如下。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>H = Math.floor((0x1D306-0x10000)/0x400)+0xD800 = 0xD834</span></span>
<span class="line"><span></span></span>
<span class="line"><span>L = (0x1D306-0x10000) % 0x400+0xDC00 = 0xDF06</span></span></code></pre></div><p>所以，字符𝌆的UTF-16编码就是<code>0xD834 DF06</code>，长度为四个字节。</p><h2 id="五、js编码" tabindex="-1">五、JS编码 <a class="header-anchor" href="#五、js编码" aria-label="Permalink to &quot;五、JS编码&quot;">​</a></h2><h3 id="_1-usc-2" tabindex="-1">1. USC-2 <a class="header-anchor" href="#_1-usc-2" aria-label="Permalink to &quot;1. USC-2&quot;">​</a></h3><p>JS使用的编码方式是USC-2，就是不完备的UTF-16，使用2个字节表示所有字符，所有字符都是2个字节，如果是4个字节的字符，会当作两个双字节的字符处理。</p><p>以字符𝌆为例，它的UTF-16编码是4个字节的<code>0xD834 DF06</code>。问题来了，4个字节的编码不属于UCS-2，JavaScript不认识，只会把它看作单独的两个字符<code>U+D834</code>和<code>U+DF06</code>。前面说过，这两个码点是空的，所以JavaScript会认为是两个空字符组成的字符串。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;𝌆&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;𝌆&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u1D30</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">6&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;𝌆&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// �</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;𝌆&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charCodeAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 55348(0xD834)</span></span></code></pre></div><p>上面代码表示，JavaScript认为字符的长度是2，取到的第一个字符是空字符，取到的第一个字符的码点是<code>0xDB34</code>。这些结果都不正确！</p><p><code>String.length</code>方法计算的长度单位是“代码单元”，即<code>code unit</code>，有的地方称为“码元”，就是2个字节。</p><h3 id="_2-es6" tabindex="-1">2. ES6 <a class="header-anchor" href="#_2-es6" aria-label="Permalink to &quot;2. ES6&quot;">​</a></h3><p>ES6增强了对Unicode的支持：</p><ul><li><code>for of</code>遍历会以码点为单位</li><li><code>\\u{}</code>的方式表示4个字节的码点，比如<code>\\u{1D306}</code></li><li><code>fromCodePoint/codePointAt</code>等API</li><li><code>u</code>修饰符正则支持，比如<code>/^.$/u.test(&#39;𝌆&#39;)</code></li><li><code>normalize</code>方法</li></ul><h3 id="_3-相关api" tabindex="-1">3. 相关API <a class="header-anchor" href="#_3-相关api" aria-label="Permalink to &quot;3. 相关API&quot;">​</a></h3><p><code>😂</code>，码点是<code>U+1F602</code>，10进制是<code>128514</code>。</p><h4 id="_1-string-prototype-codepointat" tabindex="-1">（1）String.prototype.codePointAt() <a class="header-anchor" href="#_1-string-prototype-codepointat" aria-label="Permalink to &quot;（1）String.prototype.codePointAt()&quot;">​</a></h4><p>返回一个 Unicode 编码点值的非负整数。</p><p>比如</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;😂&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">codePointAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 128514</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;😂&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">codePointAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 128514</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;😂&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">codePointAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 56834</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;😂&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">codePointAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;😂a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">codePointAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 97</span></span></code></pre></div><h4 id="_2-string-prototype-charcodeat" tabindex="-1">（2）String.prototype.charCodeAt() <a class="header-anchor" href="#_2-string-prototype-charcodeat" aria-label="Permalink to &quot;（2）String.prototype.charCodeAt()&quot;">​</a></h4><p>返回 0 到 65535 之间的整数，表示给定索引处的 UTF-16 代码单元</p><p>如果 Unicode 码点不能用一个 UTF-16 编码单元表示（因为它的值大于<code>0xFFFF</code>），则所返回的编码单元会是这个码点代理对的第一个编码单元) 。如果你想要整个码点的值，使用 <code>codePointAt()</code>。</p><p>比如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;😂a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charCodeAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 55357</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;😂a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charCodeAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 55357</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;😂a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charCodeAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 56834</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;😂a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charCodeAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 97</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;😂a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charCodeAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NaN</span></span></code></pre></div><h4 id="_3-string-prototype-charat" tabindex="-1">（3）String.prototype.charAt() <a class="header-anchor" href="#_3-string-prototype-charat" aria-label="Permalink to &quot;（3）String.prototype.charAt()&quot;">​</a></h4><p>返回一个新字符串，该字符串由位于字符串中指定偏移处的单个<code>UTF-16</code>代码单元组成。</p><p>参数为<code>index</code>，表示字符串的下标索引，默认为0。</p><p>比如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;😂a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// �</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;😂a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// �</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;😂a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// �</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;😂a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a</span></span></code></pre></div><p>可以看到由于<code>😂</code>的码点大于<code>65536</code>，当获取第一个代码单元，并将它转为字符时失败，用<code>�</code>表示。</p><p><code>�</code>这个符号的码点是<code>U+FFFD</code>（<code>65533</code>），也就是在基本面的最后上了车。</p><h4 id="_4-string-fromcodepoint" tabindex="-1">（4）String.fromCodePoint() <a class="header-anchor" href="#_4-string-fromcodepoint" aria-label="Permalink to &quot;（4）String.fromCodePoint()&quot;">​</a></h4><p>使用指定的码点序列创建的字符串。</p><p>使用格式为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromCodePoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromCodePoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num1, num2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromCodePoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num1, num2, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, numN)</span></span></code></pre></div><p>比如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromCodePoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">65536</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">65535</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">65534</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">65533</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128514</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 𐀀￿￾�😂</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromCodePoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">26446</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23567</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40857</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 李小龙</span></span></code></pre></div><h4 id="_5-string-fromcharcode" tabindex="-1">（5）String.fromCharCode() <a class="header-anchor" href="#_5-string-fromcharcode" aria-label="Permalink to &quot;（5）String.fromCharCode()&quot;">​</a></h4><p>返回从指定的 UTF-16 代码单元序列创建的字符串。</p><p>使用格式为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromCharCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromCharCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num1, num2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromCharCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num1, num2, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, numN)</span></span></code></pre></div><p>注意<code>num</code>范围在0和<code>65535</code>(<code>0xFFFF</code>)之间 。大于的数字<code>0xFFFF</code>被截断。不执行有效性检查。</p><p>比如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromCharCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">65</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">67</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns &quot;ABC&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromCharCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x2014</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));       </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns &quot;—&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromCharCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x12014</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));      </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// also returns &quot;—&quot;; the digit 1 is truncated and ignored</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromCharCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8212</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));         </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// also returns &quot;—&quot;; 8212 is the decimal form of 0x2014</span></span></code></pre></div><h3 id="_4-js-html-css的unicode编码" tabindex="-1">4. JS/HTML/CSS的Unicode编码 <a class="header-anchor" href="#_4-js-html-css的unicode编码" aria-label="Permalink to &quot;4. JS/HTML/CSS的Unicode编码&quot;">​</a></h3><ul><li>JavaScript: <code>&#39;\\u5b89&#39;</code></li><li>HTML:<code> &amp;#x5b89;</code>。HTML还可以转换为10进制：<code>&amp;#23433;</code></li><li>CSS: <code>&#39;\\5b89&#39;</code></li></ul><h2 id="六、相关资料" tabindex="-1">六、相关资料 <a class="header-anchor" href="#六、相关资料" aria-label="Permalink to &quot;六、相关资料&quot;">​</a></h2><ol><li><a href="https://www.fileformat.info/info/unicode/char/search.htm?q=%E4%BD%A0&amp;preview=entity" target="_blank" rel="noreferrer">https://fileformat.info</a></li><li><a href="https://unicode-table.com/en/blocks/" target="_blank" rel="noreferrer">https://unicode-table.com</a></li><li><a href="https://home.unicode.org/" target="_blank" rel="noreferrer">https://home.unicode.org</a></li><li><a href="https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noreferrer">字符编码笔记：ASCII，Unicode 和 UTF-8</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/12/unicode.html" target="_blank" rel="noreferrer">Unicode与JavaScript详解</a></li></ol>`,94)]))}const E=i(p,[["render",l]]);export{r as __pageData,E as default};
