import{_ as t,c as a,o,ag as n}from"./chunks/framework.6d7lLjym.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2024上/技术领导力-笔记.md","filePath":"docs/2024上/技术领导力-笔记.md","lastUpdated":1746498382000}'),s={name:"docs/2024上/技术领导力-笔记.md"};function e(p,r,g,l,i,_){return o(),a("div",null,r[0]||(r[0]=[n('<h3 id="_1-如何打造一个-无需激励-自运转的技术团队" tabindex="-1">1. 如何打造一个“无需激励”自运转的技术团队？ <a class="header-anchor" href="#_1-如何打造一个-无需激励-自运转的技术团队" aria-label="Permalink to &quot;1. 如何打造一个“无需激励”自运转的技术团队？&quot;">​</a></h3><p><strong>我对自激励和无激励的定义是不需要管理人员进行额外的激励动作，团队和团队的人员就可以达到一个可接受的，甚至是理想的工作效果</strong>。听到这个你是不是在想：怎么可能？没有实质性的奖励别人怎么愿意去干呢？</p><p>他一定会愿意的，因为这样的团队足够强大，可以赢得很多胜利，<strong>打胜仗就是最好的激励</strong>。很多人未来的职业发展都是靠赢得的事情增加价值的，大家就是为了赢才来才聚到一起的。所以即便是没有各种各样的项目奖金，他也愿意为自己赢得一个未来。</p><p>我们需要建立团队内部的文化氛围，把这个团队保护起来，给高效的执行落地提供保障。</p><p>那么，我们明确下来且日常持续传递的团队文化是什么呢？很简单，4 个词**：简单、透明、公平、创新**。为什么选这 4 点呢？我来一一说明。</p><h4 id="_1-1-简单" tabindex="-1">1.1. 简单 <a class="header-anchor" href="#_1-1-简单" aria-label="Permalink to &quot;1.1. 简单&quot;">​</a></h4><p>先说简单，这个世界很复杂，人和人相处也很复杂，但是工作是成年人的游戏，<strong>坐在一起工作就不要拐弯抹角，要把所有的问题都摆在台面上说，用简单的方法解决复杂的问题，让自己的工作变得简单才会有更多的精力去做其他的事情，才更有效率</strong>。</p><p>比如有人想要升职加薪，那就直接来和我谈，如果确实给团队做出了很多贡献，那他的诉求就达成了。如果没有达到要求呢，这时候我们作为管理者，就应该明确地告诉员工怎么成长能达到团队或者公司的预期。要知道<strong>直线是最短的距离，简单直接的沟通更有效</strong>。但<strong>前提是团队要有这种直言的文化，这是管理者应该去营造的氛围</strong>。</p><h4 id="_1-2-透明" tabindex="-1">1.2. 透明 <a class="header-anchor" href="#_1-2-透明" aria-label="Permalink to &quot;1.2. 透明&quot;">​</a></h4><p>透明的要求就是<strong>一切以事实和数据说话</strong>，这样才能摆到台面上去谈这些事情，<strong>不是靠你的臆测。工作情况要可查，负面的情况不要隐瞒，经验教训分享要留档</strong>。我们要给团队留下一些资产，所有故障、所有问题我们都不能隐瞒，都要仔细分析，可以直接批评，但对事不对人，不要相互猜测，怎么想的就怎么说。</p><p>透明是公平的先头兵，透明做得好，公平也就容易多了。</p><h4 id="_1-3-公平" tabindex="-1">1.3. 公平 <a class="header-anchor" href="#_1-3-公平" aria-label="Permalink to &quot;1.3. 公平&quot;">​</a></h4><p><strong>公平就是严格要求，一视同仁，个人的付出和收益要匹配</strong>，这是我跟团队所有人传达的理念，我一定会保证你付出多少就收获多少，做到公平公正，奖惩严明。</p><p>想要保证公平，管理者需要多下功夫，因为一旦考虑不周就很容易丧失公平。比如很多创业公司都喜欢按照项目去派发奖励，这个<strong>项目奖金是一个毒药，会对公平的原则造成毁灭性的打击</strong>。你可以想一想为什么？</p><p>原因很简单，<strong>项目的级别、奖金是不一样的，参与程度和分配标准也是不一样的，而决定权全都掌握在 Leader 手中，虽然他有合理的安排理由，但是却很难做到公平</strong>。所以为了保证公平，<strong>大的经济性激励，只应该跟绩效挂钩</strong>。</p><h4 id="_1-4-创新" tabindex="-1">1.4. 创新 <a class="header-anchor" href="#_1-4-创新" aria-label="Permalink to &quot;1.4. 创新&quot;">​</a></h4><p>前面说的简单、透明、公平可以作为团队日常的规约，但一个团队想要持续散发活力，还离不开创新。<strong>创新说白了就是敢想敢干</strong>，想要在团队中形成这种文化，就需要<strong>管理者给予员工足够的活动空间，鼓励员工承担风险，敢于试错。在员工提出新想法、新方案的时候给予支持，在实施的过程中多关注，以此来控制风险等级和错误成本</strong>。</p><p>上面这些规则定下来之后，能解决团队中现有的一些问题，但目前团队仍处在上传下达的状态，并不能运转。那如何让这个机制运转起来呢？很简单，就是要先解决人的问题，谷歌《重新定义团队》这本书里也说了，<strong>先找到合适的人，合适的人上车，不合适的人下车</strong>。</p><p>对我来说，首先要保证这个 Leader 是合适的 Leader ，我们的价值观要一致，认知要同步，执行力要强。其次，<strong>他要有独立思考的能力，这非常重要，因为之后的持续运作，非常考验团队 Leader 独立分析和思考的能力</strong>。如果说有什么思维模式是必须要学会的，那就是批判性思维，基于数据和事实的分析、总结的能力，团队 Leader 如果不具有这种能力的话，就没有办法带领团队持续向好。</p><p>除此之外，还要有一个<strong>沟通机制</strong>，一方面是解决跟员工的沟通问题，便于收集反馈；另一方面，是要把我们的想法一五一十地传达给每一个员工，让他理解我们的目标，理解我们团队的定位和我们要做的事情。这种定期的沟通机制，其实是团队自上而下的灌宣。</p><p>在打造自运转团队的过程中，我还常常思考让执行的效率变得更高的方法。因为大部分的员工都是执行者，他思考的声音是没有办法传达上来的，怎么能听到这些声音呢？这里你可以记住几个关键词：<strong>核心员工、梯队建设、重点项目</strong>。意思就是拉一些重点项目去考察一些人，然后我亲自跟进，收集员工反馈和需要改进的问题，推动解决，并且要及时和员工汇报进展，形成闭环。这样，解决了一线执行者最急迫的问题，执行的效率也就自然而然地提升了。</p><p>另外，<strong>提高执行效率还有一个很重要的动作，就是要狠心淘汰不符合要求的人，这样才是尊重真正干活的人</strong>，这个道理大家都懂，只是不愿意这么做，但你不这么做团队可能就好不了。</p><h3 id="_2-能力构建-如何从做技术转变到做技术决策" tabindex="-1">2. 能力构建：如何从做技术转变到做技术决策？ <a class="header-anchor" href="#_2-能力构建-如何从做技术转变到做技术决策" aria-label="Permalink to &quot;2. 能力构建：如何从做技术转变到做技术决策？&quot;">​</a></h3><p><strong>技术人转型为技术管理者时，最容易犯的错误就是无限制地追求技术发展的前瞻</strong>。如果不审时度势只追新求异，很可能会导致公司业务无法达到预期目标，严重的话还会因为技术镀金导致公司整体失败。</p><p><strong>和技术人追求的不同，优秀的技术管理者需要考虑公司现有人员、团队磨合情况、公司投入情况几个维度，选择当前最适合的技术，而不是最新的技术。</strong></p><h4 id="_2-1-技术决策的三个门槛" tabindex="-1">2.1. 技术决策的三个门槛 <a class="header-anchor" href="#_2-1-技术决策的三个门槛" aria-label="Permalink to &quot;2.1. 技术决策的三个门槛&quot;">​</a></h4><p>总的来说，想要做好<strong>技术决策</strong>的你要迈过 3 个门槛：<strong>“无知而无畏”、“有知而有畏”、“有知而无畏”</strong>。</p><ol><li><p>“无知而无畏”就和大多数技术人员一样，追新求异，什么潮流就用什么，不对结果负责，最终升级失败给公司带来巨大损失的时候就傻眼了。</p></li><li><p>“有知而有畏”，<strong>发现原来做技术决策，用新技术风险这么大，心存敬畏，很多地方不敢放开手脚</strong>，这种情况比前面因为无知给公司造成巨大的损失要好很多，至少不会影响公司当前业务，但长期来讲不利于公司发展。</p></li><li><p>最后，<strong>对于业务影响、技术影响、团队影响稔熟于心，对于风险做到心中有数，还敢于拍板接受新的技术架构，做出卓越的技术决策</strong>，就达到了优秀的技术管理者“有知而无畏”的境界。</p></li></ol>',28)]))}const c=t(s,[["render",e]]);export{h as __pageData,c as default};
