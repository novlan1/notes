import{_ as i,c as a,o as n,ag as p}from"./chunks/framework.6d7lLjym.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2024上/代码之丑-笔记.md","filePath":"docs/2024上/代码之丑-笔记.md","lastUpdated":1755499941000}'),t={name:"docs/2024上/代码之丑-笔记.md"};function l(h,s,e,k,r,E){return n(),a("div",null,s[0]||(s[0]=[p(`<h2 id="_1-开始" tabindex="-1">1. 开始 <a class="header-anchor" href="#_1-开始" aria-label="Permalink to &quot;1. 开始&quot;">​</a></h2><p>本文为极客时间《代码之丑》的学习笔记，原作十分精彩，推荐阅读原作。</p><p>我们经常听到xxx之美，比如《代码之美》、《数据结构之美》、《设计模式之美》，但理解什么是丑似乎更重要，知道什么是错的，才能做到正确。正如法律和道德，规定的是不允许做的行为，对应的正是“代码之丑”。</p><h2 id="_2-开篇词" tabindex="-1">2. 开篇词 <a class="header-anchor" href="#_2-开篇词" aria-label="Permalink to &quot;2. 开篇词&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> approve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bookId) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  book.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setReviewStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReviewStatus.APPROVED);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>之所以我注意到这段代码，完全是因为这里用到了 setter。在我看来，setter 就是一个坏味道，每次一看到 setter，我就会警觉起来。</p><p><strong>setter 的出现，是对于封装的破坏，它把一个类内部的实现细节暴露了出来</strong>。我在《软件设计之美》中讲过，面向对象的封装，关键点是行为，而使用 setter 多半只是做了数据的聚合，缺少了行为的设计，这段代码改写后的 approve 函数，就是这里缺少的行为。</p><p>再扩展一步，setter 通常还意味着变化，而我在《软件设计之美》中讲函数式编程时也说过，一个好的设计应该尽可能追求不变性。所以，setter 也是一个提示符，告诉我们，这个地方的设计可能有问题。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> approve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bookId) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  book.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">approve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>“写代码”有两个维度：正确性和可维护性</strong>，不要只关注正确性。能把代码写对，是每个程序员的必备技能，但能够把代码写得更具可维护性，这是一个程序员从业余迈向职业的第一步。</p><p>在我写代码的这 20 多年里，一直对代码的坏味道非常看重，因为它是写出好代码的起点。有对代码坏味道的嗅觉，能够识别出坏味道，接下来，你才有机会去“重构（Refactoring）”，把代码一点点打磨成一个整洁的代码（Clean Code）。Linux 内核开发者 Linus Torvalds 在行业里有个爱骂人的坏名声，原因之一就是他对于坏味道的不容忍。</p><p>《重构》中的“代码的坏味道”意图虽好，但却需要一个人对于整洁代码有着深厚的理解，才能识别出这些坏味道。否则，即使你知道有哪些坏味道，但真正有坏味道的代码出现在你面前时，你仍然无法认得它。</p><p>比如，你可以看看 Info、Data、Manager 是不是代码库经常使用的词汇，而它们往往是命名没有经过仔细思考的地方。在很多人眼中，这些代码是没有问题的。正因如此，才有很多坏味道的代码才堂而皇之地留在你的眼皮底下。</p><h2 id="_3-笔记" tabindex="-1">3. 笔记 <a class="header-anchor" href="#_3-笔记" aria-label="Permalink to &quot;3. 笔记&quot;">​</a></h2><h3 id="_3-1-缺乏业务含义的命名-如何精准命名" tabindex="-1">3.1. 缺乏业务含义的命名：如何精准命名？ <a class="header-anchor" href="#_3-1-缺乏业务含义的命名-如何精准命名" aria-label="Permalink to &quot;3.1. 缺乏业务含义的命名：如何精准命名？&quot;">​</a></h3><p>命名过于宽泛，不能精准描述，这是很多代码在命名上存在的严重问题，也是代码难以理解的根源所在。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processChapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chapterId) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Chapter chapter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.repository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findByChapterId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chapterId);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (chapter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IllegalArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Unknown chapter [&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chapterId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  chapter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTranslationState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TranslationState.TRANSLATING);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.repository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chapter);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上面的 <code>processChapter</code> 其实应该命名为 <code>startTranslation</code>，处理章节这个名字太宽泛。</p><p>命名要能够描述出这段代码在做的事情，<strong>一个好的名字应该描述意图，而非细节</strong>。</p><p>编写可维护的代码要使用业务语言，而不是技术语言。</p><h3 id="_3-2-乱用英语-站在中国人的视角来看英文命名" tabindex="-1">3.2. 乱用英语：站在中国人的视角来看英文命名 <a class="header-anchor" href="#_3-2-乱用英语-站在中国人的视角来看英文命名" aria-label="Permalink to &quot;3.2. 乱用英语：站在中国人的视角来看英文命名&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> completedTranslate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ChapterId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chapterIds) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Chapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; chapters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findByChapterIdIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chapterIds);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  chapters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Chapter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">completedTranslate);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  repository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">saveAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chapters); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>常见的命名规则是：<strong>类名是一个名词，表示一个对象，而方法名则是一个动词，或者是动宾短语，表示一个动作。</strong></p><p>以此为标准衡量这个名字，<code>completedTranslate</code> 并不是一个有效的动宾结构。如果把这个名字改成动宾结构，只要把“完成”译为 <code>complete</code>，“翻译”用成它的名词形式 <code>translation</code> 就可以了。所以，这个函数名可以改成 <code>completeTranslation</code>：</p><p>英语使用不当造成的坏味道：</p><ul><li>违反语法规则的命名</li><li>不准确的英语词汇</li><li>英语单词的拼写错误</li></ul><h3 id="_3-3-重复代码-简单需求到处修改-怎么办" tabindex="-1">3.3. 重复代码：简单需求到处修改，怎么办？ <a class="header-anchor" href="#_3-3-重复代码-简单需求到处修改-怎么办" aria-label="Permalink to &quot;3.3. 重复代码：简单需求到处修改，怎么办？&quot;">​</a></h3><p>时至今日，很多初级程序员写代码依然规避不了复制粘贴，基本的做法就是把一段代码复制过来，改动几个地方，然后，跑一下没有太大问题就万事大吉了。殊不知，这种做法就是在给未来挖坑。</p><p>通常情况下，只要这些复制代码其中有一点逻辑要修改，就意味着所有复制粘贴的地方都要修改。所以，我们在实际的项目中，常常看见这样的情况：明明是一个简单的需求，你却需要改很多的地方，需要花费很长的时间，结果无论是项目经理，还是产品经理，对进度都很不满意。</p><p>更可怕的是，只要你少改了一处，就意味着留下一处潜在的问题。问题会在不经意间爆发出来，让人陷入难堪的境地。</p><p>复制粘贴是最容易产生重复代码的地方，所以，一个最直白的建议就是，不要使用复制粘贴。<strong>真正应该做的是，先提取出函数，然后，在需要的地方调用这个函数。</strong></p><p>重复是一个泥潭，对于程序员来说，时刻提醒自己不要重复是至关重要的。在软件开发里，有一个重要的原则叫做 Don&#39;t Repeat Yourself（不要重复自己，简称 DRY）。</p><p><strong>写代码要想做到 DRY，一个关键点是能够发现重复</strong>。发现重复，一种是在泥潭中挣扎后，被动地发现，还有一种是提升自己识别能力，主动地发现重复。这种主动识别的能力，其实背后要有对软件设计更好的理解，尤其是对分离关注点的理解。</p><p>重复代码：</p><ul><li>复制粘贴的代码</li><li>结构重复的代码</li><li>if 和 else 代码块中的语句高度类似</li></ul><h3 id="_3-4-长函数-为什么你总是不可避免地写出长函数" tabindex="-1">3.4. 长函数：为什么你总是不可避免地写出长函数？ <a class="header-anchor" href="#_3-4-长函数-为什么你总是不可避免地写出长函数" aria-label="Permalink to &quot;3.4. 长函数：为什么你总是不可避免地写出长函数？&quot;">​</a></h3><p><strong>对于函数长度容忍度高，这是导致长函数产生的关键点。</strong></p><p>如果一个人认为 100 行代码不算长，那在他眼中，很多代码根本就是没有问题的，也就更谈不上看到更多问题了，这其实是一个观察尺度的问题。这就好比，没有电子显微镜之前，人们很难理解疾病的原理，因为看不到病毒，就不可能理解病毒可以致病这个道理。</p><p><strong>一个好的程序员面对代码库时要有不同尺度的观察能力，看设计时，要能够高屋建瓴，看代码时，要能细致入微。</strong></p><p>到具体的工作中，“越小越好”是一个追求的目标，不过，没有一个具体的数字，就没办法约束所有人的行为。所以，通常情况下，我们还是要定义出一个代码行数的上限，以保证所有人都可以按照这个标准执行。</p><p>我自己写代码的习惯是这样的。像 Python、Ruby 这样表达能力比较强的动态语言，大多数情况下，一行代码（one-liner program）可以解决很多问题，所以，我对自己的要求大约是 5 行左右，并且能够用一行代码解决的问题，就尽量会用一行代码解决；而像 Java 这样表达能力稍弱的静态类型语言，我也争取在 10 行代码之内解决问题。</p><p>重构手法：提取函数。</p><p>记住一句话：把函数写短，越短越好。</p><h3 id="_3-5-大类-如何避免写出难以理解的大类" tabindex="-1">3.5. 大类：如何避免写出难以理解的大类？ <a class="header-anchor" href="#_3-5-大类-如何避免写出难以理解的大类" aria-label="Permalink to &quot;3.5. 大类：如何避免写出难以理解的大类？&quot;">​</a></h3><p>为什么不把所有的代码都写到一个文件里？</p><p>一方面，相同的功能模块没有办法复用；另一方面，也是更关键的，把代码都写到一个文件里，其复杂度会超出一个人能够掌握的认知范围。简言之，<strong>一个人理解的东西是有限的，没有人能同时面对所有细节。</strong></p><p>人类面对复杂事物给出的解决方案是<strong>分而治之</strong>。</p><p>最容易产生大类的原因在于职责的不单一。</p><p>大类的产生往往还有一个常见的原因，就是字段未分组。</p><p><strong>所谓的将大类拆解成小类，本质上在做的工作是一个设计工作</strong>。我们分解的依据其实是单一职责这个重要的设计原则。</p><p>有些人心中会升起一些疑问：如果我们把大类都拆成小类，类的数量就会增多，那人们理解的成本是不是也会增加呢？</p><p>在这个问题上，程序设计语言早就已经有了很好的解决方案，所以，我们会看到在各种程序设计语言中，有诸如包、命名空间之类的机制，将各种类组合在一起。在你不需要展开细节时，面对的是一个类的集合。再进一步，还有各种程序库把这些打包出来的东西再进一步打包，<strong>让我们只要面对简单的接口，而不必关心各种细节</strong>。</p><p>如此层层封装，软件不就是这样构建出来的吗？</p><h3 id="_3-6-长参数列表-如何处理不同类型的长参数" tabindex="-1">3.6. 长参数列表：如何处理不同类型的长参数？ <a class="header-anchor" href="#_3-6-长参数列表-如何处理不同类型的长参数" aria-label="Permalink to &quot;3.6. 长参数列表：如何处理不同类型的长参数？&quot;">​</a></h3><p>函数间共享信息的方式不止一种，除了参数列表，最常见的一种方式是全局变量。但全局变量会带给我们太多意想不到的问题，所以，在初学编程的时候，老师就会告诉我们，不要使用全局变量。从程序设计语言发展的过程中，我们也可以看到，<strong>取消全局变量已经成为了大势所趋</strong>。</p><p>一个典型的消除长参数列表的重构手法：将参数列表封装成对象。</p><p>应对长参数列表主要的方式就是减少参数的数量，一种最直接的方式就是将参数列表封装成一个类。但并不是说所有的情况都能封装成类来解决，我们还要分析是否所有的参数都有相同的变动频率。</p><ul><li>变化频率相同，则封装成一个类。</li><li>变化频率不同的话： <ul><li>静态不变的，可以成为软件结构的一部分；</li><li>多个变化频率的，可以封装成几个类。</li></ul></li></ul><h3 id="_3-7-滥用控制语句-出现控制结构-多半是错误的提示" tabindex="-1">3.7. 滥用控制语句：出现控制结构，多半是错误的提示 <a class="header-anchor" href="#_3-7-滥用控制语句-出现控制结构-多半是错误的提示" aria-label="Permalink to &quot;3.7. 滥用控制语句：出现控制结构，多半是错误的提示&quot;">​</a></h3><p>无论是嵌套的代码，还是 else 语句，我们之所以要把它们视为坏味道，本质上都在追求简单，因为一段代码的分支过多，其复杂度就会大幅度增加。我们一直在说，<strong>人脑能够理解的复杂度是有限的，分支过多的代码一定是会超过这个理解范围。</strong></p><p>在软件开发中，有一个衡量代码复杂度常用的标准，叫做<strong>圈复杂度（Cyclomatic complexity，简称 CC）</strong>，圈复杂度越高，代码越复杂，理解和维护的成本就越高。在圈复杂度的判定中，循环和选择语句占有重要的地位。</p><h3 id="_3-8-缺乏封装-如何应对火车代码和基本类型偏执问题" tabindex="-1">3.8. 缺乏封装：如何应对火车代码和基本类型偏执问题？ <a class="header-anchor" href="#_3-8-缺乏封装-如何应对火车代码和基本类型偏执问题" aria-label="Permalink to &quot;3.8. 缺乏封装：如何应对火车代码和基本类型偏执问题？&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> book.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAuthor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Martin Fowler 在《重构》中给这种坏味道起的名字叫过长的消息链（Message Chains），而有人则给它起了一个更为夸张的名字：火车残骸（Train Wreck），形容这样的代码像火车残骸一般，断得一节一节的。</p><p>解决这种代码的重构手法叫<strong>隐藏委托关系（Hide Delegate）</strong>，说得更直白一些就是，把这种调用封装起来。</p><p>优化后：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAuthorName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.author.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> book.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAuthorName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>要想摆脱初级程序员的水平，<strong>就要先从少暴露细节开始。</strong></p><h3 id="_3-9-可变的数据-不要让你的代码-失控" tabindex="-1">3.9. 可变的数据：不要让你的代码“失控” <a class="header-anchor" href="#_3-9-可变的数据-不要让你的代码-失控" aria-label="Permalink to &quot;3.9. 可变的数据：不要让你的代码“失控”&quot;">​</a></h3><p><strong>可变的数据是可怕，但是，比可变的数据更可怕的是，不可控的变化</strong>，而暴露 setter 就是这种不可控的变化。把各种实现细节完全交给对这个类不了解的使用者去修改，没有人会知道他会怎么改，所以，这种修改完全是不可控的。</p><p><strong>缺乏封装再加上不可控的变化，在我个人心目中，setter 几乎是排名第一的坏味道</strong>。</p><p>消除 setter ，有一种专门的重构手法，叫做<strong>移除设值函数（Remove Setting Method）</strong>。总而言之，setter 是完全没有必要存在的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> approve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bookId) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  book.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setReviewStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReviewStatus.APPROVED);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>用一个函数替代了 setter，也就是把它用行为封装了起来，优化后：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> approve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bookId) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  book.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">approve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过在 Book 类里引入了一个 approve 函数，我们将审核状态封装了起来。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> approve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.reviewStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReviewStatus.APPROVED;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-10-变量声明与赋值分离-普通的变量声明-怎么也有坏味道" tabindex="-1">3.10. 变量声明与赋值分离：普通的变量声明，怎么也有坏味道？ <a class="header-anchor" href="#_3-10-变量声明与赋值分离-普通的变量声明-怎么也有坏味道" aria-label="Permalink to &quot;3.10. 变量声明与赋值分离：普通的变量声明，怎么也有坏味道？&quot;">​</a></h3><p>按照我们通常的理解，一个变量的初始化是分成了声明和赋值两个部分，而我这里要说的就是，<strong>变量初始化最好一次性完成</strong>。这段代码里的变量赋值是在声明很久之后才完成的，也就是说，变量初始化没有一次性完成。</p><p><strong>这种代码真正的问题就是不清晰，变量初始化与业务处理混在在一起</strong>。通常来说，这种代码后面紧接着就是一大堆更复杂的业务处理。当代码混在一起的时候，我们必须小心翼翼地从一堆业务逻辑里抽丝剥茧，才能把逻辑理清，知道变量到底是怎么初始化的。很多代码难读，一个重要的原因就是把不同层面的代码混在了一起。</p><p>这种代码在实际的代码库中出现的频率非常高，只不过，它会以各种变形的方式呈现出来。有的变量甚至是在相隔很远的地方才做了真正的赋值，完成了初始化，这中间已经夹杂了很多的业务代码在其中，进一步增加了理解的复杂度。</p><p>所以，我们编程时要有一个基本原则：<strong>变量一次性完成初始化</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EpubStatus status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CreateEpubResponse response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createEpub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 201</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EpubStatus.CREATED;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EpubStatus.TO_CREATE;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>提取出一个函数，将 response 转成对应的内部的 EPUB 状态。优化后：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CreateEpubResponse response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createEpub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EpubStatus status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toEpubStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EpubStatus </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEpubStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CreateEpubResponse response) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 201</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EpubStatus.CREATED;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EpubStatus.TO_CREATE;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上一讲，我们讲了可变的数据会带来怎样的影响，其中的一个结论是，尽可能编写不变的代码。这里其实是这个话题的延伸，<strong>尽可能使用不变的量</strong>。</p><h3 id="_3-11-依赖混乱-你可能还没发现问题-代码就已经无法挽救了" tabindex="-1">3.11. 依赖混乱：你可能还没发现问题，代码就已经无法挽救了 <a class="header-anchor" href="#_3-11-依赖混乱-你可能还没发现问题-代码就已经无法挽救了" aria-label="Permalink to &quot;3.11. 依赖混乱：你可能还没发现问题，代码就已经无法挽救了&quot;">​</a></h3><p>今天我们讲了由于代码依赖关系而产生的坏味道，一种是<strong>缺少防腐层，导致不同代码糅合在一起</strong>，一种是<strong>在业务代码中出现了具体的实现类</strong>。</p><p>缺少防腐层，会让请求对象传导到业务代码中，造成了业务与外部接口的耦合，也就是业务依赖了一个外部通信协议。一般来说，业务的稳定性要比外部接口高，这种反向的依赖就会让业务一直无法稳定下来，继而在日后带来更多的问题。解决方案自然就是引入一个防腐层，将业务和接口隔离开来。</p><p>业务代码中出现具体的实现类，实际上是违反了依赖倒置原则。因为违反了依赖倒置原则，业务代码也就不可避免地受到具体实现的影响，也就造成了业务代码的不稳定。<strong>识别一段代码是否属于业务，我们不妨问一下，看把它换成其它的东西，是否影响业务</strong>。解决这种坏味道就是引入一个模型，将业务与具体的实现隔离开来。</p><p><strong>代码应该向着稳定的方向依赖。</strong></p><h3 id="_3-12-不一致的代码-为什么你的代码总被吐槽难懂" tabindex="-1">3.12. 不一致的代码：为什么你的代码总被吐槽难懂？ <a class="header-anchor" href="#_3-12-不一致的代码-为什么你的代码总被吐槽难懂" aria-label="Permalink to &quot;3.12. 不一致的代码：为什么你的代码总被吐槽难懂？&quot;">​</a></h3><p>大多数程序员都是在一个团队中工作，对于一个团队而言，一致性是非常重要的一件事。<strong>因为不一致会造成认知上的负担</strong>，在一个系统中，做类似的事情，却有不同的做法，或者起到类似作用的事物，却有不同的名字，这会让人产生困惑。所以，即便是不甚理想的标准，也比百花齐放要好。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DistributionChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  WEBSITE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  KINDLE_ONLY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ALL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>表示类似含义的代码应该有一致的名字</strong>。优化后：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DistributionChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  WEBSITE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  KINDLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  ALL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>代码中的不一致：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createBook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BookId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bookIds) throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ​List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bookService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getApprovedBook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bookIds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ​CreateBookParameter parameter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toCreateBookParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(books)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ​HttpPost post </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createBookHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parameter)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ​httpClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(post)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这是一段在翻译引擎中创建作品的代码。首先，根据要处理的作品 ID 获取其中已经审核通过的作品，然后，发送一个 HTTP 请求在翻译引擎中创建出这个作品。</p><p>这么短的一段代码有什么问题吗？问题就在于这段代码中的不一致。你可能会想：“不一致？不一致体现在哪里呢？”答案就是，<strong>这些代码不是一个层次的代码</strong>。</p><p>通过了解这段代码的背景，你可能已经看出一些端倪了。首先是获取审核通过的作品，这是一个业务动作，接下来的三行其实是在做一件事，也就是发送创建作品的请求。具体到代码上，这三行代码分别是创建请求的参数，根据参数创建请求，最后，再把请求发送出去。这三行代码合起来完成了一个发送创建作品请求这么一件事，而这件事才是一个完整的业务动作。</p><p>所以，我说这个函数里的代码并不在一个层次上，有的是业务动作，有的是业务动作的细节。理解了这一点，我们就可以把这些业务细节的代码提取到一个函数里：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createBook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BookId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bookIds) throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ​List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bookService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getApprovedBook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bookIds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ​</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createRemoteBook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(books)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createRemoteBook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Book</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> books) throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ​CreateBookParameter parameter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toCreateBookParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(books)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ​HttpPost post </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createBookHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parameter)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ​httpClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(post)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>一说到分层，大多数人想到的只是模型的分层，很少有人会想到在函数的语句中也要分层。各种层次的代码混在一起，许多问题也就随之而来了，<strong>最典型莫过于我们之前讲过的长函数</strong>。</p><p><strong>很多程序员纠结的技术问题，其实是一个软件设计问题</strong>，不要通过奇技淫巧去解决一个本来不应该被解决的问题。</p><h3 id="_3-13-落后的代码风格-使用-新-的语言特性和程序库升级你的代码" tabindex="-1">3.13. 落后的代码风格：使用“新”的语言特性和程序库升级你的代码 <a class="header-anchor" href="#_3-13-落后的代码风格-使用-新-的语言特性和程序库升级你的代码" aria-label="Permalink to &quot;3.13. 落后的代码风格：使用“新”的语言特性和程序库升级你的代码&quot;">​</a></h3><p><strong>随着时间的流逝，总会有一些新的方案产生，替换原有的方案</strong>。这其中，最明显的一个例子就是程序设计语言。没有哪门语言是完美的，所以，<strong>只要有一个活跃的社区</strong>，这门语言就会不断地演进。</p><p>从 C++ 11 开始，C++ 开始出现了大规模的演化，让之前学习 C++ 的人感觉自己就像没学过这门语言一样；Python 2 与 Python 3 甚至是不兼容的演化；Java 也是每隔一段时间就会出现一次大的语言演进。</p><p>也正是因为语言本身的演化，在不同时期接触不同版本的程序员写出来的程序，甚至不像是在用同一门语言在编程。所以，<strong>我们有机会看到在同一个代码库中，各种不同时期风格的代码并存。</strong></p><p>通常来说，<strong>新的语言特性都是为了提高代码的表达性，减少犯错误的几率</strong>。所以，在实践中，我是非常鼓励你采用新的语言特性写代码的。</p><h3 id="_3-14-多久进行一次代码评审最合适" tabindex="-1">3.14. 多久进行一次代码评审最合适？ <a class="header-anchor" href="#_3-14-多久进行一次代码评审最合适" aria-label="Permalink to &quot;3.14. 多久进行一次代码评审最合适？&quot;">​</a></h3><p>我在《10x 程序员工作法》里，花了一个模块的篇幅讲了沟通反馈，我们希望沟通要尽可能透明，尽可能及时。把这样的理解放到代码评审中，就是要<strong>尽可能多暴露问题，尽可能多做代码评审。</strong></p><p>代码评审要暴露哪些问题？</p><ul><li>实现方案的正确性；</li><li>算法的正确性；</li><li>代码的坏味道。</li></ul><p><strong>评审周期过长是有问题的，周期过长，累积的问题就会增多，造成的结果就是太多问题让人产生无力感</strong>。如果遇到实现方案存在问题，<strong>要改动的代码就太多了</strong>，甚至会影响到项目的发布。</p><p>而提升评审的频率，评审的周期就会缩短，每个周期内写出来的代码就是有限的，人是有心力去修改的。</p><p>我在《10x 程序员工作法》讲过极限编程的理念，就是把好的实现推向极致，而代码评审的极致实践就是<strong>结对编程</strong>。</p><p>结对编程就是两个人一起写一段代码，一个人主要负责写，一个人则站在用外部视角保证这段代码的正确性。好的结对编程对两个人的精力集中度要求是很高的，两个人一起写一天代码其实是很累的一件事，不过，也正是因为代码是两个人一起写，代码质量会提高很多。</p><p>从我之前经历的一些团队实践来看，结对编程还有一个额外的好处，就是<strong>对于团队中的新人提升极大，这就是拜结对编程这种高强度的训练和反馈所赐</strong>。高强度的训练和反馈，本质上就是一种刻意练习，而刻意练习是一个人提升最有效的方式。</p><h3 id="_3-15-新需求破坏了代码-怎么办" tabindex="-1">3.15. 新需求破坏了代码，怎么办？ <a class="header-anchor" href="#_3-15-新需求破坏了代码-怎么办" aria-label="Permalink to &quot;3.15. 新需求破坏了代码，怎么办？&quot;">​</a></h3><p>一个有生命力的代码不会保持静止，新的需求总会到来，所以，<strong>写代码时需要时时刻刻保持嗅觉</strong>。</p><p>我用了两个例子给你讲了新需求到来时需要关注的地方，它们分别是：</p><ul><li>增加新接口；</li><li>改动实体。</li></ul><p>接口和实体，其实也是一个系统对外界产生影响的重要部分，一个是对客户端提供能力，一个是产生持久化信息。所以，我们必须谨慎地思考它们的变动，它们也是坏味道产生的高发地带。</p><p>对于接口，<strong>我们对外提供得越少越好</strong>，而对于实体，我们必须仔细分析它们扮演的角色。</p><h3 id="_3-16-结束语-写代码是一件可以一生精进的事" tabindex="-1">3.16. 结束语 | 写代码是一件可以一生精进的事 <a class="header-anchor" href="#_3-16-结束语-写代码是一件可以一生精进的事" aria-label="Permalink to &quot;3.16. 结束语 | 写代码是一件可以一生精进的事&quot;">​</a></h3><p>写代码是一门手艺，需要不断地打磨。</p><p>我在《软件设计之美》中讲过，<strong>一个好的设计是在一个“小内核”上构建起来，然后，逐步添加更多模型</strong>。我们的知识拓展过程也是如此。我的“小内核”就是编写代码这件事，所有一切知识的拓展都是围绕这个内核展开的。</p><h2 id="_4-第二曲线" tabindex="-1">4. 第二曲线 <a class="header-anchor" href="#_4-第二曲线" aria-label="Permalink to &quot;4. 第二曲线&quot;">​</a></h2><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2024/2/own_mike_7cdd052bad44abfb46.jpg" width="390"><h3 id="_4-1-概念" tabindex="-1">4.1. 概念 <a class="header-anchor" href="#_4-1-概念" aria-label="Permalink to &quot;4.1. 概念&quot;">​</a></h3><p>任何事物的发展，都有一个生命周期， 在这个生命周期里，有起始期、成长期、 高峰期、下滑期和衰落期。</p><p>第二曲线，就是在高峰期到来或者消失 前，找到另一条新的高成长性曲线，获得持续性增长。</p><h3 id="_4-2-t型人才" tabindex="-1">4.2. T型人才 <a class="header-anchor" href="#_4-2-t型人才" aria-label="Permalink to &quot;4.2. T型人才&quot;">​</a></h3><p>成为T型人才</p><ul><li>T 型人才，简言之，一专多能</li><li>专，要有深度，能，要有广度</li><li>除了自身的专家技能之外，再有一些辅助技能</li></ul><h3 id="_4-3-表达-每个人都可以习得的技能" tabindex="-1">4.3. 表达:每个人都可以习得的技能 <a class="header-anchor" href="#_4-3-表达-每个人都可以习得的技能" aria-label="Permalink to &quot;4.3. 表达:每个人都可以习得的技能&quot;">​</a></h3><ul><li>表达:把事情有结构的讲清楚，这是一种重要的职业技能， 也可以成为每个人的辅助技能</li><li>具备表达能力的人可以写文章、做演讲</li><li>表达能力强的人可以有另一种可能性 <ul><li>写自媒体</li><li>写专栏</li><li>讲课</li></ul></li><li>表达能力是可以习得的</li></ul><h2 id="_5-总结" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>读完课程，受益匪浅。</p><p>其实有些点，已经在实践中了，比如：</p><ul><li>精准命名</li><li>减少重复代码</li><li>减少长函数、大文件、圈复杂度（多重if/else）、大类</li><li>控制函数的过多参数</li></ul><p>只是理解和思考的并没有那么深，或者说，还在潜意识里，尚未理论化、体系化，比如“人脑能够理解的复杂度有限，不能同时面对所有东西”，“重复代码只要少改一处，就会留下一处潜在的问题”。</p><p>还有一些点，完全没有想到，比如代码评审的重要作用是提前暴露问题，包括设计方案、算法、规范等。评审越频繁，改动量越小，越有利于项目健康发展。这一点在基础库中还是比较重要的。</p><p>另外，在代码命名一致性、层次一致性，变量初始化最好一次性完成，封装 setter、隐藏实现细节等方面，做得不够好，回想起来，有很多地方可以优化。</p><p>此外，新语言特性这一章也引起了我的思考。一些项目由 Javascript 迁移到 Typescript，能大幅增强项目健壮性和稳定性，其实就是因为社区足够活跃，技术不断演进的结果。对比下 Python2 到 Python3，体会更明显。</p><p>编程不是体力活，开始写之前，还是要或多或少设计一下，不要一上来就咔咔干。写代码是个理论和实践螺旋上升的过程，不断实践得出新的理论，然后在实践中检验并升华，如此周而复始。</p><hr><p>---- 分割线 ----</p><hr><p>对待烂代码，有至少三种境界：</p><ol><li>意识不到问题，烂代码当做好代码</li><li>意识到问题，但没找到好的解决办法，好的办法指不影响其他模块、高效、快速的处理方式</li><li>意识到问题，并又快又好解决</li></ol><p>希望大家包括我自己都不只是停留在第2阶段，而是尽快成长到第3阶段，发现一个问题就尽快重构优化它！</p><hr><p>---- 分割线 ----</p><hr><p>推广下自己的 <a href="https://novlan1.github.io/press-ui/h5/" target="_blank" rel="noreferrer">Vue 组件库 Press UI</a>，同时支持 <code>Vue2</code> 和 <code>Vue3</code>，并兼容 <code>uni-app</code> 环境和非 <code>uni-app</code> 的普通 <code>Vue</code> 项目，拥有和 <code>Vant</code> 相同的 <code>API</code>。应用场景包括：</p><ul><li>普通 Vue 项目转 uni-app 项目</li><li>需要同时兼容 Vue2 和 Vue3 的项目</li></ul><p>Press UI 的文档地址<a href="https://novlan1.github.io/press-ui/h5/" target="_blank" rel="noreferrer">在这里</a>，更多使用场景和实现细节欢迎私聊沟通！</p>`,159)]))}const g=i(t,[["render",l]]);export{o as __pageData,g as default};
