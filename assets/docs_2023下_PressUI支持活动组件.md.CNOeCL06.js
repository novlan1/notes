import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.6d7lLjym.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2023下/PressUI支持活动组件.md","filePath":"docs/2023下/PressUI支持活动组件.md","lastUpdated":1746462038000}'),l={name:"docs/2023下/PressUI支持活动组件.md"};function e(h,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h2 id="_1-开始" tabindex="-1">1. 开始 <a class="header-anchor" href="#_1-开始" aria-label="Permalink to &quot;1. 开始&quot;">​</a></h2><p><a href="https://novlan1.github.io/press-ui/h5/" target="_blank" rel="noreferrer">Press UI</a> 近期迁入了活动组件，这里记录下遇到的问题、解决方法以及一些思考。</p><p>何为活动组件？这里指的是展示类的某业务组件。</p><h2 id="_2-样式" tabindex="-1">2. 样式 <a class="header-anchor" href="#_2-样式" aria-label="Permalink to &quot;2. 样式&quot;">​</a></h2><p>样式处理是迁移的重点。关于样式，要处理以下几点：</p><ol><li>如何在示例工程中<strong>动态切换样式</strong>，使得开发者、使用者都方便调试</li><li>如何**动态隐藏 <code>@TIP_STYLE_NAME</code> 引入的样式，**满足同一页面同一组件在不同位置有不同表现</li><li>如何让组件在拥有默认样式的同时，又可以随时去掉</li><li>如何改造之前的写法到 BEM</li></ol><p>下面一个个说。</p><h3 id="_2-1-动态切换样式" tabindex="-1">2.1. 动态切换样式 <a class="header-anchor" href="#_2-1-动态切换样式" aria-label="Permalink to &quot;2.1. 动态切换样式&quot;">​</a></h3><p>要做到运行时动态切换样式，样式文件一定是打包进去的，可以是一个外链形式，也可以直接打到一起。</p><p>这里是示例工程，就直接打包到一起了。</p><p>本质是<strong>条件式动态引入样式</strong>。页面切换参数后，给 <code>body</code> 更改 <code>class</code>，组件 <code>Scss</code> 中监听此 <code>class</code>，然后引入不同样式。</p><p>这里用了 <code>loader</code>，是因为样式类型特别多。崇尚刀耕火种的，也可以自己写。</p><p>插入内容示例如下：</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.press-act-award-dialog--type-pvp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  @import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./css/pvp.scss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.press-act-award-dialog--type-gp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  @import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./css/gp.scss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2023/11/own_mike_4c2a77c7fa33d7f435.png" width="500"><p>小程序内稍有不同：</p><ol><li>不支持在 <code>scss</code> 中条件式动态引入外部 <code>scss</code>，只能在 Vue 文件中引入</li><li>不能在 <code>body(page)</code> 上动态添加类名，只能在页面内部添加</li><li><code>@font-face</code> 在 <code>@import</code> 动态引入后，会存在嵌套，导致报错</li><li>Vue 文件中动态引入的 <code>scss</code>，如果引入其他相对路径的文件，比如 <code>svg</code>，会存在引用地址错误</li></ol><p>所以在小程序中要动态切换样式时，会不得已在 <code>loader</code> 或 <code>plugin</code> 中，额外删除或替换掉部分内容。</p><p>这里会产生一个问题，要不要在 H5 和小程序端采用相同的方式，也就是 H5 是否使用阉割的方法？</p><p>我的选择是不要阉割，H5 应该始终保持<strong>高的语法灵活性、功能完备性</strong>，不能因为是跨平台项目就去阉割。简单来说，<strong>尽量保持统一性，并追求“渐进式增强”</strong>。</p><h3 id="_2-2-动态隐藏-tip-style-name-样式" tabindex="-1">2.2. 动态隐藏 @TIP_STYLE_NAME 样式 <a class="header-anchor" href="#_2-2-动态隐藏-tip-style-name-样式" aria-label="Permalink to &quot;2.2. 动态隐藏 @TIP_STYLE_NAME 样式&quot;">​</a></h3><p>之前通过 <code>@TIP_STYLE_NAME</code> 引入的样式，可以通过传入 <code>hideTipStyle</code> 来隐藏。</p><p>Press UI 通过在<strong>组件顶部加类名</strong>（注意不是结构），以及样式中控制，比如：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;show&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  :class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[getActClass(&#39;cover&#39;), {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;press-act--hidden-tip&#39;: hideTipStyle,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }, &#39;press-act&#39;]&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.press-act:not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.press-act--hidden-tip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .press__btn--small-primary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>需要注意：</p><ol><li>样式加了一级后，优先级会变，可能会造成局部异常</li><li>之前的顶部类名要兼容，可在对应的样式文件中搜索 <code>[^&amp;].tip-comp-cover</code>，替换为 <code>&amp;.tip-comp-cover</code></li><li><code>@import</code> 语句不能写在非顶部，也就是包裹起来的部分，否则父组件可能引用不到变量，可以全局搜 <code>\\n@</code>，找到后移到顶部</li></ol><h3 id="_2-3-支持隐藏默认样式" tabindex="-1">2.3. 支持隐藏默认样式 <a class="header-anchor" href="#_2-3-支持隐藏默认样式" aria-label="Permalink to &quot;2.3. 支持隐藏默认样式&quot;">​</a></h3><p>设置 <code>hideBaseStyle</code> 为 <code>true</code> 后，组件内在 <code>body</code> 上添加 <code>{component}--hidden</code> 的类名，组件样式据此判断是否加载默认样式。</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.press-act-explain-dialog--hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  @import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./css/pvp-vertical.scss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-4-bem-改造" tabindex="-1">2.4. BEM 改造 <a class="header-anchor" href="#_2-4-bem-改造" aria-label="Permalink to &quot;2.4. BEM 改造&quot;">​</a></h3><p><strong>想清楚为什么做比怎么做更重要</strong>。</p><p>BEM 好处有：</p><ol><li>见名知义，也就是结构和状态一看便知，可读性高</li><li><strong>可读性高就意味着易维护</strong></li></ol><p>BEM 改造中需要注意：</p><ol><li>组件库公共样式中，改造后的类名应全局保持一致</li><li>要兼容旧的写法，默认使用新写法</li><li>只有 <code>Vue</code> 文件需要写两套类名，<code>Scss</code> 文件不需要，因为加了 <code>scoped</code> 后， <code>Scss</code> 文件不会作用到外部</li></ol><p>具体实现的话，不能纯手工替换，<strong>效率低是其次，更危险的是容易出错</strong>。</p><p>这里采用<strong>脚本+人工</strong>的方式。脚本用来提取类名以及替换，人工定义新类名，并 <code>CR</code> 脚本替换后的代码。</p><p>主要步骤：</p><ol><li>脚本提取 <code>Vue</code> 文件类名，生成列表</li><li>人工给出新旧类名对应关系，尽量一一对应，不要一对多或者多对一，并注意公共样式类名</li><li>脚本修改 <code>Vue</code> 文件，用统一方法替换旧类名，注意这里是向后兼容写法</li><li>脚本修改 <code>Scss</code> 文件，替换旧类名</li><li>检查代码，检查示例工程，提交</li></ol><p>映射表示例如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TIP_CLASS_MAP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  benefit: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tip-act-welfare-item&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  top: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tip-act-welfare-top&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;shop-icon&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tip-act-welfare-shop-icon&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;shop-name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tip-act-welfare-shop&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;shop-desc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tip-act-welfare-range&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>类名获取核心函数如下，优先新类名，支持旧类名：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getActClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">useTipClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tipClassMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getClassList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tipClasses</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tipClassMap[item] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pressClasses</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`^\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PREFIX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (reg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PREFIX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">useTipClass) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pressClasses.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pressClasses, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tipClasses].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_3-其他" tabindex="-1">3. 其他 <a class="header-anchor" href="#_3-其他" aria-label="Permalink to &quot;3. 其他&quot;">​</a></h2><h3 id="_3-1-tip-style-name" tabindex="-1">3.1. TIP_STYLE_NAME <a class="header-anchor" href="#_3-1-tip-style-name" aria-label="Permalink to &quot;3.1. TIP_STYLE_NAME&quot;">​</a></h3><p>对于老的关键词编译，Press UI 本次并未改动，依然可以加载一种或多种游戏的样式。</p><p>不过，这里没有用 <code>@TIP_STYLE_NAME</code> 关键词判断是否需要动态切换样式，而是引入了新的 <code>base.scss</code>，下面说下为什么不用老的关键词。</p><p><code>@TIP_STYLE_NAME</code> 其实是<strong>蹩脚的设计</strong>，组件内使用它后，意味着<strong>必须搭配一个 <code>loader</code> 处理</strong>，而 <code>base.scss</code> 是真实存在的文件，无需引入任何额外工具。另外一些活动组件也没有引入 <code>@TIP_STYLE_NAME</code>。</p><p><strong>多游戏的样式替换，完全可以用条件编译</strong>，之前文章也有写。</p><h3 id="_3-2-组件沉淀规范" tabindex="-1">3.2. 组件沉淀规范 <a class="header-anchor" href="#_3-2-组件沉淀规范" aria-label="Permalink to &quot;3.2. 组件沉淀规范&quot;">​</a></h3><ol><li>文档 props 字段为横杠写法，不能为驼峰</li></ol><p>正确写法：</p><table tabindex="0"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>show-pic</td><td>是否显示图片</td><td><em>boolean</em></td><td><code>false</code></td></tr><tr><td>props-data</td><td>弹窗数据</td><td><em>Object</em></td><td>-</td></tr><tr><td>show-close-btn</td><td>是否显示关闭图标</td><td><em>boolean</em></td><td><code>true</code></td></tr></tbody></table><p>错误写法：</p><table tabindex="0"><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>showPic</td><td>是否显示图片</td><td><em>boolean</em></td><td><code>false</code></td></tr><tr><td>propsData</td><td>弹窗数据</td><td><em>Object</em></td><td>-</td></tr><tr><td>showCloseBtn</td><td>是否显示关闭图标</td><td><em>boolean</em></td><td><code>true</code></td></tr></tbody></table><ol start="2"><li>文档 props 默认值</li></ol><p><code>string/array/object</code>，默认为空/空数组/空对象时，一律写为<code>-</code>，不要写 <code>&#39;&#39;</code>/<code>[]</code>/<code>{}</code>，冗余且没意义。</p><ol start="3"><li>复杂对象 props</li></ol><p>必须注明每个字段的类型，如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IPropsData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  dialogClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 弹窗额外类名</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  storePic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 商户图片</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  storeName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 商户名称</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  subContent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 额外说明文案</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  isGold</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// subContent 是否添加 -gold 类名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  btnText</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 确认按钮文案</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  cancelBtnText</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 取消按钮文案</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  btnClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 确认按钮额外类名</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  cancelBtnClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 取消按钮额外类名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  hasHook</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否有对勾Dom</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-3-文档与示例通信" tabindex="-1">3.3. 文档与示例通信 <a class="header-anchor" href="#_3-3-文档与示例通信" aria-label="Permalink to &quot;3.3. 文档与示例通信&quot;">​</a></h3><p>示例页面切换样式类型后，通过 <code>postMessage</code> 通知文档更改横竖屏，达到更好的展示效果。</p><p>自定义参数中的 Picker，会判断页面高度，自动更改横竖屏类型。</p><h2 id="_4-打包" tabindex="-1">4. 打包 <a class="header-anchor" href="#_4-打包" aria-label="Permalink to &quot;4. 打包&quot;">​</a></h2><p>Press UI 组件的使用方式一直都是源码方式，也就是在 <code>vue.config.js</code> 中添加 <code>transpileDependencies</code> 配置，现在支持了将组件打包成 <code>js</code> 文件，方便在普通 H5 项目中使用。下面记录下实现方式、遇到的问题及解决办法。</p><p>实现上参考了 element-ui 和 vant 的打包，支持每个组件单独打包，以及所有组件打包到一起（all in one），并支持按需加载。</p><p>遇到的问题如下：</p><h3 id="_4-1-font-face" tabindex="-1">4.1. font-face <a class="header-anchor" href="#_4-1-font-face" aria-label="Permalink to &quot;4.1. font-face&quot;">​</a></h3><p><code>@font-face</code> 中的 <code>url</code> 需要加引号，如果不加的话，在 <code>scss</code> <code>中没问题，css</code> 中引入会失败。</p><h3 id="_4-2-icon-乱码" tabindex="-1">4.2. icon 乱码 <a class="header-anchor" href="#_4-2-icon-乱码" aria-label="Permalink to &quot;4.2. icon 乱码&quot;">​</a></h3><p>伪类 <code>content</code> 中的内容在编码后会变成乱码，尽管在 <code>html</code> 中可以正常显示，但是在 <code>css</code> 文件中都是无法预览、无法修改的。</p><p>这个问题困扰了挺多人，一些人说是 <code>dart-scss</code> 的问题，换成 <code>node-scss</code> 可以解决。这里我直接将这部分 <code>icon</code> 用 <code>css</code> 实现了，不用 <code>scss</code>，也解决了这个问题。</p><p>参考：</p><ul><li><a href="https://webpack.docschina.org/loaders/sass-loader/#sassoptions" target="_blank" rel="noreferrer">https://webpack.docschina.org/loaders/sass-loader/#sassoptions</a></li><li><a href="https://github.com/PanJiaChen/vue-element-admin/issues/3526" target="_blank" rel="noreferrer">https://github.com/PanJiaChen/vue-element-admin/issues/3526</a></li></ul><h3 id="_4-3-css-相关的loader" tabindex="-1">4.3. css 相关的loader <a class="header-anchor" href="#_4-3-css-相关的loader" aria-label="Permalink to &quot;4.3. css 相关的loader&quot;">​</a></h3><p><code>style-loader</code> 的作用是在 <code>html</code> 中插入 <code>style</code> 标签，单组件分别打包时，也就是和 <code>MiniCssExtractPlugin.loader</code> 搭配时不需要，如果使用会报错：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">window</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> defined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">document</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> defined</span></span></code></pre></div><p>参考：</p><ul><li><a href="https://github.com/webpack-contrib/style-loader/issues/461" target="_blank" rel="noreferrer">https://github.com/webpack-contrib/style-loader/issues/461</a></li></ul>`,80)]))}const E=i(l,[["render",e]]);export{c as __pageData,E as default};
