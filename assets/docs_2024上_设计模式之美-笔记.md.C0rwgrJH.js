import{_ as o,c as s,o as r,ag as n}from"./chunks/framework.6d7lLjym.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2024上/设计模式之美-笔记.md","filePath":"docs/2024上/设计模式之美-笔记.md","lastUpdated":1752831400000}'),_={name:"docs/2024上/设计模式之美-笔记.md"};function a(e,t,g,l,p,i){return r(),s("div",null,t[0]||(t[0]=[n('<ol><li>如何评价代码质量的高低？</li></ol><p>代码质量的评价有很强的主观性，描述代码质量的词汇也有很多，比如<strong>可读性、可维护性、灵活、优雅、简洁</strong>等，这些词汇是从不同的维度去评价代码质量的。<strong>它们之间有互相作用，并不是独立的</strong>，比如，<strong>代码的可读性好、可扩展性好就意味着代码的可维护性好</strong>。代码质量高低是一个综合各种因素得到的结论。我们并不能通过单一的维度去评价一段代码的好坏。</p><ol start="2"><li>最常用的评价标准有哪几个？</li></ol><p>最常用到几个评判代码质量的标准是：<strong>可维护性、可读性、可扩展性、灵活性、简洁性、可复用性、可测试性</strong>。其中，<strong>可维护性、可读性、可扩展性又是提到最多的、最重要的三个评价标准</strong>。</p><ol start="3"><li>可维护性（maintainability）</li></ol><p>我们首先来看，什么是代码的“可维护性”？所谓的“维护代码”到底包含哪些具体工作？</p><p>落实到编码开发，<strong>所谓的“维护”无外乎就是修改 bug、修改老的代码、添加新的代码之类的工作</strong>。所谓“代码易维护”就是指，<strong>在不破坏原有代码设计、不引入新的 bug 的情况下，能够快速地修改或者添加代码</strong>。<strong>所谓“代码不易维护”就是指，修改或者添加代码需要冒着极大的引入新 bug 的风险，并且需要花费很长的时间才能完成</strong>。</p><p>我们知道，对于一个项目来说，<strong>维护代码的时间远远大于编写代码的时间</strong>。<strong>工程师大部分的时间可能都是花在修修 bug、改改老的功能逻辑、添加一些新的功能逻辑之类的工作上</strong>。所以，代码的可维护性就显得格外重要。</p>',8)]))}const m=o(_,[["render",a]]);export{d as __pageData,m as default};
