import{_ as e,c as i,o as a,ag as d}from"./chunks/framework.6d7lLjym.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2023下/关键词编译的类型提示.md","filePath":"docs/2023下/关键词编译的类型提示.md","lastUpdated":1748919683000}'),n={name:"docs/2023下/关键词编译的类型提示.md"};function o(p,s,t,l,c,h){return a(),i("div",null,s[0]||(s[0]=[d(`<h2 id="_1-背景" tabindex="-1">1. 背景 <a class="header-anchor" href="#_1-背景" aria-label="Permalink to &quot;1. 背景&quot;">​</a></h2><p>基础库跨平台的方式是，在编译阶段用<code>webpack plugin</code>替换关键词，比如下面的代码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @ts-ignore</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { initXss } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./index-@TIP_PLATFORM_NAME&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>在<code>web</code>端是映射到<code>index-web</code>，在小程序映射到<code>index-mp</code>。</p><p>这种使用方式由来已久，是早期兼容<code>hippy</code>项目时开始的。</p><p>这种方法的一个缺点是缺少类型提示，因为<code>ts</code>找不到<code>@TIP_PLATFORM_NAME</code>这个文件，类型就中断了，同时<code>eslint</code>默认也会报错。</p><h2 id="_2-思路" tabindex="-1">2. 思路 <a class="header-anchor" href="#_2-思路" aria-label="Permalink to &quot;2. 思路&quot;">​</a></h2><p>报错问题很好解决，不管是<code>eslint</code>还是<code>ts</code>，只需要设置<code>ignore</code>或<code>rule</code>以及<code>@ts-ignore</code>即可。</p><p>比如<code>eslint</code>额外配置下规则：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rules: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;import/no-unresolved&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ignore: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;@TIP_PLATFORM_NAME&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>但是没有类型提示就很不友好了，容易出错，效率也低。</p><p>如何解决呢，尝试了下面几种方案。</p><ol><li>在<code>tsconfig.json</code>中设置<code>compilerOptions.paths</code>，类似<code>webpack</code>配置中的<code>alias</code>。</li></ol><p>但是<code>paths</code>只能指定绝对路径的别名，比如<code>@</code>、<code>@/utils</code>等，基础库基本都是相对路径，如果都改成一个特殊前缀的绝对路径，并不直观。</p><ol start="2"><li>写个<code>vscode插</code>件，做相关的类型提示。</li></ol><p>这种方式成本相对高，而且使用基础库的人比较多，还有一些外部团队，沟通、教育成本比较高。</p><ol start="3"><li>为引用方生成一份类型文件</li></ol><p>可以在同级目录下，生成一份引用者的<code>.d.ts</code>文件，比如<code>index.js</code>使用了<code>index-web</code>和<code>index-mp</code>，那么可以生成<code>index.d.ts</code>文件。这样<code>ts</code>就可以找到相应的提示了。</p><p>但是，这种方式有2个问题。</p><p>第一，引用方的错误依然无法消除，因为依然找不到<code>index-@TIP_PLATFORM_NAME</code></p><p>第二，引用方需要用<code>js</code>编写。如果引用方是用<code>ts</code>写的，也就是<code>index.ts</code>，而不是<code>index.js</code>，那么 <code>typescript</code> 会优先找<code>ts</code>文件，而不是<code>.d.ts</code>文件，由于<code>index.ts</code>中有找不到的依赖，也就是编译失败，那么类型提示依然会中断。</p><ol start="4"><li>生成<code>@TIP_PLATFORM_NAME</code>的类型文件</li></ol><p>在同级目录下，生成一份<code>.d.ts</code>文件。即使没有<code>index-@TIP_PLATFORM_NAME</code>真实的文件，但是可以有类型文件<code>index-@TIP_PLATFORM_NAME.d.ts</code>，其类型与<code>index-web</code>中导出类型一致，这样不就可以提示了吗？</p><p>这种方案相对上面几种方式，相对成本低、效果好，所以采用这种方案。</p><h2 id="_3-实现" tabindex="-1">3. 实现 <a class="header-anchor" href="#_3-实现" aria-label="Permalink to &quot;3. 实现&quot;">​</a></h2><p>搜了一下，有40多个文件用了这种“关键词编译”方法，手工写效率太低、容易出错，所以考虑用脚本。</p><p>脚本实现如下：</p><ul><li>获取哪些文件使用了关键词<code>@TIP_PLATFORM_NAME</code></li><li>查找对应的<code>xxx-web</code>的路径，注意并不一定是同级，有可能是子文件夹</li><li>生成<code>xxx-web</code>的类型文件</li><li>将上面类型文件名更新为<code>xxx-@TIP_PLATFORM_NAME.d.ts</code></li></ul><h2 id="_4-效果对比" tabindex="-1">4. 效果对比 <a class="header-anchor" href="#_4-效果对比" aria-label="Permalink to &quot;4. 效果对比&quot;">​</a></h2><p>使用前：</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2023/8/own_mike_4f2d63a6e4ad086aa2.jpg" width="600"><p>使用后：</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2023/8/own_mike_efa2ea96c0d2e579d6.jpg" width="600"><h2 id="_5-后记" tabindex="-1">5. 后记 <a class="header-anchor" href="#_5-后记" aria-label="Permalink to &quot;5. 后记&quot;">​</a></h2><p>其实解决跨平台编译有更好的解决方案，比如<code>uni-app</code>中的<a href="https://uniapp.dcloud.net.cn/tutorial/platform.html#preprocessor" target="_blank" rel="noreferrer">条件编译</a>，小程序的<a href="https://dev.weixin.qq.com/docs/framework/dev/framework/operation/condition-compile.html" target="_blank" rel="noreferrer">条件编译</a>。</p><p>相比于上面的“关键词编译”，条件编译更加灵活。&quot;关键词编译&quot;必须把差异部分提取到一个文件中，而条件编译可以解决任意粒度的差异，可以是文件级别，也可以是几行代码，比如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #ifdef H5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;only H5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #endif</span></span></code></pre></div><p>另外，使用关键词编译意味着必须引入一个额外的工具（<code>loader</code>），而条件编译时是注释方式，可以引入<code>loader</code>，也可以不用，更灵活。</p><p>但是<code>uni-app</code>的条件编译只能用在基于<code>uni-app</code>的项目中，对于普通的前端项目，如何实现同样的条件编译呢？</p><p>这里我写了一个<a href="https://github.com/novlan1/uni-plugin-light/tree/master/src/loader/ifdef-loader" target="_blank" rel="noreferrer">webpack loader</a>，可以实现相同效果，使用方式也与<code>uni-app</code>相同。</p>`,40)]))}const E=e(n,[["render",o]]);export{k as __pageData,E as default};
