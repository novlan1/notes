import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.6d7lLjym.js";const r=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2025下/tdesign-uniapp.md","filePath":"docs/2025下/tdesign-uniapp.md","lastUpdated":1757431245000}'),t={name:"docs/2025下/tdesign-uniapp.md"};function p(l,s,d,o,h,c){return e(),a("div",null,s[0]||(s[0]=[n(`<h3 id="_1-button" tabindex="-1">1. button <a class="header-anchor" href="#_1-button" aria-label="Permalink to &quot;1. button&quot;">​</a></h3><p>button 不是最简单的，loading/icon才是最简单的，它们是 button 的子元素</p><h3 id="_2-tdesign-miniprogram" tabindex="-1">2. tdesign-miniprogram <a class="header-anchor" href="#_2-tdesign-miniprogram" aria-label="Permalink to &quot;2. tdesign-miniprogram&quot;">​</a></h3><p><code>tdesign-miniprogram</code> 中 <code>wxComponent</code> 类的作用：</p><ol><li>属性，处理受控属性，增加 <code>default*</code> 属性的默认值，增加 <code>style/customStyle</code> 属性，增加 <code>aria*</code> 相关属性</li><li><code>externalClasses</code>，增加 <code>class</code></li><li>方法，增加 <code>_trigger</code>，兼容受控情况下的抛出事件，非生命周期函数挂载在 <code>methods</code> 对象上</li><li>生命周期函数放到 <code>lifetimes</code> 上</li></ol><h3 id="_3-uni-app" tabindex="-1">3. uni-app <a class="header-anchor" href="#_3-uni-app" aria-label="Permalink to &quot;3. uni-app&quot;">​</a></h3><p><code>src/core/runtime/mp/polyfill/index.js</code></p><p>uni-app 中运行时对 <code>vant-weapp</code> 的 <code>polyfill</code> 核心逻辑</p><h3 id="_4-data" tabindex="-1">4. data <a class="header-anchor" href="#_4-data" aria-label="Permalink to &quot;4. data&quot;">​</a></h3><p><code>data</code> 不用提前声明，<code>created</code> 中动态声明即可</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.xxx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_5-uni-app-中-事件的处理" tabindex="-1">5. uni-app 中 事件的处理 <a class="header-anchor" href="#_5-uni-app-中-事件的处理" aria-label="Permalink to &quot;5. uni-app 中 事件的处理&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> oldEmit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm.$emit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">triggerEvent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">eventName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">detail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      dataset: vm.$el.dataset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      target,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      currentTarget: target,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      detail,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      preventDefault: noop,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      stopPropagation: noop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oldEmit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm, eventName, event)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 主要是Vant 自己封装了 $emit,放到 methods 中会触发 Vue 的警告,索性,框架直接重写该方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$emit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">triggerEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h3 id="_6-watch" tabindex="-1">6. watch <a class="header-anchor" href="#_6-watch" aria-label="Permalink to &quot;6. watch&quot;">​</a></h3><p><code>watch</code>，这么获取</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>vm.$options.watch</span></span></code></pre></div><p>小程序的 <code>observers</code> 和 <code>vue</code> 的 <code>watch</code> 逻辑并不完全相同，小程序下，如果 <code>prop</code> 接收外部传入的实参与该 <code>prop</code> 的默认值不相等时，会导致 <code>observer</code> 被立即调用一次，vue 而不是。</p><p><code>image</code> 中 <code>calcSize</code> 中用到了。</p><h3 id="_7-props" tabindex="-1">7. props <a class="header-anchor" href="#_7-props" aria-label="Permalink to &quot;7. props&quot;">​</a></h3><p><code>miniprogram-to-uniapp</code> 直接转化后的代码有 <code>this = props</code>，这肯定是不对的，需要改成 <code>this.props = props</code></p><h3 id="_8-通用" tabindex="-1">8. 通用 <a class="header-anchor" href="#_8-通用" aria-label="Permalink to &quot;8. 通用&quot;">​</a></h3><ol><li>去掉 <code>zpMixins</code>， <code>zpMixins.extend</code></li><li>组件位置改成<code> index</code>，比如 <code>loading/index</code>，而不是 <code>loading/loading</code></li><li><code>demo</code> 转换的 <code>base</code> 有问题，需改成两个单词的</li><li>引入路径 <code>./tdesign-miniprogram/icon/icon</code>，需改成 <code>tdesign-uniapp/icon</code></li><li>工具把 <code>icon</code> 的 <code>font-family</code> 也转换错了</li><li>转换工具对 <code>cell</code> 组件 <code>title</code> 的处理有问题</li><li><code>&lt;tag arrow /&gt;</code> 中 <code>arrow</code> 在组件里取到的值为空字符串，但是期望是 <code>boolean</code>。<code>tdesign-miniprogram</code> 中一些 <code>props</code> 的 <code>type</code> 为 <code>null</code>，会导致这个问题。 <code>&lt;tag arrow /&gt;</code> <code>arrow</code> 在组件里取到的值为空字符串，但是期望是 <code>true</code>。</li></ol><h3 id="_9-token-核心" tabindex="-1">9. token 核心 <a class="header-anchor" href="#_9-token-核心" aria-label="Permalink to &quot;9. token 核心&quot;">​</a></h3><blockquote><p>颜色色板 =&gt; 全局语义token =&gt; 组件token</p></blockquote>`,24)]))}const E=i(t,[["render",p]]);export{r as __pageData,E as default};
