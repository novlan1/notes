import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.6d7lLjym.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2023下/tim消息.md","filePath":"docs/2023下/tim消息.md","lastUpdated":1751532671000}'),n={name:"docs/2023下/tim消息.md"};function h(l,s,p,d,k,o){return e(),a("div",null,s[0]||(s[0]=[t(`<h2 id="全局消息" tabindex="-1">全局消息 <a class="header-anchor" href="#全局消息" aria-label="Permalink to &quot;全局消息&quot;">​</a></h2><p>是否显示一个全局消息弹窗，取决于4个因素：</p><ol><li>是否有新消息进来，没有不显示</li><li>用户是否点击了x，点击后不显示</li><li>props中传入的是否显示，有些页面不需要显示</li><li>未读消息总数是否大于0，这个因素不考虑的话，消息框会先闪烁后消失</li></ol><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> realIsShowMsg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hasRobotNewMsg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">showRobotMsg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isShowMsg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hasRobotNewMsg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showRobotMsg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isShowMsg;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><h2 id="消息传递流程" tabindex="-1">消息传递流程 <a class="header-anchor" href="#消息传递流程" aria-label="Permalink to &quot;消息传递流程&quot;">​</a></h2><p>普通页面(比如 message-center) mixin-mounted，监听 uid，登录 tim，监听回调，给到 vuex</p><p>header 从 vuex 中取，去到其他页面，还是从 vuex 中取，不影响。不要直接引入 IMHandler，要解耦</p><h2 id="tim-js-sdk-登录失败" tabindex="-1">tim-js-sdk 登录失败 <a class="header-anchor" href="#tim-js-sdk-登录失败" aria-label="Permalink to &quot;tim-js-sdk 登录失败&quot;">​</a></h2><p>在 iOS15 和 iOS16 上，<code>tim-js-sdk</code>压缩有问题，所以不会开启压缩。</p><p>如果某些自研浏览器在上述版本下的<code>userAgent</code>不正确，比如本来系统是 iOS16，<code>userAgent</code>却给出了12，那么<code>tim-js-sdk</code>就会压缩，导致登录失败。</p><p>解决办法，就是强制指定<code>userAgent</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改ua</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__defineGetter__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;userAgent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;My custom user agent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="dev-机器中文乱码" tabindex="-1">Dev 机器中文乱码 <a class="header-anchor" href="#dev-机器中文乱码" aria-label="Permalink to &quot;Dev 机器中文乱码&quot;">​</a></h2><p>（1）打开系统配置文件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/profile</span></span></code></pre></div><p>在文件末尾添加：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LANG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zh_CN.UTF-8&quot;</span></span></code></pre></div><p>（2）执行以下命令立即生效：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/profile</span></span></code></pre></div><p>（3）使用<code>echo $LANG</code>命令打印环境变量，可以看到已设置为<code>zh_CN.UTF-8</code></p><h2 id="vue-router-的-history-模式" tabindex="-1">Vue Router 的 history 模式 <a class="header-anchor" href="#vue-router-的-history-模式" aria-label="Permalink to &quot;Vue Router 的 history 模式&quot;">​</a></h2><p>Vue Router 在 history 模式下提示 <code>Uncaught SyntaxError: Unexpected token ＞</code></p><ul><li><p>vue-cli3.0下：在<code>vue.config</code>里设置<code>publicPath: &#39;/&#39;</code></p></li><li><p>vue-cli2.x下：在<code>config/index</code>里设置<code>assetsPublicPath: &#39;/&#39;</code></p></li></ul><p>参考：<a href="https://blog.csdn.net/qq_35559000/article/details/117824321" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_35559000/article/details/117824321</a></p>`,24)]))}const g=i(n,[["render",h]]);export{c as __pageData,g as default};
