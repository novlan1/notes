import{_ as h,c as t,o as p,j as i,ag as n,a,t as k}from"./chunks/framework.6d7lLjym.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2025下/h函数.md","filePath":"docs/2025下/h函数.md","lastUpdated":1752831400000}'),e={name:"docs/2025下/h函数.md"};function d(l,s,r,E,o,g){return p(),t("div",null,[s[11]||(s[11]=i("h2",{id:"_1-h-函数",tabindex:"-1"},[a("1. h 函数 "),i("a",{class:"header-anchor",href:"#_1-h-函数","aria-label":'Permalink to "1. h 函数"'},"​")],-1)),s[12]||(s[12]=i("p",null,[a("在 Vue 3 中，"),i("code",null,"h"),a(" 函数是用于创建 "),i("strong",null,"虚拟 DOM 节点（VNode）"),a(' 的核心工具，其名称来源于 "hyperscript"（即 "生成 HTML 的脚本" 的缩写）。它是 '),i("code",null,"createVNode"),a(" 的别名，用于以编程方式描述 UI 结构，是 Vue 渲染系统的底层实现之一。以下是其核心要点：")],-1)),i("ol",null,[s[9]||(s[9]=n("<li><p><strong>基本定义与作用</strong><code>h</code> 函数通过 JavaScript 对象描述 DOM 结构，生成虚拟节点（VNode），这些节点会被 Vue 的渲染器高效地转换为实际 DOM。它支持动态创建 HTML 元素、组件或复杂嵌套结构，适用于模板语法无法满足灵活性的场景。</p></li><li><p><strong>语法与参数</strong> 其完整签名为 <code>h(type, props, children)</code>：</p><ul><li><strong>type</strong>：可以是 HTML 标签名（如 <code>&#39;div&#39;</code>）、组件对象或函数式组件。</li><li><strong>props</strong>：可选属性对象，包含类名、样式、事件（如 <code>onClick</code>）等。</li><li><strong>children</strong>：子节点，可以是字符串、数组（多个子节点）或其他 VNode。</li></ul></li>",2)),i("li",null,[s[8]||(s[8]=i("p",null,[i("strong",null,"与模板和 JSX 的关系")],-1)),i("ul",null,[i("li",null,[s[0]||(s[0]=i("strong",null,"模板编译",-1)),s[1]||(s[1]=a("：Vue 的模板最终会被编译为 ")),s[2]||(s[2]=i("code",null,"h",-1)),s[3]||(s[3]=a(" 函数的调用。例如，")),i("code",null,"<div>"+k(l.message)+"</div>",1),s[4]||(s[4]=a(" 会转换为 ")),s[5]||(s[5]=i("code",null,"h('div', {}, message)",-1)),s[6]||(s[6]=a("。"))]),s[7]||(s[7]=i("li",null,[i("strong",null,"JSX 支持"),a("：JSX 语法在 Vue 中会被 Babel 转换为 "),i("code",null,"h"),a(" 函数调用，例如 "),i("code",null,'<div class="container">'),a(" 等价于 "),i("code",null,"h('div', { class: 'container' })"),a("。")],-1))])]),s[10]||(s[10]=n("<li><p><strong>使用场景</strong></p><ul><li><strong>动态渲染</strong>：根据条件或数据动态生成节点（如条件分支、循环列表）。</li><li><strong>高阶组件</strong>：开发需要灵活控制渲染逻辑的组件（如自定义渲染函数、插件）。</li><li><strong>性能优化</strong>：绕过模板编译，直接生成更高效的渲染逻辑。</li></ul></li><li><p><strong>与 Vue 2 的区别</strong> 在 Vue 2 中，类似功能通过 <code>createElement</code> 实现，且作为渲染函数的参数传入。Vue 3 的 <code>h</code> 需显式从 <code>&#39;vue&#39;</code> 导入，并支持更灵活的 Composition API 集成。</p></li>",2))]),s[13]||(s[13]=n(`<p>总结来说，<code>h</code> 函数是 Vue 3 响应式渲染的核心工具，提供了比模板更底层的控制能力，适用于需要动态或复杂逻辑的 UI 构建场景。</p><h2 id="_2-jsx中嵌套h函数" tabindex="-1">2. jsx中嵌套h函数 <a class="header-anchor" href="#_2-jsx中嵌套h函数" aria-label="Permalink to &quot;2. jsx中嵌套h函数&quot;">​</a></h2><p>在 Vue 3 的 JSX 语法中嵌套 <code>h</code> 函数是一种混合使用 JSX 和渲染函数的技巧，通常用于处理动态渲染逻辑或需要更精细控制 VNode 的场景。以下是关键要点和示例：</p><hr><h3 id="_2-1-jsx-与-h-函数的本质关系" tabindex="-1">2.1. <strong>JSX 与 <code>h</code> 函数的本质关系</strong> <a class="header-anchor" href="#_2-1-jsx-与-h-函数的本质关系" aria-label="Permalink to &quot;2.1. **JSX 与 \`h\` 函数的本质关系**&quot;">​</a></h3><ul><li><p><strong>JSX 是语法糖</strong>：Vue 的 JSX 最终会被编译为 <code>h</code> 函数（即 <code>createVNode</code>）的调用。例如：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> jsxNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译后等价于：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { class: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;container&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li><li><p><strong>嵌套 <code>h</code> 的场景</strong>：当 JSX 无法直接表达复杂逻辑（如动态生成组件类型或插槽内容）时，可以显式调用 <code>h</code> 函数嵌入到 JSX 中。</p></li></ul><hr><h3 id="_2-2-嵌套-h-的常见用法" tabindex="-1">2.2. <strong>嵌套 <code>h</code> 的常见用法</strong> <a class="header-anchor" href="#_2-2-嵌套-h-的常见用法" aria-label="Permalink to &quot;2.2. **嵌套 \`h\` 的常见用法**&quot;">​</a></h3><h4 id="_2-2-1-动态组件渲染" tabindex="-1">2.2.1. <strong>动态组件渲染</strong> <a class="header-anchor" href="#_2-2-1-动态组件渲染" aria-label="Permalink to &quot;2.2.1. **动态组件渲染**&quot;">​</a></h4><p>在 JSX 中动态选择组件类型时，<code>h</code> 函数比 JSX 标签更灵活：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ComponentA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./ComponentA.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ComponentB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./ComponentB.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dynamicComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ComponentA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dynamicComponent.value, { prop: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h4 id="_2-2-2-复杂插槽内容" tabindex="-1">2.2.2. <strong>复杂插槽内容</strong> <a class="header-anchor" href="#_2-2-2-复杂插槽内容" aria-label="Permalink to &quot;2.2.2. **复杂插槽内容**&quot;">​</a></h4><p>JSX 中嵌套 <code>h</code> 可以精确控制插槽的渲染逻辑：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Card </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./Card.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Card</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;h1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Custom Header&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;JSX Content&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;small&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Footer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Card</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h4 id="_2-2-3-条件渲染高阶组件" tabindex="-1">2.2.3. <strong>条件渲染高阶组件</strong> <a class="header-anchor" href="#_2-2-3-条件渲染高阶组件" aria-label="Permalink to &quot;2.2.3. **条件渲染高阶组件**&quot;">​</a></h4><p>当需要根据条件返回不同的 VNode 结构时：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isAdmin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {isAdmin.value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AdminPanel, { permissions: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;all&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UserPanel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><hr><h3 id="_2-3-注意事项" tabindex="-1">2.3. <strong>注意事项</strong> <a class="header-anchor" href="#_2-3-注意事项" aria-label="Permalink to &quot;2.3. **注意事项**&quot;">​</a></h3><ul><li><strong>性能影响</strong>：过度嵌套 <code>h</code> 可能增加代码复杂度，建议仅在必要时使用（如动态组件、自定义渲染逻辑）。</li><li><strong>类型支持</strong>：在 TypeScript 中，需确保 <code>h</code> 函数的参数类型与 JSX 标签类型兼容。</li><li><strong>插件配置</strong>：使用 JSX 需在 Vite 或 Webpack 中配置 <code>@vitejs/plugin-vue-jsx</code> 或 <code>@vue/babel-plugin-jsx</code>。</li></ul><hr><h3 id="_2-4-总结" tabindex="-1">2.4. <strong>总结</strong> <a class="header-anchor" href="#_2-4-总结" aria-label="Permalink to &quot;2.4. **总结**&quot;">​</a></h3><p>JSX 嵌套 <code>h</code> 函数适用于需要结合 JSX 的简洁性和 <code>h</code> 函数的动态能力的场景，例如：</p><ul><li>动态组件类型切换；</li><li>复杂插槽的编程式控制；</li><li>条件渲染高阶组件。</li></ul><p>对于大多数简单场景，纯 JSX 语法更直观；而复杂逻辑中混合使用 <code>h</code> 能提供更大灵活性。</p>`,25))])}const F=h(e,[["render",d]]);export{c as __pageData,F as default};
