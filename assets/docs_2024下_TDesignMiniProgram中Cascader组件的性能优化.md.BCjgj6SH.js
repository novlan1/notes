import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.6d7lLjym.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2024下/TDesignMiniProgram中Cascader组件的性能优化.md","filePath":"docs/2024下/TDesignMiniProgram中Cascader组件的性能优化.md","lastUpdated":1760924603000}'),t={name:"docs/2024下/TDesignMiniProgram中Cascader组件的性能优化.md"};function l(h,s,p,k,d,r){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="_1-开始" tabindex="-1">1. 开始 <a class="header-anchor" href="#_1-开始" aria-label="Permalink to &quot;1. 开始&quot;">​</a></h2><p>有人在 <code>github</code> 上提了 <a href="https://github.com/Tencent/tdesign-miniprogram/issues/2840" target="_blank" rel="noreferrer">issue</a>，说 <code>Cascader</code> 在4级地址下卡顿明显。</p><img src="https://cdn.uwayfly.com/article/2024/6/own_mike_f816e0f537c5e292a0.png" width="700"><h2 id="_2-解决" tabindex="-1">2. 解决 <a class="header-anchor" href="#_2-解决" aria-label="Permalink to &quot;2. 解决&quot;">​</a></h2><p>看了下代码，<code>CasCader</code> 组件会接收 <code>options</code> 参数，大致结构如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string; children</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>内部有个 <code>items</code>，会在渲染层循环，生成 <code>Cascader</code> 待选择的列表，比如4级地址，<code>items</code> 就有4项。</p><p>问题就出在 <code>items</code> 的 <code>setData</code> 上，原来的代码会在 <code>select</code> 时，把 <code>item.children</code> 一起设置，这其实是没有必要的，渲染层根本用不到。<strong>而且这个 <code>children</code> 数据量巨大，而且会嵌套，<code>children</code> 里面还有 <code>children</code>，导致 <code>setData</code> 能达到好几兆</strong>。</p><p>此外，取值 <code>item</code> 的时候，完全可以从原始数据 <code>options</code> 上，根据 <code>selectedIndexes</code> 和 <code>level</code> 获取。</p><p>直接看代码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KeysType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TdCascaderProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;keys&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OptionsType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">keys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KeysType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> label</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keys?.label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;label&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keys?.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [label]: item[label],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [value]: item[value],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><img src="https://cdn.uwayfly.com/article/2024/6/own_mike_f3d4bd1f53b29f1c66.png" width="800"><img src="https://cdn.uwayfly.com/article/2024/6/own_mike_94b325272bbeb25cbe.png" width="800"><h2 id="_3-效果" tabindex="-1">3. 效果 <a class="header-anchor" href="#_3-效果" aria-label="Permalink to &quot;3. 效果&quot;">​</a></h2><p>优化前：</p><img src="https://cdn.uwayfly.com/article/2024/6/own_mike_90136e5a2f9582c59f.gif" width="399"><p>优化后：</p><img src="https://cdn.uwayfly.com/article/2024/6/own_mike_733b0e9743fe66dc10.gif" width="399"><h2 id="_4-进一步优化" tabindex="-1">4. 进一步优化 <a class="header-anchor" href="#_4-进一步优化" aria-label="Permalink to &quot;4. 进一步优化&quot;">​</a></h2><p>进一步优化了两个方面:</p><ol><li>将 <code>options</code> 设为纯数据字段</li><li><code>handleSelect</code> 时切片更新 <code>items</code>，就是更新 <code>items</code> 的某一列，而不是一起更新。</li></ol><p>第 1 个就是新增了 <code>pureDataPattern</code>，如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: WechatMiniprogram.Component.ComponentOptions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  multipleSlots: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 新增</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pureDataPattern:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>第 2 个，我把 <code>options</code> 和 <code>selectedIndexes</code> 的监听分开，因为 <code>options</code> 变化依然需要全量更新 <code>items</code>，而 <code>selectedIndexes</code> 变化并不需要。</p><p><code>handleSelect</code> 时只需要更新 <code>items[level + 1]</code> 即可。直接看代码。</p><img src="https://cdn.uwayfly.com/article/2024/6/own_mike_9396b3f80bb20f18f8.png" width="800"><img src="https://cdn.uwayfly.com/article/2024/6/own_mike_c626f7f26692a2063b.png" width="800"><h2 id="_5-总结" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>核心就两步，<strong>一是 <code>setData</code> 的时候少更新一点，二是取的时候稍微不那么方便一点</strong>。仔细想一想，是不是其他业务的性能优化也是异曲同工？</p><p>详细代码见<a href="https://github.com/Tencent/tdesign-miniprogram/pull/2866" target="_blank" rel="noreferrer">PR</a>。</p><h2 id="_6-后记" tabindex="-1">6. 后记 <a class="header-anchor" href="#_6-后记" aria-label="Permalink to &quot;6. 后记&quot;">​</a></h2><p>本来我都把这篇文章删了，后来看到《团队分拆了，项目怎么办》中提到了这个 <code>issue</code>，呵呵，不想多说了。</p>`,32)]))}const E=i(t,[["render",l]]);export{o as __pageData,E as default};
