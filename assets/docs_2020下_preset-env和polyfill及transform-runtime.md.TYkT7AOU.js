import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.6d7lLjym.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2020下/preset-env和polyfill及transform-runtime.md","filePath":"docs/2020下/preset-env和polyfill及transform-runtime.md","lastUpdated":1746461257000}'),l={name:"docs/2020下/preset-env和polyfill及transform-runtime.md"};function t(p,s,h,o,d,k){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="_1-babel-preset-env" tabindex="-1">1. @babel/preset-env <a class="header-anchor" href="#_1-babel-preset-env" aria-label="Permalink to &quot;1. @babel/preset-env&quot;">​</a></h2><h3 id="_1-1-参数" tabindex="-1">1.1. 参数 <a class="header-anchor" href="#_1-1-参数" aria-label="Permalink to &quot;1.1. 参数&quot;">​</a></h3><h4 id="_1-1-1-target-设置支持的运行环境" tabindex="-1">1.1.1. <code>target</code> - 设置支持的运行环境 <a class="header-anchor" href="#_1-1-1-target-设置支持的运行环境" aria-label="Permalink to &quot;1.1.1. \`target\` - 设置支持的运行环境&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ [string]: number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string }, 默认为 {}。</span></span></code></pre></div><h4 id="_1-1-2-modules-将es6模块语法转换为另一种模块类型" tabindex="-1">1.1.2. <code>modules</code> - 将ES6模块语法转换为另一种模块类型 <a class="header-anchor" href="#_1-1-2-modules-将es6模块语法转换为另一种模块类型" aria-label="Permalink to &quot;1.1.2. \`modules\` - 将ES6模块语法转换为另一种模块类型&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;amd&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;umd&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;systemjs&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;commonjs&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">， 默认为 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;commonjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span></code></pre></div><p>将其设置为 false 就不会转换模块。</p><h4 id="_1-1-3-debug-输出插件等信息" tabindex="-1">1.1.3. <code>debug</code> - 输出插件等信息 <a class="header-anchor" href="#_1-1-3-debug-输出插件等信息" aria-label="Permalink to &quot;1.1.3. \`debug\` - 输出插件等信息&quot;">​</a></h4><p><code>boolean</code>， 默认为 <code>false</code>。</p><p>将使用的目标浏览器/插件和在 数据插件版本 中指定的版本用 <code>console.log</code> 输出。</p><h4 id="_1-1-4-usebuiltins" tabindex="-1">1.1.4. <code>useBuiltIns</code> <a class="header-anchor" href="#_1-1-4-usebuiltins" aria-label="Permalink to &quot;1.1.4. \`useBuiltIns\`&quot;">​</a></h4><p>它有三个值可以选</p><h5 id="_1-1-4-1-entry" tabindex="-1">1.1.4.1. <code>entry</code> <a class="header-anchor" href="#_1-1-4-1-entry" aria-label="Permalink to &quot;1.1.4.1. \`entry\`&quot;">​</a></h5><p>这是一种入口导入方式, 只要我们在打包配置入口 或者 文件入口写入 <code>import &quot;core-js&quot;</code> 这样一串代码， <code>babel</code> 就会替我们根据当前你所配置的目标浏览器(<code>browserslist</code>)来引入所需要的<code>polyfill</code> 。</p><p>像这样， 我们在 index.js 文件中加入试一下core-js</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/index.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;core-js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr)</span></span></code></pre></div><p>babel配置如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;presets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@babel/preset-env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;useBuiltIns&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;entry&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="_1-1-4-2-useage" tabindex="-1">1.1.4.2. useage <a class="header-anchor" href="#_1-1-4-2-useage" aria-label="Permalink to &quot;1.1.4.2. useage&quot;">​</a></h5><p>这个就比较神奇了， useBuiltIns = useage 时，会参考目标浏览器（browserslist） 和 代码中所使用到的特性来按需加入 polyfill</p><p>当然， 使用 useBuiltIns = useage, 还需要填写另一个参数 corejs 的版本号，</p><p>core-js 支持两个版本， 2 或 3， 很多新特性已经不会加入到 2 里面了， 比如: flat 等等最新的方法， 2 这个版本里面都是没有的， 所以建议大家用3</p><p>此时的 .babelrc</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;presets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@babel/preset-env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;useBuiltIns&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;usage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;corejs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="_1-1-4-3-false" tabindex="-1">1.1.4.3. false <a class="header-anchor" href="#_1-1-4-3-false" aria-label="Permalink to &quot;1.1.4.3. false&quot;">​</a></h5><p>剩下最后一个 <code>useBuiltIns = false</code> , 那就简单了， 这也是默认值， 使用这个值时不引入 <code>polyfill</code></p><h2 id="_2-为什么要集成babel-polyfill" tabindex="-1">2. 为什么要集成babel-polyfill? <a class="header-anchor" href="#_2-为什么要集成babel-polyfill" aria-label="Permalink to &quot;2. 为什么要集成babel-polyfill?&quot;">​</a></h2><p>Babel默认只转换新的JavaScript句法（<code>syntax</code>），如箭头函数、<code>const</code>、<code>class</code>、扩展运算符，而不转换新的API，比如<code>Iterator</code>、<code>Generator</code>、<code>Set</code>、<code>Maps</code>、<code>Proxy</code>、<code>Reflect</code>、<code>Symbol</code>、<code>Promise</code>等全局对象，以及一些定义在全局对象上的方法（比如<code>Object.assign</code>）都不会转码。</p><p>举例来说，ES6在Array对象上新增了<code>Array.from</code>方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用<code>babel-polyfill</code>，为当前环境提供一个垫片。</p><h2 id="_3-babel-plugin-transform-runtime" tabindex="-1">3. <code>@babel/plugin-transform-runtime</code> <a class="header-anchor" href="#_3-babel-plugin-transform-runtime" aria-label="Permalink to &quot;3. \`@babel/plugin-transform-runtime\`&quot;">​</a></h2><p>这是一个<code>babel</code>插件，使用这个插件的同时，必须同时安装<code>@babel/runtime</code>这个包，而且必须是安装在<code>dependencies</code>里面，而非<code>devDependencies</code>里面。</p><ol><li>将<code>preset-env</code>所产生的<code>helpers</code>函数提出到一个独立文件中，从而减少代码量</li><li>建立运行时沙盒，避免像<code>babel-polyfill</code>一样，修改全局对象，造成全局污染</li></ol><h3 id="_3-1-配置" tabindex="-1">3.1. 配置 <a class="header-anchor" href="#_3-1-配置" aria-label="Permalink to &quot;3.1. 配置&quot;">​</a></h3><ul><li><code>corejs</code></li></ul><p>配置版本，传入<code>corejs</code>的值和同时安装的<code>@babel/runtime</code>包是不一致的，你需要手动安装。例如，你传入2则需要手动安装<code>@babel/runtime-corejs2</code>，传入3则需要手动安装<code>@babel/runtime-corejs3</code>，并且，这三个包只安装对应的一个就好，它们是互斥的。</p><ul><li><code>helpers</code></li></ul><p>是否要将所有<code>helper</code>函数提炼到另外一个公共文件中。默认为<code>true</code>。</p>`,37)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
