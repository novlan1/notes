import{_ as e,c as d,o,ag as a}from"./chunks/framework.6d7lLjym.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2025上/TGS和电子流总结.md","filePath":"docs/2025上/TGS和电子流总结.md","lastUpdated":1749788525000}'),r={name:"docs/2025上/TGS和电子流总结.md"};function c(i,t,l,n,p,h){return o(),d("div",null,t[0]||(t[0]=[a('<h3 id="_1-介绍" tabindex="-1">1. 介绍 <a class="header-anchor" href="#_1-介绍" aria-label="Permalink to &quot;1. 介绍&quot;">​</a></h3><p>TGS 和电子流项目都进行了重构，同步下设计原则、当前规范等。</p><p>新系统带来的价值包括：</p><ol><li>避免与其他游戏的项目耦合，减少现网bug</li><li>代码更健壮、更规范、更稳定，开发效率更高</li><li>性能提升（待收集数据）</li><li>开发编译、打包速度提升</li></ol><h3 id="_2-理解-tgs-和电子流" tabindex="-1">2. 理解 TGS 和电子流 <a class="header-anchor" href="#_2-理解-tgs-和电子流" aria-label="Permalink to &quot;2. 理解 TGS 和电子流&quot;">​</a></h3><p>TGS 和电子流都是管理端，二者有以下不同：</p><table tabindex="0"><thead><tr><th></th><th>TGS</th><th>电子流</th></tr></thead><tbody><tr><td>用户群体</td><td>偏内部</td><td>偏外部</td></tr><tr><td>设计规范</td><td>基本无，开发者自行堆砌组件库即可</td><td>有，需遵循</td></tr><tr><td>变更频率</td><td>频繁</td><td>较少</td></tr><tr><td>不同游戏间差异</td><td>差异较大，<br>多个页面需定制</td><td>差异较小，<br>多数情况下改下主题图、样式、<code>gid</code> 即可</td></tr></tbody></table><h3 id="_3-模板建设" tabindex="-1">3. 模板建设 <a class="header-anchor" href="#_3-模板建设" aria-label="Permalink to &quot;3. 模板建设&quot;">​</a></h3><p>基于以上不同，TGS 和电子流模板设计也有所不同：</p><ul><li>模板代码量上，TGS 较少，电子流较多</li><li>接入一个新游戏，TGS 耗时较多，电子流10分钟内完成接入</li></ul><p>模板项目必须是一个规范化很强的项目，TGS 和电子流都建立了对应的模板。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/5/own_mike_ZRJR5tjpzmFijn3e.png" width="375"><h3 id="_4-tgs-优化" tabindex="-1">4. TGS 优化 <a class="header-anchor" href="#_4-tgs-优化" aria-label="Permalink to &quot;4. TGS 优化&quot;">​</a></h3><p>之前的 TGS 系统存在以下问题：</p><ul><li>多个游戏的逻辑、页面、数据杂糅在一起，已经出现不止一次下面的问题：想改动一个游戏的业务，却影响了其他游戏的正常流程</li><li>数据流混乱，逻辑分散。使用 Vuex 管理非全局性质的数据，没有就近放置，管理困难。叠加上第1点，维护起来更加困难</li></ul><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/5/own_mike_54GMD4tbkNXQKAPJ.png" width="375"><p>代码层面问题：</p><ul><li>没有使用 <code>typescript</code>，没有类型提示</li><li>常量导出、接口导出都是用的大对象，没法 <code>tree-shaking</code>，性能差</li><li>与第2点类似，数据导入都是 <code>index.js</code> 中导入，难以快速定位位置</li></ul><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/5/own_mike_Cj6yxTW2ikwf5jm4.png" width="375"><p>诚然，花上不少时间还是能够理清之前的逻辑，区别在于，烂代码里1天做一个需求，好代码里5分钟做一个需求，且前者1天做出来的需求 <code>bug</code> 还比后者多。</p><p>考虑到后续源源不断的新游接入，以及当前 TGS 的痛点，新建了 TGS 模板：</p><ul><li>不同游戏分离，且是物理隔离，彻底解决影响其他游戏业务的问题</li><li>采用 Vue3 + TDesign Vue Next + Typescript + Pinia 等技术栈</li><li>减少伪公共逻辑的复用，减少 <code>local-logic/store</code> 逻辑，真正可复用的可放到 <code>pmd</code> 中</li></ul><p>目前 HoK TGS、三角洲 TGS 已接入新模板。</p><h3 id="_5-电子流优化" tabindex="-1">5. 电子流优化 <a class="header-anchor" href="#_5-电子流优化" aria-label="Permalink to &quot;5. 电子流优化&quot;">​</a></h3><p>电子流同样有多游戏逻辑杂糅的问题，相比 TGS，电子流没有过度使用 Vuex，但有一些其他问题，比如文件命名不统一、目录结构混乱问题。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/5/own_mike_3dtTMXhZh4S7ySPM.png" width="300"><p>同样地，新建了电子流模板，包括 PC 和 H5，优化了以下部分：</p><table tabindex="0"><thead><tr><th>旧系统</th><th>新系统</th></tr></thead><tbody><tr><td>目录结构混乱，<br>组件、逻辑放的到处都是</td><td>公共逻辑或组件放到 <code>local-component/logic</code>，<br>非共用的放到子工程 <code>component/logic</code> 下</td></tr><tr><td>命名不统一，有 <code>pascal</code>、也有 <code>kebab</code></td><td>文件、目录统一为 <code>kebab</code></td></tr><tr><td>引用混乱，<br>子工程间相互引用，<br>非共用的也写在外部，<br>外层引用内层</td><td>规范引用关系，<br>子工程间不可引用，<br>非共用的写在子工程内，<br>禁止反向依赖</td></tr><tr><td>过度封装路由跳转，更引入了 <code>mixin</code>，<br>开发调试困难，来回跳跃，<br><code>mixin</code> 容易变量冲突、覆盖，只对老人友好，新人无从下手</td><td>删除 <code>mixin</code>、<code>jump</code>，<br>跳转逻辑直接写在页面中，<br>简单、清晰、易维护</td></tr><tr><td>全是 <code>js</code>，<br>缺失类型提示、类型校验</td><td><code>js</code> 全部改成 <code>ts</code>，<br>补充类型提示</td></tr><tr><td>组件库乱用，<br>PC 也用 Vant，H5 也用 Element</td><td>PC 统一用 Element，<br>H5 统一用 Vant</td></tr><tr><td>组件从 <code>index.js</code> 额外导出，冗余</td><td>删掉多余的 <code>index.js</code>，直接引入 Vue 文件</td></tr><tr><td>全是魔法字符串，如 <code>gid</code>、<code>orgId</code>、<code>roleId</code> 等</td><td>全部改成统一的配置文件引入</td></tr><tr><td>组件与样式位置分散，难以维护</td><td>样式就近放置在组件旁</td></tr><tr><td>大量 <code>typo</code> 拼写错误，有些甚至表现在 <code>url</code> 上，<br>如 <code>/apply/authentification</code></td><td>全局检查，<br>改成正确的，避免低级错误</td></tr><tr><td>导出用大对象，不利于 <code>tree-shaking</code></td><td>分方法导出，避免大对象</td></tr></tbody></table><p>新系统采用 Vue3 技术栈，使用的组件库也进行相应的了升级，<a href="https://iwiki.a.com/p/4014546747" target="_blank" rel="noreferrer">Element UI =&gt; Element Plus</a>, <a href="https://iwiki.a.com/p/4014546742" target="_blank" rel="noreferrer">Vant2 =&gt; Vant4</a>。</p><p>目前，无畏契约电子流、金铲铲电子流已接入。此外，旧系统中其他游戏的电子流、通用版电子流也用新模板重新做了下，可以在下次相关需求时测试并上线。</p><h3 id="_6-eslint" tabindex="-1">6. ESLint <a class="header-anchor" href="#_6-eslint" aria-label="Permalink to &quot;6. ESLint&quot;">​</a></h3><p>还是那句话，遵守代码规范是防止项目腐化的第一步。上面提到新系统都会严格要求代码规范，并利用一些工具控制规范，比如 MR Lint 检查、全量 Lint 检查等。</p><p>此外，新系统都引入了 <code>import/order</code> 这个规则，可以将三方库、本地文件清晰的分割开，本地文件的不同目录也会分开，比如 <code>src/local-logic</code>, <code>src/local-component</code>，清晰，一目了然，提升代码统一性。后面会根据业务实际需要，挖掘更多规则。</p><h3 id="_7-总结" tabindex="-1">7. 总结 <a class="header-anchor" href="#_7-总结" aria-label="Permalink to &quot;7. 总结&quot;">​</a></h3><p>TGS、电子流升级后，赛事核心的相关业务基本都升到了 Vue3 + Typescript，提升了可维护性。</p><p>通过新模板的建立、更强的目录规范、代码规范、命名规范等约束，可以促使新系统更健康的迭代。</p>',36)]))}const m=e(r,[["render",c]]);export{b as __pageData,m as default};
