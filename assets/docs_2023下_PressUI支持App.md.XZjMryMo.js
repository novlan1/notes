import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.6d7lLjym.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2023下/PressUI支持App.md","filePath":"docs/2023下/PressUI支持App.md","lastUpdated":1745631734000}'),p={name:"docs/2023下/PressUI支持App.md"};function t(h,s,l,k,d,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h2 id="_1-开始" tabindex="-1">1. 开始 <a class="header-anchor" href="#_1-开始" aria-label="Permalink to &quot;1. 开始&quot;">​</a></h2><p>Press UI 已经支持了普通 Vue 项目和 Vue3 等，现在需要支持下 App，即 <code>iOS</code> 和 <code>Android</code> 平台。</p><p>本质上还是一些语法的兼容，这里采用的方法依然是 Press UI 当 <code>Submodule</code>，然后做一些工具和语法的适配。这里主要记录下遇到的问题。</p><h2 id="_2-整体流程" tabindex="-1">2. 整体流程 <a class="header-anchor" href="#_2-整体流程" aria-label="Permalink to &quot;2. 整体流程&quot;">​</a></h2><p>先利用 <code>@vue/cli</code> 创建工程，文档<a href="https://uniapp.dcloud.net.cn/quickstart-cli.html#%E5%88%9B%E5%BB%BAuni-app" target="_blank" rel="noreferrer">在这里</a>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dcloudio/uni-preset-vue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-project</span></span></code></pre></div><p>注意不要用 HBuilderX 建，后期迁移很麻烦。</p><p>建完工程后，在 HBuilderX 中运行，选择运行 =&gt; 运行到手机或模拟器。为什么这里要用 HBuilderX 呢，因为 VScode 调试 App 会麻烦很多，HBuilderX 已经打通了 App 编译、打包的一些步骤。</p><h2 id="_3-遇到的问题" tabindex="-1">3. 遇到的问题 <a class="header-anchor" href="#_3-遇到的问题" aria-label="Permalink to &quot;3. 遇到的问题&quot;">​</a></h2><h3 id="_3-1-macos-配置adb" tabindex="-1">3.1. MacOS 配置adb <a class="header-anchor" href="#_3-1-macos-配置adb" aria-label="Permalink to &quot;3.1. MacOS 配置adb&quot;">​</a></h3><p>工欲善其事，必先利其器。兼容 App 需要先下载 Xcode 和配置 <code>adb</code> 等。</p><p>先下载 Android Studio，然后配置环境变量。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.bash_profile</span></span></code></pre></div><p>然后输入下面内容，<code>ANDROID_HOME</code> 即为 SDK 位置。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Android Sdk</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ANDROID_HOME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/Users/yang/Library/Android/sdk</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${PATH}:\${ANDROID_HOME}/tools</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${PATH}:\${ANDROID_HOME}/platform-tools</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${PATH}:\${ANDROID_HOME}/tools/bin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${PATH}:\${ANDROID_HOME}/emulator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ANDROID_SDK</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${ANDROID_HOME}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ANDROID_NDK</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${ANDROID_HOME}/ndk-bundle</span></span></code></pre></div><p>终端输入 <code>source ~/.bash_profile</code>，使环境变量生效。</p><p>然后输入 <code>adb devices</code> 或 <code>adb version</code>，可以检查是否配置成功。</p><p>另外，在手机上开启USB调试，才能在 <code>adb devices</code> 中看到设备。</p><p>参考：</p><ul><li><a href="https://blog.csdn.net/xiaoyue_/article/details/132020304" target="_blank" rel="noreferrer">https://blog.csdn.net/xiaoyue_/article/details/132020304</a></li><li><a href="https://www.jianshu.com/p/744fc5946627" target="_blank" rel="noreferrer">https://www.jianshu.com/p/744fc5946627</a></li></ul><h3 id="_3-2-ios-打包" tabindex="-1">3.2. iOS 打包 <a class="header-anchor" href="#_3-2-ios-打包" aria-label="Permalink to &quot;3.2. iOS 打包&quot;">​</a></h3><p>iOS 打包需要证书，包括证书密码、证书profile文件、密钥证书。</p><p>打包后会生成 ipa 文件。可以将这个文件上传到 devcloud，然后用“归档构件“插件，生成二维码。</p><p>上传命令示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">set</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ex</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 文件路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/Users/yang/Downloads/press-ui.ipa</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 目标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TARGET_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/data/workspace/p-30ff30b405b24a228b4fa22cb05b7db3/src</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -P</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 36000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $FILE </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">root@my:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$TARGET_PATH</span></span></code></pre></div><h3 id="_3-3-vscode支持-nvue-文件高亮显示" tabindex="-1">3.3. VScode支持 nvue 文件高亮显示 <a class="header-anchor" href="#_3-3-vscode支持-nvue-文件高亮显示" aria-label="Permalink to &quot;3.3. VScode支持 nvue 文件高亮显示&quot;">​</a></h3><p>只需要将 <code>nvue</code> 文件当成 <code>vue</code> 文件处理即可。</p><p>设置中搜文件，找到<code>Associations</code>，<code>key</code> 填 <code>*.nvue</code>， <code>value</code> 填 <code>vue</code>。</p><p>并去掉 <code>Vetur</code> 对 <code>Script/Style/Template</code> 的校验。</p><p>参考：<a href="https://blog.51cto.com/gblfy/5652539" target="_blank" rel="noreferrer">https://blog.51cto.com/gblfy/5652539</a></p><h3 id="_3-4-sass-报错-可选参数需在必需参数之后" tabindex="-1">3.4. sass 报错，可选参数需在必需参数之后 <a class="header-anchor" href="#_3-4-sass-报错-可选参数需在必需参数之后" aria-label="Permalink to &quot;3.4. sass 报错，可选参数需在必需参数之后&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assError:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> required</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> parameters</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> must</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> precede</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> optional</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> parameters</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> line</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 229</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../../../../../../Users/yang/Documents/git-a/press-ui-app/press-ui-app/packages/base/mixin.scss</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @mixin halfBorder($color: $color-gray-3, $borderRadius) {</span></span></code></pre></div><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@mixin</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> halfBorder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$color-gray-3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$borderRadius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可简单改为：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@mixin</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> halfBorder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$color-gray-3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$borderRadius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span></code></pre></div><h3 id="_3-5-ts配置" tabindex="-1">3.5. TS配置 <a class="header-anchor" href="#_3-5-ts配置" aria-label="Permalink to &quot;3.5. TS配置&quot;">​</a></h3><p>HBuilderX 可以有自己的<code>tsconfig.json</code>，需注意不能配置为 <code>noEmit: true</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TypeScript</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> emitted</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span></span></code></pre></div><h3 id="_3-6-偶现错误" tabindex="-1">3.6. 偶现错误 <a class="header-anchor" href="#_3-6-偶现错误" aria-label="Permalink to &quot;3.6. 偶现错误&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reportJSException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;&gt;&gt;&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exception</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> function:createInstanceContext,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exception:JavaScript</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> execute</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error!Uncaught</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ReferenceError:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uni</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> defined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./node_modules/.pnpm/@dcloudio+vue-cli-plugin-uni@2.0.2-3081220230817001/node_modules/@dcloudio/vue-cli-plugin-uni/packages/uni-cloud/dist/index.js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (pages/tabBar/component/component.js.nvue:13855:21)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __webpack_require__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (pages/tabBar/component/component.js.nvue:21443:41)</span></span></code></pre></div><p>这个应该是 HBuilderX 自己的问题，一个解决办法是，在 VScode 中执行 <code>npm run dev:h5</code>，然后 HBuilderX 会自动重新编译，这时候报错会消除。</p><h3 id="_3-7-组件上的方法" tabindex="-1">3.7. 组件上的方法 <a class="header-anchor" href="#_3-7-组件上的方法" aria-label="Permalink to &quot;3.7. 组件上的方法&quot;">​</a></h3><p>函数式调用组件时，需要在组件外获取组件内方法，之前采用方法是判断环境是否为 H5，其和小程序的策略不同：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #ifdef H5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dialog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newOptions);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">promise </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dialog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showDialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #ifndef H5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dialog.$vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newOptions);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">promise </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dialog.$vm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showDialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #endif</span></span></code></pre></div><p>在 App 端，其和 H5 表现一致，也就是 <code>setData</code> 在 <code>dialog</code> 上，不在 <code>dialog.$vm</code> 上。这里改造如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;setData&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> setData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dialog.$vm?.[func] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dialog[func];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> setData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;function&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>需要优先使用 <code>dialog.$vm</code> 的方法</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> setData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dialog[func] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dialog.$vm[func];</span></span></code></pre></div><h3 id="_3-8-链接协议" tabindex="-1">3.8. 链接协议 <a class="header-anchor" href="#_3-8-链接协议" aria-label="Permalink to &quot;3.8. 链接协议&quot;">​</a></h3><p>App 端不支持省略 <code>http</code> 协议，也就是不能：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      normal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;//mike-1255355338.cos.ap-guangzhou.myqcloud.com/press%2Fimg%2Fuser-inactive.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;//mike-1255355338.cos.ap-guangzhou.myqcloud.com/press%2Fimg%2Fuser-active.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>链接补充上 <code>https:</code> 即可。</p><h3 id="_3-9-key" tabindex="-1">3.9. key <a class="header-anchor" href="#_3-9-key" aria-label="Permalink to &quot;3.9. key&quot;">​</a></h3><p>遇到下面的报错，调试了很久，网上查到的资料要么是动态引用、要么是变量为空未兼容，但是 Press UI 并不存在这些情况。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> found</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-1,1,0,2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-1,1,0,2,2,3-1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">undefined</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> view.umd.min.js:1</span></span></code></pre></div><p>最后，发现是下面语法的问题：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(item, index) of list&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  :key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item.index&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>改成 <code>:key=&quot;index&quot;</code> 即可解决。</p><p>这个问题的坑点在于，报错信息极其隐晦，很难定位真正有问题的地方。</p><h3 id="_3-10-onpagescroll" tabindex="-1">3.10. onPageScroll <a class="header-anchor" href="#_3-10-onpagescroll" aria-label="Permalink to &quot;3.10. onPageScroll&quot;">​</a></h3><p>Press UI 中还在使用 page 的滚动的组件只有 press-sticky 了，在 APP 端 onPageScroll 目前并未生效。</p><h2 id="_4-体验" tabindex="-1">4. 体验 <a class="header-anchor" href="#_4-体验" aria-label="Permalink to &quot;4. 体验&quot;">​</a></h2><p>目前 Press UI 组件已兼容 App，可扫码下面二维码下载安装，体验安卓版本。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/press/apk/press-ui-apk-main.png" width="200px"><p>iOS 证书制作要花钱，等有钱了再说～</p><p>目前 Press UI 支持的产品矩阵如下：</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2023/10/own_mike_13f3281f0a188e0fbd.png" width="600"><h2 id="_5-原理" tabindex="-1">5. 原理 <a class="header-anchor" href="#_5-原理" aria-label="Permalink to &quot;5. 原理&quot;">​</a></h2><p>从上面解决的问题可以看到，Press UI 兼容 App 所做的的适配相对比较少，其实是 uni-app 底层已经适配好了。</p><blockquote><p>在 App 端，如果使用 vue 页面，则使用 webview 渲染；如果使用 nvue 页面(native vue 的缩写)，则使用原生渲染。</p></blockquote><p><code>nvue</code> 的 <code>css</code> 写法受限，Press UI 的组件均为 <code>vue</code> 类型。</p>`,69)]))}const E=i(p,[["render",t]]);export{c as __pageData,E as default};
