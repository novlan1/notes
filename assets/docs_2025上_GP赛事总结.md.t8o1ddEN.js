import{_ as i,c as l,o as t,ag as e}from"./chunks/framework.6d7lLjym.js";const _=JSON.parse('{"title":"GP赛事总结","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2025上/GP赛事总结.md","filePath":"docs/2025上/GP赛事总结.md","lastUpdated":1746168666000}'),n={name:"docs/2025上/GP赛事总结.md"};function o(r,a,d,s,c,h){return t(),l("div",null,a[0]||(a[0]=[e('<h1 id="gp赛事总结" tabindex="-1">GP赛事总结 <a class="header-anchor" href="#gp赛事总结" aria-label="Permalink to &quot;GP赛事总结&quot;">​</a></h1><h2 id="工程" tabindex="-1">工程 <a class="header-anchor" href="#工程" aria-label="Permalink to &quot;工程&quot;">​</a></h2><h3 id="tailwind" tabindex="-1">tailwind <a class="header-anchor" href="#tailwind" aria-label="Permalink to &quot;tailwind&quot;">​</a></h3><p>tailwindcss 是CSS原子化的工具。</p><p>为什么用 tailwindcss？官网给了三个理由：</p><p>对于我们项目而言，还有更深层次的原因：</p><ul><li>由于前端开发与UI开发分离，许多时候前端删掉了某些DOM结构，却不知道删掉对应的样式文件，造成性能问题</li><li>类名写的很乱，即便一个按钮也有无数种写法，难以维护。用 tailwind 之后，大部分情况下只有一个标准答案，会限制开发人员的“胡乱发挥”</li></ul><p>对于有些人认为的 tailwind 会让模板变成很长，造成难以维护。我是这里理解的。</p><ul><li>写的太少，不了解 tailwind，对于不熟的东西有天然的恐惧</li><li>没有规范，我这边的项目要求 tailwind 的类名一行一个，并增加 eslint 的排序校验，保证所有人写出来的都一样</li><li>不懂数据驱动，如果发现完全一模一样的很长的类名，是不是忘记了 v-for</li></ul><p>个人对 tailwind 的理解：</p><ol><li>用工具帮开发者完成书写CSS，这个工具是无数测试用例、无数线上项目验证过的</li><li>简单、高效</li></ol><p>为什么不用 unocss？主要是考虑是社区生态和活跃度，tailwindcss 生态链更成熟。unocss 那点编译速度的提升不足以弥补它在生态的不足、以及生产环境的不确定性。</p><h2 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h2><h2 id="用户体验" tabindex="-1">用户体验 <a class="header-anchor" href="#用户体验" aria-label="Permalink to &quot;用户体验&quot;">​</a></h2>',14)]))}const u=i(n,[["render",o]]);export{_ as __pageData,u as default};
