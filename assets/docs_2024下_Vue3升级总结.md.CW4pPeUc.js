import{_ as o,c as a,o as i,ag as c}from"./chunks/framework.6d7lLjym.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2024下/Vue3升级总结.md","filePath":"docs/2024下/Vue3升级总结.md","lastUpdated":1745630497000}'),d={name:"docs/2024下/Vue3升级总结.md"};function l(t,e,r,p,n,u){return i(),a("div",null,e[0]||(e[0]=[c('<h3 id="_1-介绍" tabindex="-1">1. 介绍 <a class="header-anchor" href="#_1-介绍" aria-label="Permalink to &quot;1. 介绍&quot;">​</a></h3><p>多个项目进行了 Vue3 的升级，在开发体验、包体积、性能等方面都有大幅度提升，现总结下一些经验。</p><p>Vue 框架是项目的引擎。Vue2 已于去年停止维护，但在今年之前我们项目还在大量使用，升级 Vue3 之后，也从慢车道走上了快车道。</p><h3 id="_2-业务价值" tabindex="-1">2. 业务价值 <a class="header-anchor" href="#_2-业务价值" aria-label="Permalink to &quot;2. 业务价值&quot;">​</a></h3><p>裂变转化产品转为 Vue3 后，包体积由 1.9MB 降到 1.06MB，降低了 <strong>44%</strong>，首屏耗时由 2900ms 降到 2000ms。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2024/9/own_mike_dad05f89b7efff8f87.png" width="500"><p>掼蛋小程序上线，主包仅有 837KB，总包仅有 932KB。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2024/9/own_mike_7b2e012046f31990fa.png" width="500"><p>和平赛事小程序，之前不使用分发插件的话，主包大小为 3.32MB，总包大小为 7.08MB。升级 Vue3 后，主包为 1.51MB ，总包为 1.99MB。分别减小了 <strong>56% 和 72%</strong> 。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2024/9/own_mike_9749c9b66d83fe45e3.png" width="500"><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2024/9/own_mike_43149eecb7976fbb05.png" width="500"><p>影响小程序首屏性能和切换分包性能的因素，主要是包体积，升级 Vue3 后可以轻松达到 Vue2 时优化不到的高度。</p><p>Vue3 之所以能减包这么多，tree-shaking 是一方面，但不是最主要的，因为我们 Vue 页面都是导出的大对象，不改代码情况下，大对象也无法 tree-shaking，因为解析器目前还无法判断对象变量是否被内部或外部引用，毕竟 <code>this[xxx]</code> 这种 <code>xxx</code> 的动态变量无法预测。</p><p>Vue3 能减包这么多，更多的靠运行时加载机制的变化。Vue2 时，用的是 <code>webpack</code> 那一套，就是 <code>webpackJsonp</code>、<code>__webpack_require__</code> 这些关键词，具体可以参考我之前写的文章。Vue3 已经不在使用这些了，可以直接转化为小程序支持的 <code>require</code> 语法。由于打包产物模块众多、依赖关系和引用关系复杂，这一改变就会大幅影响产物的大小。</p><h3 id="_3-底层模块" tabindex="-1">3. 底层模块 <a class="header-anchor" href="#_3-底层模块" aria-label="Permalink to &quot;3. 底层模块&quot;">​</a></h3><p>上层业务改动其实只是冰山之上，做了一些对普通开发者无感知的工程相关工作，是冰山之下，这里介绍下。</p><ol><li>组件库和工具库的兼容</li><li>脚手架</li><li>通用Vite配置</li><li>H5发布</li><li>小程序CI</li><li>合包流失线</li><li>统一的代码规范</li></ol><h4 id="_3-1-组件库和工具库" tabindex="-1">3.1. 组件库和工具库 <a class="header-anchor" href="#_3-1-组件库和工具库" aria-label="Permalink to &quot;3.1. 组件库和工具库&quot;">​</a></h4><p>组件库和工具库同时支持 Vue2 和 Vue3，这一点尤为重要，只有底层组件和工具都支持了，上层业务才有升级的可能。</p><p>Press UI 组件库支持 <code>2*(n+1)</code> 端，<code>2</code> 指的是 Vue2 + Vue3，<code>n</code> 指的是 uni-app 支持的 H5、各种小程序、APP等，<code>1</code> 指的是非 uni-app 的 H5。</p><h4 id="_3-2-通用-vite-配置" tabindex="-1">3.2. 通用 Vite 配置 <a class="header-anchor" href="#_3-2-通用-vite-配置" aria-label="Permalink to &quot;3.2. 通用 Vite 配置&quot;">​</a></h4><p>通用 Vite 配置兼容项目底层库，让业务无缝升级 Vue3，具体包括以下内容。</p><h5 id="_3-2-1-插件支持" tabindex="-1">3.2.1. 插件支持 <a class="header-anchor" href="#_3-2-1-插件支持" aria-label="Permalink to &quot;3.2.1. 插件支持&quot;">​</a></h5><ol><li>支持条件编译</li><li>支持关键词跨平台文件编译</li><li>支持关键词跨平台样式编译</li><li>支持 <code>rem</code> 转 <code>rpx</code></li><li>支持小程序下转化 <code>v-lazy</code> 指令</li><li>支持小程序下去掉 Vue 指令</li><li>支持构建产物分析</li><li>支持 QQ 小程序下中 <code>globalThis polyFill</code></li><li>支持输出版本信息</li><li>支持输出不兼容语法的警告信息</li><li>支持动态修改 <code>vue.runtime.js</code>，解决编译问题</li></ol><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2024/9/own_mike_ba280fde6f7614a7a2.png" width="500"><h5 id="_3-2-2-插件修复-uni-app-内部问题" tabindex="-1">3.2.2. 插件修复 uni-app 内部问题 <a class="header-anchor" href="#_3-2-2-插件修复-uni-app-内部问题" aria-label="Permalink to &quot;3.2.2. 插件修复 uni-app 内部问题&quot;">​</a></h5><ol><li>修复 uni-app 中自带 <code>useRem</code> 函数带来的样式适配问题</li></ol><p>uni-app Vue2 版本的 H5 会把 <code>rpx</code> 转成 <code>px</code>，在 Vue3 版本中，会把 <code>rpx</code> 转成 <code>rem</code>，且算法与我们业务不一样，并且即使你没用 <code>rpx</code>，他也会在 <code>html</code> 挂上他计算出来的 <code>font-size</code>，这个必须去掉。查看源码，其实就是这个 <code>useRem</code> 函数，这里写了插件用 <code>AST</code> 去掉。</p><ol start="2"><li>修复 uni-app 中 <code>monorepo</code> 仓库下打包路径问题</li><li>修复 uni-app QQ小程序打包后 <code>appId</code> 错误问题</li><li>修复 uni-app 小程序下样式文件变化无法重新编译的问题</li></ol><p>小程序开发时，独立的 <code>sass</code> 文件改动后并不会重新编译，用一个全新的示例工程也不可以。看了下源码，uni-app 是用 <code>import(&#39;vite&#39;).then({build}=&gt;{})</code> 这种方式来启动的。</p><p>解决办法是利用 <code>gulp.watch</code>，监听 <code>./src/**/*.scss</code> 文件，然后修改下 <code>main.ts</code>，然后这样就能重新编译了。同时加上了 <code>debounce</code>。</p><h5 id="_3-2-3-配置支持" tabindex="-1">3.2.3. 配置支持 <a class="header-anchor" href="#_3-2-3-配置支持" aria-label="Permalink to &quot;3.2.3. 配置支持&quot;">​</a></h5><ol><li>支持根据环境变量修改 <code>manifest</code> 中 <code>h5.router.base</code>，实现业务上云</li><li>支持小程序下劫持 <code>window</code>, <code>location</code>, <code>localStorage</code> 等变量</li><li>支持 <code>src</code> 等开头的 <code>alias</code></li><li>支持 H5 下三方库设置外链</li></ol><h4 id="_3-3-脚手架" tabindex="-1">3.3. 脚手架 <a class="header-anchor" href="#_3-3-脚手架" aria-label="Permalink to &quot;3.3. 脚手架&quot;">​</a></h4><p>实现 <strong>uni-app + Vue3 项目、普通 Vue3 项目</strong>的脚手架及模版搭建，可以一键创建新的工程、子工程，并接入了研发平台。</p><p>开发者一键创建后，只需安装依赖、配置环境变量两步，就可以进入业务开发，体验与 Vue2 工程一致，无需进行工程配置、Eslint配置等，无额外心智负担。</p><h4 id="_3-4-ci" tabindex="-1">3.4. CI <a class="header-anchor" href="#_3-4-ci" aria-label="Permalink to &quot;3.4. CI&quot;">​</a></h4><p>对 <strong>H5发布、小程序CI、合包流水线</strong>做了改造，均支持 Vue3 项目，普通开发者无感知。</p><ul><li>H5发布同样支持 <code>history</code> 模式 和 <code>hash</code> 模式，编译速度更快</li><li>小程序CI同样支持微信和QQ双端，支持包大小记录、消息通知、错误提醒等</li><li>合包流水线支持其他子工程扩展，有一定通用性</li></ul><h4 id="_3-5-代码规范" tabindex="-1">3.5. 代码规范 <a class="header-anchor" href="#_3-5-代码规范" aria-label="Permalink to &quot;3.5. 代码规范&quot;">​</a></h4><p>样式规范无需变化，至于 <code>Eslint</code> 规范，发布了 <code>eslint-config-light-vue3</code>，更适合 <code>Vue3</code> 项目，并已对齐公司规范。</p><h3 id="_4-业务迁移适配" tabindex="-1">4. 业务迁移适配 <a class="header-anchor" href="#_4-业务迁移适配" aria-label="Permalink to &quot;4. 业务迁移适配&quot;">​</a></h3><p>得益于底层模块的兼容性，业务侧的适配工作相对简单，主要简单介绍下。</p><p>框架级别包括</p><ul><li>入口 <code>main.ts</code> 改写</li><li><code>index.html</code> 适配</li><li><code>manifest.json</code> 增加一行配置</li></ul><p>业务级别的话，主要是语法的改变，可以参考 Vue 官方文档提供的迁移指南。</p><h3 id="_5-未来展望" tabindex="-1">5. 未来展望 <a class="header-anchor" href="#_5-未来展望" aria-label="Permalink to &quot;5. 未来展望&quot;">​</a></h3><p>由于升级 Vue3 带来的包体积、性能提升是巨大的，后面会结合工期、人力，逐渐将持续维护的项目进行 Vue3 的迁移。</p><p>另外，也搭建了 Vue3 的业务组件库，即 Press Next 组件库，后续会持续将其扩大、补充。</p>',49)]))}const _=o(d,[["render",l]]);export{h as __pageData,_ as default};
