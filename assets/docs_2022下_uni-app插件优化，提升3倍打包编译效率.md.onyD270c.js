import{_ as i,c as a,o as n,ag as p}from"./chunks/framework.6d7lLjym.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2022下/uni-app插件优化，提升3倍打包编译效率.md","filePath":"docs/2022下/uni-app插件优化，提升3倍打包编译效率.md","lastUpdated":1746093153000}'),t={name:"docs/2022下/uni-app插件优化，提升3倍打包编译效率.md"};function l(e,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[p(`<h2 id="_1-方案" tabindex="-1">1. 方案 <a class="header-anchor" href="#_1-方案" aria-label="Permalink to &quot;1. 方案&quot;">​</a></h2><p>这里主要是对组件分发插件的优化，之前插件是在<code>compiler.hooks.done</code>这个钩子上进行操作的，包括读取文件、修改引用、写入文件。</p><p>其实可以在其他钩子中操作asset，也就是在输出文件之前就处理好，总结起来就一句话，在内存中操作总比IO快。</p><p>实际编码中，是在<code>compiler.hooks.emit</code>钩子中操作，通过<code>compilation.assets</code>，拿到待输出的资源。</p><p><code>assets</code>是资源的对象，key 是文件相对路径，value 是个对象，有 source/info/size 等属性，其中，source是函数，返回的就是文件内容。</p><p>通过增删改 assets 就可以操作输出资源了。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compiler) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  compiler.hooks.emit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;moveComponentPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">compilation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">assets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> compilation;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      parsedReplaceRefList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      movingComponents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> analyzeComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.options);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyComponents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(assets, movingComponents);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modifyRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(assets, parsedReplaceRefList);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteComponents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(assets, movingComponents);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>类似的，还有其他插件直接操作文件的，都可以改成这种方式。</p><h2 id="_2-效果" tabindex="-1">2. 效果 <a class="header-anchor" href="#_2-效果" aria-label="Permalink to &quot;2. 效果&quot;">​</a></h2><p>如何对比改进前后的打包时间呢？可以写个插件，但更简单的是在执行命令前打印一下时间戳，在执行命令后再打印下时间戳就可以了。</p><p>改进前：</p><ul><li><p>插件执行时间：1661170044696 - 1661169849984 = 194712，约<strong>195s</strong></p></li><li><p>打包总时间：1661170047149 - 1661169773593 = 273556，约<strong>274s</strong></p></li></ul><p>改进后：</p><ul><li><p>插件执行时间：1661169591728 - 1661169589082 = 2646，约<strong>3s</strong></p></li><li><p>打包总时间：1661169594229 - 1661169521873 = 72356，约<strong>72s</strong></p></li></ul><p>对比下，<strong>改进后的插件执行时间减少了192s，打包总时间减少了202s，总体上效率提升了3倍</strong>。</p><p>另外说下，这个改进的其他两个好处：</p><ol><li>可以在本地开发时也使用此插件，不再会因为修改了一行代码而等几分钟</li><li>也可以<code>build:mp</code>和<code>dev:mp</code>两个命令同时运行，不会因为都操作同一处的公共文件而产生异常</li></ol><h2 id="_3-总结" tabindex="-1">3. 总结 <a class="header-anchor" href="#_3-总结" aria-label="Permalink to &quot;3. 总结&quot;">​</a></h2><ol><li>选对操作的钩子，这个例子中是从原来的<code>compiler.hooks.done</code>钩子变成<code>compiler.hooks.emit</code>钩子。</li><li>尽量不要操作编译后产物，这个例子操作的是assets，主要是基本的增删改。</li><li>尽量避免O(N^2)的算法，可以提前处理好数据，降低时间复杂度。</li></ol>`,19)]))}const c=i(t,[["render",l]]);export{E as __pageData,c as default};
