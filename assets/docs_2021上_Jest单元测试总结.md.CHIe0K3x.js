import{_ as a,c as i,o as e,ag as t}from"./chunks/framework.6d7lLjym.js";const d=JSON.parse('{"title":"Jest","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2021上/Jest单元测试总结.md","filePath":"docs/2021上/Jest单元测试总结.md","lastUpdated":1756192482000}'),n={name:"docs/2021上/Jest单元测试总结.md"};function l(h,s,o,r,p,k){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="jest" tabindex="-1">Jest <a class="header-anchor" href="#jest" aria-label="Permalink to &quot;Jest&quot;">​</a></h1><p>介绍下 Jest 近期总结。</p><h2 id="_1-第一周" tabindex="-1">1. 第一周 <a class="header-anchor" href="#_1-第一周" aria-label="Permalink to &quot;1. 第一周&quot;">​</a></h2><h3 id="_1-1-js-修改useragent的方式" tabindex="-1">1.1. js 修改userAgent的方式 <a class="header-anchor" href="#_1-1-js-修改useragent的方式" aria-label="Permalink to &quot;1.1. js 修改userAgent的方式&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator.userAgent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 不管用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navigator, {userAgent: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 报错，不可redefine</span></span></code></pre></div><p>方法：Object.defineProperty()</p><h3 id="_1-2-jest修改location-search报错-not-implemented-navigation-except-hash-changes" tabindex="-1">1.2. jest修改location.search报错 ：Not implemented: navigation (except hash changes) <a class="header-anchor" href="#_1-2-jest修改location-search报错-not-implemented-navigation-except-hash-changes" aria-label="Permalink to &quot;1.2. jest修改location.search报错 ：Not implemented: navigation (except hash changes)&quot;">​</a></h3><p>应该同样采用<code>Object.defineProperty</code>的方式，同理，修改document也用劫持方式。 但可以直接修改hash，即<code>window.location.hash = &#39;&#39;</code></p><h3 id="_1-3-如何模拟settimeout-setinterval-如何测试防抖" tabindex="-1">1.3. 如何模拟setTimeout/setInterval，如何测试防抖？ <a class="header-anchor" href="#_1-3-如何模拟settimeout-setinterval-如何测试防抖" aria-label="Permalink to &quot;1.3. 如何模拟setTimeout/setInterval，如何测试防抖？&quot;">​</a></h3><p>相关API：<code>jest.useFakeTimer();  jest.runAllTimers();  jest.useRealTimers();</code> 还有<code>sinon.useFakeTimer().tick()</code>方式等模拟时间流逝</p><h3 id="_1-4-如何模拟script和image的onload、onerror、onreadystatechange等方法" tabindex="-1">1.4. 如何模拟script和image的onload、onerror、onreadystatechange等方法 <a class="header-anchor" href="#_1-4-如何模拟script和image的onload、onerror、onreadystatechange等方法" aria-label="Permalink to &quot;1.4. 如何模拟script和image的onload、onerror、onreadystatechange等方法&quot;">​</a></h3><p>还是用<code>Obejct.defineProperty</code>的方式，操作对象不同：image是 <code>Image.prototype，script</code>是 <code>HTMLScriptElement.prototype</code>。</p><h3 id="_1-5-测试报告5x、e、i分别是什么意思" tabindex="-1">1.5. 测试报告5x、E、I分别是什么意思？ <a class="header-anchor" href="#_1-5-测试报告5x、e、i分别是什么意思" aria-label="Permalink to &quot;1.5. 测试报告5x、E、I分别是什么意思？&quot;">​</a></h3><ul><li>5x表示在测试中这条语句执行了 5 次；</li><li>E是测试用例没有测试if条件为false时的情况(<code>else path not taken</code>)；</li><li>I是测试用例没有测试if条件为true时的情况(<code>if path not taken</code>)；</li></ul><h2 id="_2-第二周" tabindex="-1">2. 第二周 <a class="header-anchor" href="#_2-第二周" aria-label="Permalink to &quot;2. 第二周&quot;">​</a></h2><h3 id="_2-1-如何测试手机摇动事件" tabindex="-1">2.1. 如何测试手机摇动事件？ <a class="header-anchor" href="#_2-1-如何测试手机摇动事件" aria-label="Permalink to &quot;2.1. 如何测试手机摇动事件？&quot;">​</a></h3><p>方法：用<code>eventEmitter</code>的on事件劫持<code>window.addEventListener</code>，而从可以通过event.emit事件来手动触发</p><h3 id="_2-2-mock用户模块和第三方模块的注意点" tabindex="-1">2.2. mock用户模块和第三方模块的注意点 <a class="header-anchor" href="#_2-2-mock用户模块和第三方模块的注意点" aria-label="Permalink to &quot;2.2. mock用户模块和第三方模块的注意点&quot;">​</a></h3><ol><li>mock用户模块，需要指定，比如<code>jest.mock(&#39;utils/loader&#39;)</code>；</li><li>mock第三方也就是node_modules模块，不需要指定，只需要在node_modules同级目录下新建__mocks__文件夹，包含要mock的模块，比如<code>axios/vant</code></li></ol><h3 id="_2-3-comm库mock了axios-业务库执行单测时-如果有业务库a文件引用了comm库的b文件-而b文件又引用了axios-就会自动使用comm库的mock的axios-且报错信息有误导-不易排查" tabindex="-1">2.3. comm库mock了axios，业务库执行单测时，如果有业务库A文件引用了comm库的B文件，而B文件又引用了axios，就会自动使用comm库的mock的axios，且报错信息有误导，不易排查 <a class="header-anchor" href="#_2-3-comm库mock了axios-业务库执行单测时-如果有业务库a文件引用了comm库的b文件-而b文件又引用了axios-就会自动使用comm库的mock的axios-且报错信息有误导-不易排查" aria-label="Permalink to &quot;2.3. comm库mock了axios，业务库执行单测时，如果有业务库A文件引用了comm库的B文件，而B文件又引用了axios，就会自动使用comm库的mock的axios，且报错信息有误导，不易排查&quot;">​</a></h3><p>方法：业务库的单测中，要手动解除mock，即<code>jest.unmock(&#39;axios&#39;)</code></p><h3 id="_2-4-vuex只有加上namespaced-true后-才能用login-getlogininfo这种形式" tabindex="-1">2.4. vuex只有加上namespaced：true后，才能用login/getLoginInfo这种形式 <a class="header-anchor" href="#_2-4-vuex只有加上namespaced-true后-才能用login-getlogininfo这种形式" aria-label="Permalink to &quot;2.4. vuex只有加上namespaced：true后，才能用login/getLoginInfo这种形式&quot;">​</a></h3><h3 id="_2-5-如何手动触发浏览器的事件-如cilck、touchmove等" tabindex="-1">2.5. 如何手动触发浏览器的事件，如cilck、touchmove等 ？ <a class="header-anchor" href="#_2-5-如何手动触发浏览器的事件-如cilck、touchmove等" aria-label="Permalink to &quot;2.5. 如何手动触发浏览器的事件，如cilck、touchmove等 ？&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> evObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Events&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">evObj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">okBtn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispatchEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(evObj);</span></span></code></pre></div><h3 id="_2-6-object-defineproperty如何定义嵌套结构-比如location-href劫持set" tabindex="-1">2.6. Object.defineProperty如何定义嵌套结构，比如location.href劫持set <a class="header-anchor" href="#_2-6-object-defineproperty如何定义嵌套结构-比如location-href劫持set" aria-label="Permalink to &quot;2.6. Object.defineProperty如何定义嵌套结构，比如location.href劫持set&quot;">​</a></h3><ol><li>先定义location =&gt; <code>Object.defineProperty(window, location, {})</code></li><li>再定义location.href =&gt; <code>Object.defineProperty(location, href, {})</code></li></ol><h2 id="_3-第三周" tabindex="-1">3. 第三周 <a class="header-anchor" href="#_3-第三周" aria-label="Permalink to &quot;3. 第三周&quot;">​</a></h2><h3 id="_3-1-vue-test-utils的setdata不会改变引用地址" tabindex="-1">3.1. vue-test-utils的setData不会改变引用地址 <a class="header-anchor" href="#_3-1-vue-test-utils的setdata不会改变引用地址" aria-label="Permalink to &quot;3.1. vue-test-utils的setData不会改变引用地址&quot;">​</a></h3><p>如果组件内两个变量已经指向了同一地址，setData的方式无法让其不相等，可以用<code>wrapper.vm.tempSelectRole = {}</code>改变值</p><h3 id="_3-2-测试logic的最佳实践" tabindex="-1">3.2. 测试logic的最佳实践 <a class="header-anchor" href="#_3-2-测试logic的最佳实践" aria-label="Permalink to &quot;3.2. 测试logic的最佳实践&quot;">​</a></h3><p>要测试对某接口不同返回结果的处理，mock的网络框架，不要放在__mocks__中，因为接口过多，会让这个文件爆炸，难以维护。</p><p>可以采用<code>jest.mock(&#39;logic/api/post&#39;,() =&gt; ({}))</code>的方式进行动态模拟，把需要模拟的接口返回值、url、times放到一个map中，根据调用次数返回不同结果。</p><p>好处是：</p><ol><li>数据据和逻辑分离，容易维护</li><li>可以抽取、封装公用逻辑</li></ol><p>思路来源于官网API（代码如下），但是此例无法根据参数判断</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myMockFn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mockReturnValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;default&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mockReturnValueOnce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;first call&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mockReturnValueOnce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;second call&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;first call&#39;, &#39;second call&#39;, &#39;default&#39;, &#39;default&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myMockFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myMockFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myMockFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myMockFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><h3 id="_3-3-测试函数抛出异常" tabindex="-1">3.3 测试函数抛出异常 <a class="header-anchor" href="#_3-3-测试函数抛出异常" aria-label="Permalink to &quot;3.3 测试函数抛出异常&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;throws on octopus&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    drinkFlavor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;octopus&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toThrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_3-4-toequal可以对比对象-数组-tobe不可以-一般测试对象的几个属性的话-可以用tomatchobject" tabindex="-1">3.4 toEqual可以对比对象 数组, toBe不可以，一般测试对象的几个属性的话，可以用toMatchObject <a class="header-anchor" href="#_3-4-toequal可以对比对象-数组-tobe不可以-一般测试对象的几个属性的话-可以用tomatchobject" aria-label="Permalink to &quot;3.4 toEqual可以对比对象 数组, toBe不可以，一般测试对象的几个属性的话，可以用toMatchObject&quot;">​</a></h3><p>参考：</p><ol><li><a href="https://www.it1352.com/1068940.html" target="_blank" rel="noreferrer">去抖动功能的Jest单元测试(Jest unit test for a debounce function)</a></li><li><a href="https://www.it1352.com/1472892.html" target="_blank" rel="noreferrer">你如何使用Jest来测试img.onerror(How do you use Jest to test img.onerror)</a></li><li><a href="https://www.cnblogs.com/jiangxiaobo/p/5830200.html" target="_blank" rel="noreferrer">JS中手动触发事件的方法</a></li></ol>`,41)]))}const E=a(n,[["render",l]]);export{d as __pageData,E as default};
