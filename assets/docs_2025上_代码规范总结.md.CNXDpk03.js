import{_ as a,c as t,o as i,ag as l}from"./chunks/framework.6d7lLjym.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2025上/代码规范总结.md","filePath":"docs/2025上/代码规范总结.md","lastUpdated":1746460944000}'),r={name:"docs/2025上/代码规范总结.md"};function o(n,e,p,h,c,s){return i(),t("div",null,e[0]||(e[0]=[l('<h3 id="_1-开始" tabindex="-1">1. 开始 <a class="header-anchor" href="#_1-开始" aria-label="Permalink to &quot;1. 开始&quot;">​</a></h3><p>遵守代码规范是防止项目腐化的第一步。</p><p>同步下当前代码规范检测机制，包括 ESLint 和 StyleLint。</p><h3 id="_2-检测机制" tabindex="-1">2. 检测机制 <a class="header-anchor" href="#_2-检测机制" aria-label="Permalink to &quot;2. 检测机制&quot;">​</a></h3><p>有几道检测代码规范的关卡：</p><ol><li>VSCode 配置的保存后自动修复</li><li>git 提交时的 husky 检测</li><li>发起MR的流水线检查，检测增量部分</li><li>每天定时的全量检测</li></ol><p>前面两种基本是前端共识，后面两种是自建的、独有的。前两种可归为前端工程化，后两种可视为CI建设。</p><h4 id="_2-1-ide-的保存自动格式化" tabindex="-1">2.1. IDE 的保存自动格式化 <a class="header-anchor" href="#_2-1-ide-的保存自动格式化" aria-label="Permalink to &quot;2.1. IDE 的保存自动格式化&quot;">​</a></h4><p>这个只要配置好 <code>.eslintrc.js</code> 和 <code>.vscode/setting.json</code> 即可，旧项目可参考 <a href="https://git.a.com/pmd-mobile/pmd-h5/press-next" target="_blank" rel="noreferrer">press-next</a>、<a href="https://git.a.com/pmd-mobile/match/gp-next" target="_blank" rel="noreferrer">gp-next</a> 等，新项目已配置。配好以后格式问题就基本不用关心。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/3/own_mike_9c61fe2934a5d7ac75.gif" width="500"><p></p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/3/own_mike_4f99c1aae56525cc17.gif" width="500"><h4 id="_2-2-husky-检测" tabindex="-1">2.2. husky 检测 <a class="header-anchor" href="#_2-2-husky-检测" aria-label="Permalink to &quot;2.2. husky 检测&quot;">​</a></h4><p>这个会在提交时检测，有问题的话可阻止提交。旧项目可以参考 <a href="https://git.a.com/pmd-mobile/pmd-h5/press-ui" target="_blank" rel="noreferrer">press-ui</a>、<a href="https://git.a.com/pmd-mobile/pmd-h5/plugin-light" target="_blank" rel="noreferrer">plugin-light</a> 等，新项目已配置。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/3/own_mike_0e4bb7fa13fc8bfe3b.gif" width="520"><h4 id="_2-3-mr时代码规范检测" tabindex="-1">2.3. MR时代码规范检测 <a class="header-anchor" href="#_2-3-mr时代码规范检测" aria-label="Permalink to &quot;2.3. MR时代码规范检测&quot;">​</a></h4><p>前两种检测都可以绕过，也总有些开发者有各种原因不遵守规范问题，这时候就要有工具强检测。</p><p>这里做了一个工具，发起MR时，会进行代码规范的增量检查，有以下特点：</p><ol><li>不用 CodeCC，无需额外花钱</li><li>执行耗时短，1分钟以内，不会阻塞开发人员进度</li><li>出现问题会进行 MR 评论，精确到行</li><li>重新提交会再次检测，直到完全没问题</li><li>同时检测 ESLint 和 StyleLint</li></ol><p>下图是企业微信通知群消息。</p><p>有问题的：</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/3/own_mike_910de86dfa470cfb5c.png" width="500"><p>没问题的：</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/3/own_mike_2d323e200529433f9a.png" width="500"><p>MR 精确到行的评论：</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/3/own_mike_8a94a9c7a168847628.png" width="700"><p>其他项目想接入的话，实例化<a href="https://devops.a.com/console/pipeline/tip-h5/template/50c599e586724d4a9075ab517423f2ce/edit" target="_blank" rel="noreferrer">流水线</a>即可。</p><p>接入前建议先处理好存量问题，接入后项目负责人要做好执行，避免流于形式。</p><h4 id="_2-4-每天全量检测" tabindex="-1">2.4. 每天全量检测 <a class="header-anchor" href="#_2-4-每天全量检测" aria-label="Permalink to &quot;2.4. 每天全量检测&quot;">​</a></h4><p>针对一些核心仓库，加了每天全量检测。也就是前面几个检测你都绕过了，也跑不了这一个。</p><ol><li>同样不用 CodeCC 工具，不用额外花钱。</li><li>同时检测 ESLint 和 StyleLint</li></ol><p>下面是检测结果截图：</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2025/3/own_mike_f3b834ce391fa30b95.png" width="600"><p>其他项目想接入的话，去<a href="https://rainbow.a.com/console/7b1fbda4-dc30-4641-bab2-32e34e6435f1/Default/list?group_id=7274608&amp;group_name=devops_open&amp;tab=config" target="_blank" rel="noreferrer">七彩石</a>配置一下即可。</p><h3 id="_3-eslint-扩展" tabindex="-1">3. ESLint 扩展 <a class="header-anchor" href="#_3-eslint-扩展" aria-label="Permalink to &quot;3. ESLint 扩展&quot;">​</a></h3><h4 id="_3-1-共享配置" tabindex="-1">3.1. 共享配置 <a class="header-anchor" href="#_3-1-共享配置" aria-label="Permalink to &quot;3.1. 共享配置&quot;">​</a></h4><p>公司规范并非开箱即用，还要安装各种依赖，以及针对不对文件类型做不同配置。</p><p>这里封装了两个共享配置，<a href="https://mobile.a.com/plugin-light/zh/eslint-config-light.html" target="_blank" rel="noreferrer">eslint-config-light</a> 和 <a href="https://mobile.a.com/plugin-light/zh/eslint-config-light-vue3.html" target="_blank" rel="noreferrer">eslint-config-light-vue3</a>，前者用于 Vue2.x 和 React 项目，后者用于 Vue3.x 项目，能够做单简单配置 ESLint。 实际上，这两个配置早已应用到团队所有前端项目中了。</p><h4 id="_3-2-自定义规则与插件" tabindex="-1">3.2. 自定义规则与插件 <a class="header-anchor" href="#_3-2-自定义规则与插件" aria-label="Permalink to &quot;3.2. 自定义规则与插件&quot;">​</a></h4><p>针对我们的业务特点，可以封装一些自定义规则，进行前置校验，避免编译错误和线上问题。</p><p><a href="https://mobile.a.com/plugin-light/zh/eslint-plugin-light.html" target="_blank" rel="noreferrer">eslint-plugin-light</a> 就包含了我们项目的一些自定义规则，包括:</p><ol><li><a href="https://mobile.a.com/plugin-light/zh/eslint-plugin-light.html#_3-4-json-parse-try-catch" target="_blank" rel="noreferrer">json-parse-try-catch</a>。<code>JSON.parse</code> 必须加 <code>try catch</code>，这个是最近出现一个线上问题后沉淀的</li><li><a href="https://mobile.a.com/plugin-light/zh/eslint-plugin-light.html#_3-1-light-valid-vue-comp-import" target="_blank" rel="noreferrer">valid-vue-comp-import</a>。禁止从 <code>js</code> 文件中加载 <code>Vue</code> 组件，这个是 uni-app 项目必须要遵守的</li><li><a href="https://mobile.a.com/plugin-light/zh/eslint-plugin-light.html#_3-2-light-no-plus-turn-number" target="_blank" rel="noreferrer">no-plus-turn-number</a>。禁止在 <code>vue</code> 的 <code>template</code> 中用 <code>+</code> 号转换字符串为数字，uni-app 项目不支持</li><li><a href="https://mobile.a.com/plugin-light/zh/eslint-plugin-light.html#_3-3-no-complex-key" target="_blank" rel="noreferrer">no-complex-key</a>。不要在 <code>vue</code> 模板中使用复杂的 <code>key</code></li></ol><p>理解规则的本质，理解为什么要用这条规则，是简化代码、还是仅仅为了统一？</p><h3 id="_4-作用" tabindex="-1">4. 作用 <a class="header-anchor" href="#_4-作用" aria-label="Permalink to &quot;4. 作用&quot;">​</a></h3><p>遵守代码规范可以减少低级错误，提升代码可读性，增强可维护性，促进团队协作，减少团队成员间的理解分歧，避免格式冲突，最终提升开发效率、减少线上事故。</p><p>不遵守代码规范的项目，一定会变成屎山。屎山项目开发效率巨低，bug 数急增，做过的人会体会更深。这种项目一般两个结局，一是苟延残喘、负责人不敢动，二是重构，不论哪种，成本都很高。</p>',46)]))}const g=a(r,[["render",o]]);export{m as __pageData,g as default};
