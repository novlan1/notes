import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.6d7lLjym.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2023下/npm包漏洞探究.md","filePath":"docs/2023下/npm包漏洞探究.md","lastUpdated":1746460944000}'),h={name:"docs/2023下/npm包漏洞探究.md"};function l(n,s,r,p,k,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h2 id="_1-开始" tabindex="-1">1. 开始 <a class="header-anchor" href="#_1-开始" aria-label="Permalink to &quot;1. 开始&quot;">​</a></h2><p>经常看见一些地方说某些npm包存在漏洞，具体是哪里有漏洞呢，会危害到哪方面呢，是以什么方式造成的呢？</p><p>我十分好奇，决定一探究竟，本文用来记录npm包漏洞的内部原因，会持续更新。</p><h2 id="_2-glob-parent" tabindex="-1">2. glob-parent <a class="header-anchor" href="#_2-glob-parent" aria-label="Permalink to &quot;2. glob-parent&quot;">​</a></h2><p>这个包的作用是在glob表达式中，提取非魔法字符串的部分，比如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globParent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;glob-parent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path/to/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;path/to&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/root/path/to/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;/root/path/to&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;/&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;.&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;**/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;.&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path/{to,from}&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;path&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">globParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path/!(to|from)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;path&#39;</span></span></code></pre></div><p>这个包被<code>webpack-dev-server</code>、<code>chokidar</code>、<code>eslint</code>等流行库使用。</p><p>该库在<code>&lt;5.1.2</code>前有ReDos(Denial of service)攻击风险，个人理解就是会让执行变慢，攻击者可以使用特殊文件或字符，使服务器不能正常工作。</p><p>漏洞前的代码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> enclosure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\{\\[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">].</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\}\\]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>修复后的代码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> enclosure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\{\\[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">].</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\}\\]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>如何检测呢，如果下面的测试用例超时，则说明存在ReDoc风险。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;should not be susceptible to SNYK-JS-GLOBPARENT-1016905&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // This will time out if susceptible.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  gp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>根本原因是正则的回溯原理，也就是<code>.*</code>已经包含了<code>[\\/]*</code>，没必要再用<code>[\\/]*.*</code>了，具体的执行步骤差异不是成倍，而是指数级的。</p><p>可以用<a href="https://regex101.com/" target="_blank" rel="noreferrer">这个网站</a>查看两个正则解析的性能差异，上面的测试用例，修复前执行时间超过<code>2s</code>，修复后执行只需要<code>0.8ms</code>。</p><p>下面是一些思考，其实我们自己写代码时，也有可能写出性能极差的正则，但是并不会被漏洞检测机构收录，可能是因为我们写的库用途不广，并不是基础库，没有被大型项目使用。</p><p>参考:</p><ul><li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-28469" target="_blank" rel="noreferrer">https://nvd.nist.gov/vuln/detail/CVE-2020-28469</a></li><li><a href="https://security.snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905" target="_blank" rel="noreferrer">https://security.snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905</a></li><li><a href="https://regex101.com/" target="_blank" rel="noreferrer">https://regex101.com/</a></li><li><a href="https://github.com/gulpjs/glob-parent/issues/32" target="_blank" rel="noreferrer">https://github.com/gulpjs/glob-parent/issues/32</a></li><li><a href="https://github.com/gulpjs/glob-parent/pull/36/commits/c6db86422a9731d4f3d332ce4a81c27ea6b0ee46" target="_blank" rel="noreferrer">https://github.com/gulpjs/glob-parent/pull/36/commits/c6db86422a9731d4f3d332ce4a81c27ea6b0ee46</a></li></ul><h2 id="_3-xlsx" tabindex="-1">3. xlsx <a class="header-anchor" href="#_3-xlsx" aria-label="Permalink to &quot;3. xlsx&quot;">​</a></h2><p>这个包<code>&lt;0.19.3</code>的版本都有原型污染的漏洞，另外这个库已经不在<code>github</code>和<code>npm</code>上更新了，需要这样更新：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm i https://cdn.sheetjs.com/xlsx-0.19.3/xlsx-0.19.3.tgz</span></span></code></pre></div><p>看了下代码，并没有找到相关的漏洞修复提交记录，不知道是不是换了个源，人们就认为它修复了呢？</p><p>参考:</p><ul><li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30533" target="_blank" rel="noreferrer">https://nvd.nist.gov/vuln/detail/CVE-2023-30533</a></li><li><a href="https://cdn.sheetjs.com/advisories/CVE-2023-30533" target="_blank" rel="noreferrer">https://cdn.sheetjs.com/advisories/CVE-2023-30533</a></li><li><a href="https://git.sheetjs.com/sheetjs/sheetjs/src/branch/master/CHANGELOG.md" target="_blank" rel="noreferrer">https://git.sheetjs.com/sheetjs/sheetjs/src/branch/master/CHANGELOG.md</a></li><li><a href="https://git.sheetjs.com/sheetjs/sheetjs/issues/2667" target="_blank" rel="noreferrer">https://git.sheetjs.com/sheetjs/sheetjs/issues/2667</a></li><li><a href="https://github.com/advisories/GHSA-4r6h-8v6p-xvw6" target="_blank" rel="noreferrer">https://github.com/advisories/GHSA-4r6h-8v6p-xvw6</a></li><li><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html" target="_blank" rel="noreferrer">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html</a></li></ul><h2 id="_4-file-type" tabindex="-1">4. file-type <a class="header-anchor" href="#_4-file-type" aria-label="Permalink to &quot;4. file-type&quot;">​</a></h2><p>这个包也是会引起Dos攻击，原因是读取 MKV 文件的时候处理不当，会造成无限循环。</p><p>有问题的版本为<code>&gt;= 17.0.0, &lt; 17.1.3</code>和<code>&gt;= 13.0.0, &lt; 16.5.4</code>，修复的版本为<code>17.1.3</code>和<code>16.5.4</code>。</p><p>参考：</p><ul><li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36313" target="_blank" rel="noreferrer">https://nvd.nist.gov/vuln/detail/CVE-2022-36313</a></li><li><a href="https://github.com/sindresorhus/file-type/releases/tag/v16.5.4" target="_blank" rel="noreferrer">https://github.com/sindresorhus/file-type/releases/tag/v16.5.4</a></li><li><a href="https://github.com/sindresorhus/file-type/releases/tag/v17.1.3" target="_blank" rel="noreferrer">https://github.com/sindresorhus/file-type/releases/tag/v17.1.3</a></li><li><a href="https://www.npmjs.com/package/file-type" target="_blank" rel="noreferrer">https://www.npmjs.com/package/file-type</a></li><li><a href="https://github.com/sindresorhus/file-type/commit/2c4d1200c99dffb7d515b9b9951ef43c22bf7e47" target="_blank" rel="noreferrer">https://github.com/sindresorhus/file-type/commit/2c4d1200c99dffb7d515b9b9951ef43c22bf7e47</a></li><li><a href="https://github.com/sindresorhus/file-type/commit/d86835680f4cccbee1a60628783c36700ec9e254" target="_blank" rel="noreferrer">https://github.com/sindresorhus/file-type/commit/d86835680f4cccbee1a60628783c36700ec9e254</a></li><li><a href="https://github.com/sindresorhus/file-type/commit/8f981c32e2750d2516457e305e502ee2ad715759#diff-c853b2249e99790d8725774cf63c90c5ab17112067df6e267f3701d7bf591d12" target="_blank" rel="noreferrer">https://github.com/sindresorhus/file-type/commit/8f981c32e2750d2516457e305e502ee2ad715759#diff-c853b2249e99790d8725774cf63c90c5ab17112067df6e267f3701d7bf591d12</a></li><li><a href="https://github.com/sindresorhus/file-type/compare/v12.4.2...v13.0.0#diff-c853b2249e99790d8725774cf63c90c5ab17112067df6e267f3701d7bf591d12R611-R613" target="_blank" rel="noreferrer">https://github.com/sindresorhus/file-type/compare/v12.4.2...v13.0.0#diff-c853b2249e99790d8725774cf63c90c5ab17112067df6e267f3701d7bf591d12R611-R613</a></li><li><a href="https://security.snyk.io/vuln/SNYK-JS-FILETYPE-2958042" target="_blank" rel="noreferrer">https://security.snyk.io/vuln/SNYK-JS-FILETYPE-2958042</a></li><li><a href="https://security.netapp.com/advisory/ntap-20220909-0005/" target="_blank" rel="noreferrer">https://security.netapp.com/advisory/ntap-20220909-0005/</a></li><li><a href="https://github.com/advisories/GHSA-mhxj-85r3-2x55" target="_blank" rel="noreferrer">https://github.com/advisories/GHSA-mhxj-85r3-2x55</a></li></ul><h2 id="_5-ejs" tabindex="-1">5. ejs <a class="header-anchor" href="#_5-ejs" aria-label="Permalink to &quot;5. ejs&quot;">​</a></h2><p>ejs是个模版解析工具，被express等库使用。</p><p>首先它本身是个javascript运行时工具，开发者需要自己对数据进行校验后再进行下一步处理或输出，不能这样：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> express</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;express&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> express</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;views&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, __dirname);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;view engine&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ejs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, req.query);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Server is running on \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PORT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>有关ejs本身的漏洞是这样的，在query中的参数没被过滤，可以直接运行，造成RCE（远程代码执行<code>remote command/code execute</code>）攻击。</p><p>有问题的版本为<code>&lt; 3.1.7</code>，修复的版本为<code>&gt;= 3.1.7</code>。</p><p>参考：</p><ul><li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29078" target="_blank" rel="noreferrer">https://nvd.nist.gov/vuln/detail/CVE-2022-29078</a></li><li><a href="https://eslam.io/posts/ejs-server-side-template-injection-rce/" target="_blank" rel="noreferrer">https://eslam.io/posts/ejs-server-side-template-injection-rce/</a></li><li><a href="https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf" target="_blank" rel="noreferrer">https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf</a></li><li><a href="https://github.com/mde/ejs/releases" target="_blank" rel="noreferrer">https://github.com/mde/ejs/releases</a></li><li><a href="https://security.netapp.com/advisory/ntap-20220804-0001/" target="_blank" rel="noreferrer">https://security.netapp.com/advisory/ntap-20220804-0001/</a></li><li><a href="https://github.com/advisories/GHSA-phwq-j96m-2c2q" target="_blank" rel="noreferrer">https://github.com/advisories/GHSA-phwq-j96m-2c2q</a></li></ul><h2 id="_6-qs" tabindex="-1">6. qs <a class="header-anchor" href="#_6-qs" aria-label="Permalink to &quot;6. qs&quot;">​</a></h2><p>qs是字符串解析库，使用非常广泛。</p><p>关于它的一个漏洞也是原型污染类的，因为它可以用来解析对象，解决办法也很简单，就是过滤<code>__proto__</code>属性即可。</p><table tabindex="0"><thead><tr><th>影响版本</th><th>修复版本</th></tr></thead><tbody><tr><td>&gt;= 6.10.0, &lt; 6.10.3</td><td>6.10.3</td></tr><tr><td>&gt;= 6.9.0, &lt; 6.9.7</td><td>6.9.7</td></tr><tr><td>&gt;= 6.8.0, &lt; 6.8.3</td><td>6.8.3</td></tr><tr><td>&gt;= 6.7.0, &lt; 6.7.3</td><td>6.7.3</td></tr><tr><td>&gt;= 6.6.0, &lt; 6.6.1</td><td>6.6.1</td></tr><tr><td>&gt;= 6.5.0, &lt; 6.5.3</td><td>6.5.3</td></tr><tr><td>&gt;= 6.4.0, &lt; 6.4.1</td><td>6.4.1</td></tr><tr><td>&gt;= 6.3.0, &lt; 6.3.3</td><td>6.3.3</td></tr><tr><td>&lt; 6.2.4</td><td>6.2.4</td></tr></tbody></table><p>参考：</p><ul><li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24999" target="_blank" rel="noreferrer">https://nvd.nist.gov/vuln/detail/CVE-2022-24999</a></li><li><a href="https://github.com/ljharb/qs/pull/428" target="_blank" rel="noreferrer">https://github.com/ljharb/qs/pull/428</a></li><li><a href="https://github.com/n8tz/CVE-2022-24999" target="_blank" rel="noreferrer">https://github.com/n8tz/CVE-2022-24999</a></li><li><a href="https://github.com/ljharb/qs/commit/4310742efbd8c03f6495f07906b45213da0a32ec" target="_blank" rel="noreferrer">https://github.com/ljharb/qs/commit/4310742efbd8c03f6495f07906b45213da0a32ec</a></li><li><a href="https://github.com/ljharb/qs/commit/727ef5d34605108acb3513f72d5435972ed15b68" target="_blank" rel="noreferrer">https://github.com/ljharb/qs/commit/727ef5d34605108acb3513f72d5435972ed15b68</a></li><li><a href="https://github.com/ljharb/qs/commit/73205259936317b40f447c5cdb71c5b341848e1b" target="_blank" rel="noreferrer">https://github.com/ljharb/qs/commit/73205259936317b40f447c5cdb71c5b341848e1b</a></li><li><a href="https://github.com/ljharb/qs/commit/8b4cc14cda94a5c89341b77e5fe435ec6c41be2d" target="_blank" rel="noreferrer">https://github.com/ljharb/qs/commit/8b4cc14cda94a5c89341b77e5fe435ec6c41be2d</a></li><li><a href="https://github.com/ljharb/qs/commit/ba24e74dd17931f825adb52f5633e48293b584e1" target="_blank" rel="noreferrer">https://github.com/ljharb/qs/commit/ba24e74dd17931f825adb52f5633e48293b584e1</a></li><li><a href="https://github.com/ljharb/qs/commit/e799ba57e573a30c14b67c1889c7c04d508b9105" target="_blank" rel="noreferrer">https://github.com/ljharb/qs/commit/e799ba57e573a30c14b67c1889c7c04d508b9105</a></li><li><a href="https://github.com/ljharb/qs/commit/ed0f5dcbef4b168a8ae299d78b1e4a2e9b1baf1f" target="_blank" rel="noreferrer">https://github.com/ljharb/qs/commit/ed0f5dcbef4b168a8ae299d78b1e4a2e9b1baf1f</a></li><li><a href="https://github.com/ljharb/qs/commit/f945393cfe442fe8c6e62b4156fd35452c0686ee" target="_blank" rel="noreferrer">https://github.com/ljharb/qs/commit/f945393cfe442fe8c6e62b4156fd35452c0686ee</a></li><li><a href="https://github.com/ljharb/qs/commit/fc3682776670524a42e19709ec4a8138d0d7afda" target="_blank" rel="noreferrer">https://github.com/ljharb/qs/commit/fc3682776670524a42e19709ec4a8138d0d7afda</a></li><li><a href="https://github.com/expressjs/express/releases/tag/4.17.3" target="_blank" rel="noreferrer">https://github.com/expressjs/express/releases/tag/4.17.3</a></li><li><a href="https://lists.debian.org/debian-lts-announce/2023/01/msg00039.html" target="_blank" rel="noreferrer">https://lists.debian.org/debian-lts-announce/2023/01/msg00039.html</a></li><li><a href="https://github.com/advisories/GHSA-hrpp-h998-j3pp" target="_blank" rel="noreferrer">https://github.com/advisories/GHSA-hrpp-h998-j3pp</a></li></ul><p>----- 2024.12.19 更新 ------</p><h2 id="_7-vant" tabindex="-1">7. vant <a class="header-anchor" href="#_7-vant" aria-label="Permalink to &quot;7. vant&quot;">​</a></h2><p>亲身经历。</p><p>有发布权限的人发布了 <a href="https://www.npmjs.com/package/vant/v/2.13.5" target="_blank" rel="noreferrer">vant@2.13.5</a>，带了一个恶意程序 <code>lib/utils/support.js</code>，并增加了 <code>postinstall</code> 脚本命令，用户安装<code>vant</code>后，就会自动执行这个文件，然后在构建机挖矿。</p><p>影响范围：<code>vant</code> 被投毒后、未删之前期间，<code>package.json</code> 未锁定版本，从 <code>npm</code> 官方源下载 <code>vant</code> 的用户。</p><p>解决办法：</p><ol><li>官方删除有问题版本（已删除）</li><li>构建机重装</li><li>锁定版本号，避免出现类似问题</li></ol><p>相关链接：<a href="https://github.com/youzan/vant/discussions/13273" target="_blank" rel="noreferrer">https://github.com/youzan/vant/discussions/13273</a></p>`,52)]))}const g=i(h,[["render",l]]);export{c as __pageData,g as default};
