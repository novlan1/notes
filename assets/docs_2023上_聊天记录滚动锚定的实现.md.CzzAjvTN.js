import{_ as a,c as e,o as i,ag as l}from"./chunks/framework.6d7lLjym.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2023上/聊天记录滚动锚定的实现.md","filePath":"docs/2023上/聊天记录滚动锚定的实现.md","lastUpdated":1745423492000}'),n={name:"docs/2023上/聊天记录滚动锚定的实现.md"};function t(o,s,h,p,r,d){return i(),e("div",null,s[0]||(s[0]=[l(`<h2 id="_1-开始" tabindex="-1">1. 开始 <a class="header-anchor" href="#_1-开始" aria-label="Permalink to &quot;1. 开始&quot;">​</a></h2><p>有个项目需要用到IM聊天功能，在向上翻更多聊天记录时，需要将位置固定，也就是加载更多时不要滚动到顶部，也不要跳动、抖动。</p><p>尝试了n种方法，终于可以了，这里记录下。</p><h2 id="_2-尝试方案" tabindex="-1">2. 尝试方案 <a class="header-anchor" href="#_2-尝试方案" aria-label="Permalink to &quot;2. 尝试方案&quot;">​</a></h2><h3 id="_2-1-overflow-anchor" tabindex="-1">2.1. <code>overflow-anchor</code> <a class="header-anchor" href="#_2-1-overflow-anchor" aria-label="Permalink to &quot;2.1. \`overflow-anchor\`&quot;">​</a></h3><p>尝试用<code>css</code>自带属性<code>overflow-anchor: auto</code>解决这一问题，但是它的兼容性太差了，在<code>chrome</code>、开发者工具中调试的效果可以，但是真机小程序、H5都不行。</p><p>此外，这一属性需要<code>scrollTop</code>不能为<code>0</code>，也就是在插入数据之前检查下<code>scrollTop</code>，如果为<code>0</code>，则调用API让<code>scroll-view</code>向下滚动一点。</p><h3 id="_2-2-赋值前将scrolly设置为false" tabindex="-1">2.2. 赋值前将<code>scrollY</code>设置为<code>false</code> <a class="header-anchor" href="#_2-2-赋值前将scrolly设置为false" aria-label="Permalink to &quot;2.2. 赋值前将\`scrollY\`设置为\`false\`&quot;">​</a></h3><p>这种方式是想在<code>list</code>添加前将<code>scroll-view</code>固定，然后在前面插入数据，想法是挺好的，但是一插入数据，<code>scroll-view</code>还是滚动到了顶部，也就是<code>scroll-view</code>内部是让<code>scroll-top</code>在插入数据前后不变。</p><h3 id="_2-3-赋值后立即设置scrolltop" tabindex="-1">2.3. 赋值后立即设置<code>scrollTop</code> <a class="header-anchor" href="#_2-3-赋值后立即设置scrolltop" aria-label="Permalink to &quot;2.3. 赋值后立即设置\`scrollTop\`&quot;">​</a></h3><p>这种方式是想在数据插入后立即滚动到原来的位置，H5是没问题的，小程序不可以，因为小程序设置<code>scrollTop</code>是异步的，<code>list</code>一旦赋值，并传递到渲染层就渲染了，这时候再改变<code>scrollTop</code>，或设置<code>scrollInfoView</code>会导致页面抖动。</p><h3 id="_2-4-赋值后立即调用scrollinfoview" tabindex="-1">2.4. 赋值后立即调用<code>scrollInfoView</code> <a class="header-anchor" href="#_2-4-赋值后立即调用scrollinfoview" aria-label="Permalink to &quot;2.4. 赋值后立即调用\`scrollInfoView\`&quot;">​</a></h3><p>无效的原因与上相同。</p><h2 id="_3-解决方法" tabindex="-1">3. 解决方法 <a class="header-anchor" href="#_3-解决方法" aria-label="Permalink to &quot;3. 解决方法&quot;">​</a></h2><h3 id="_3-1-scroll-view倒置" tabindex="-1">3.1. <code>scroll-view</code>倒置 <a class="header-anchor" href="#_3-1-scroll-view倒置" aria-label="Permalink to &quot;3.1. \`scroll-view\`倒置&quot;">​</a></h3><p>采用的是<code>scroll-view</code>倒置，列表数据也倒置，这样每次加载下一页，可以当成是普通<code>list</code>的<code>loadMore</code>，从而解决跳动的问题。</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.press-message-detail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">180</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">deg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .press-message-item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rotate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">180</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">deg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>调用者无需关心<code>list</code>的翻转，由组件内部处理：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  computed: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    reversedList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.list,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-2-隐藏scrollbar" tabindex="-1">3.2. 隐藏<code>scrollbar</code> <a class="header-anchor" href="#_3-2-隐藏scrollbar" aria-label="Permalink to &quot;3.2. 隐藏\`scrollbar\`&quot;">​</a></h3><p>同时要注意隐藏<code>scrollbar</code>，因为<code>scrollbar</code>此时跑到了左边。用下面的方式在小程序中无效，采用的是Dom覆盖的方式。</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::-webkit-scrollbar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transparent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-3-数据少的情况" tabindex="-1">3.3. 数据少的情况 <a class="header-anchor" href="#_3-3-数据少的情况" aria-label="Permalink to &quot;3.3. 数据少的情况&quot;">​</a></h3><p>此外，当聊天内容不足一屏时，消息是堆在下面的，因为<code>scroll-view</code>被倒置了。</p><p>解决方案是，设置一个<code>placeholder</code>的<code>dom</code>，设置为<code>flex:1</code>，让它和消息内容共享父容器的高度。</p><h2 id="_4-体验地址" tabindex="-1">4. 体验地址 <a class="header-anchor" href="#_4-体验地址" aria-label="Permalink to &quot;4. 体验地址&quot;">​</a></h2><p>目前在<a href="https://novlan1.github.io/press-ui/components/press/press-message-detail.html" target="_blank" rel="noreferrer">press-ui</a>示例项目中可以<a href="https://novlan1.github.io/press-ui-demo/#/pages/press/message-detail/message-detail?v=1687599337822&amp;lang=zh-CN" target="_blank" rel="noreferrer">查看效果</a>，三端（H5、微信小程序、QQ小程序）表现一致。</p><p>另外，欢迎使用<code>press-ui</code>跨端组件库。</p><img src="https://mike-1255355338.cos.ap-guangzhou.myqcloud.com/article/2023/6/im-anchor.gif" width="350"><h2 id="_5-资料" tabindex="-1">5. 资料 <a class="header-anchor" href="#_5-资料" aria-label="Permalink to &quot;5. 资料&quot;">​</a></h2><p>网上被这一问题困扰的人还挺多的，这是我查阅资料时看到的一部分：</p><ol><li><a href="https://developers.weixin.qq.com/community/develop/doc/0008e80a748c98a7dc49645fa51800" target="_blank" rel="noreferrer">https://developers.weixin.qq.com/community/develop/doc/0008e80a748c98a7dc49645fa51800</a></li><li><a href="https://developers.weixin.qq.com/community/develop/doc/0006aa1bedcb18b6a148381db5b800" target="_blank" rel="noreferrer">https://developers.weixin.qq.com/community/develop/doc/0006aa1bedcb18b6a148381db5b800</a></li><li><a href="https://developers.weixin.qq.com/community/develop/doc/0002eaf87a0ac04bfeb9eebca51400" target="_blank" rel="noreferrer">https://developers.weixin.qq.com/community/develop/doc/0002eaf87a0ac04bfeb9eebca51400</a></li><li><a href="https://developers.weixin.qq.com/community/develop/doc/000e4e0bc606f0c0f7568723051c00" target="_blank" rel="noreferrer">https://developers.weixin.qq.com/community/develop/doc/000e4e0bc606f0c0f7568723051c00</a></li><li><a href="https://developers.weixin.qq.com/community/develop/doc/000ae43bd30e088b2adc6dc2d51c00" target="_blank" rel="noreferrer">https://developers.weixin.qq.com/community/develop/doc/000ae43bd30e088b2adc6dc2d51c00</a></li><li><a href="https://developers.weixin.qq.com/community/develop/doc/000e62f2ad48a09ed8ea57e185b000" target="_blank" rel="noreferrer">https://developers.weixin.qq.com/community/develop/doc/000e62f2ad48a09ed8ea57e185b000</a></li></ol>`,32)]))}const E=a(n,[["render",t]]);export{k as __pageData,E as default};
