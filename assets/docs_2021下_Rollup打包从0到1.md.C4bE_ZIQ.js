import{_ as e,c as a,o as l,ag as i}from"./chunks/framework.6d7lLjym.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/2021下/Rollup打包从0到1.md","filePath":"docs/2021下/Rollup打包从0到1.md","lastUpdated":1754011929000}'),n={name:"docs/2021下/Rollup打包从0到1.md"};function p(o,s,t,r,h,d){return l(),a("div",null,s[0]||(s[0]=[i(`<h2 id="一、开始" tabindex="-1">一、开始 <a class="header-anchor" href="#一、开始" aria-label="Permalink to &quot;一、开始&quot;">​</a></h2><p><a href="https://rollupjs.org/guide/zh/" target="_blank" rel="noreferrer">Rollup</a> 是一个<code>JavaScript</code>模块打包器，其使用<code>ES6</code>规则进行打包，天然具有<code>tree-shaking</code>特性，且体积轻巧，打包后文件可读性高。<code>Vue</code>、<code>Vue Router</code>、<code>Vuex</code>等库均使用<code>Rollup</code>打包。</p><p>下面从一个简单的例子开始，<a href="https://github.com/novlan1/rollup-intro" target="_blank" rel="noreferrer">代码地址在这里</a>。</p><p>新建一个项目，在<code>src/index.js</code>中随便写点内容：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;How are you?&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>安装<code>rollup</code>，然后执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rollup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/index.js</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> umd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dist/bundle.js</span></span></code></pre></div><p>在<code>dist/bundle.js</code>中即可查看到打包后的文件。</p><h2 id="二、命令行参数" tabindex="-1">二、命令行参数 <a class="header-anchor" href="#二、命令行参数" aria-label="Permalink to &quot;二、命令行参数&quot;">​</a></h2><p>下面是<code>rollup</code>常用的命令行的参数：</p><ul><li><code>-f</code>。<code>--format</code>的缩写，它表示生成代码的格式，取值有<code>amd</code>、<code>cjs</code>、<code>system</code>、<code>esm</code>、<code>iife</code>、<code>umd</code>。关于打包方式的差异可以<a href="https://github.com/novlan1/technical-blog/issues/121" target="_blank" rel="noreferrer">参考这里</a>。</li><li><code>-o</code>。<code>-o</code>指定了输出的路径，比如上面的<code>dist/bundle.js</code></li><li><code>-c</code>。指定<code>rollup</code>的配置文件。默认为<code>rollup.config.js</code></li><li><code>-w</code>。监听源文件是否有改动，如果有改动，重新打包。</li><li><code>-n</code>。<code>--name</code>的缩写，是打包后的模块名称，同一页面的其他脚本可以访问它。也可以在配置文件的<code>output.name</code>中定义</li></ul><h2 id="三、配置文件" tabindex="-1">三、配置文件 <a class="header-anchor" href="#三、配置文件" aria-label="Permalink to &quot;三、配置文件&quot;">​</a></h2><p>新建文件<code>rollup.config.js</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  input: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    file: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/bundle.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;umd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myBundle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  external: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li><code>input</code>表示入口文件的路径（老版本为<code>entry</code>，已经废弃）</li><li><code>output</code>表示输出文件的内容，它允许传入一个对象或一个数组，当为数组时，依次输出多个文件，它包含以下内容： <ul><li><code>output.file</code>：输出文件的路径（老版本为<code>dest</code>，已经废弃）</li><li><code>output.format</code>：输出文件的格式</li><li><code>output.banner</code>：文件头部添加的内容</li><li><code>output.footer</code>：文件末尾添加的内容</li></ul></li><li><code>external</code>打包时要排除掉的模块</li></ul><h2 id="四、插件" tabindex="-1">四、插件 <a class="header-anchor" href="#四、插件" aria-label="Permalink to &quot;四、插件&quot;">​</a></h2><p><code>Rollup</code>只提供了最核心的打包功能，很多其他功能需要插件实现。</p><h3 id="_1-rollup-plugin-node-resolve" tabindex="-1">1. <a href="https://www.npmjs.com/package/@rollup/plugin-node-resolve" target="_blank" rel="noreferrer">@rollup/plugin-node-resolve</a> <a class="header-anchor" href="#_1-rollup-plugin-node-resolve" aria-label="Permalink to &quot;1. [@rollup/plugin-node-resolve](https://www.npmjs.com/package/@rollup/plugin-node-resolve)&quot;">​</a></h3><p><code>Rollup</code>不识别<code>node_modules</code>的模块引入，比如<code>import answer from &quot;the-answer&quot;</code>，所以需要resove插件解决。</p><h3 id="_2-rollup-plugin-commonjs" tabindex="-1">2. <a href="https://www.npmjs.com/package/@rollup/plugin-commonjs" target="_blank" rel="noreferrer">@rollup/plugin-commonjs</a> <a class="header-anchor" href="#_2-rollup-plugin-commonjs" aria-label="Permalink to &quot;2. [@rollup/plugin-commonjs](https://www.npmjs.com/package/@rollup/plugin-commonjs)&quot;">​</a></h3><p>rollup打包时只支持ES6的模块导入导出方式，即<code>export/import</code>，对于<code>CommonJS</code>方式导出的包，需要使用<code>@rollup/plugin-commonjs</code>解决。</p><h3 id="_3-rollup-plugin-babel" tabindex="-1">3. <a href="https://www.npmjs.com/package/@rollup/plugin-babel" target="_blank" rel="noreferrer">@rollup/plugin-babel</a> <a class="header-anchor" href="#_3-rollup-plugin-babel" aria-label="Permalink to &quot;3. [@rollup/plugin-babel](https://www.npmjs.com/package/@rollup/plugin-babel)&quot;">​</a></h3><p>目前很多浏览器不完全支持ES6，所以需要将项目中的<code>ES6</code>语法转为<code>ES5</code>，这就用到了<code>babel</code>插件。</p><p>注意要同时配置<code>.babelrc</code>文件，并且安装<code>@babel/core</code>和<code>@babel/preset-env</code>插件。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;presets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;@babel/preset-env&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;modules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-rollup-plugin-json" tabindex="-1">4. <a href="https://www.npmjs.com/package/@rollup/plugin-json" target="_blank" rel="noreferrer">@rollup/plugin-json</a> <a class="header-anchor" href="#_4-rollup-plugin-json" aria-label="Permalink to &quot;4. [@rollup/plugin-json](https://www.npmjs.com/package/@rollup/plugin-json)&quot;">​</a></h3><p>使用<code>json</code>插件可以在代码中直接引用<code>json</code>文件，比如</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../package.json&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(json.name)</span></span></code></pre></div><h3 id="_5-rollup-plugin-terser" tabindex="-1">5. <a href="https://www.npmjs.com/package/rollup-plugin-terser" target="_blank" rel="noreferrer">rollup-plugin-terser</a> <a class="header-anchor" href="#_5-rollup-plugin-terser" aria-label="Permalink to &quot;5. [rollup-plugin-terser](https://www.npmjs.com/package/rollup-plugin-terser)&quot;">​</a></h3><p>该插件可以压缩打包文件。</p><h3 id="_6-rollup-plugin-replace" tabindex="-1">6. <a href="https://www.npmjs.com/package/rollup-plugin-replace" target="_blank" rel="noreferrer">rollup-plugin-replace</a> <a class="header-anchor" href="#_6-rollup-plugin-replace" aria-label="Permalink to &quot;6. [rollup-plugin-replace](https://www.npmjs.com/package/rollup-plugin-replace)&quot;">​</a></h3><p>该插件用来替换变量：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> replace </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@rollup/plugin-replace&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    preventAssignment: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    values: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      __VERSION__: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pkg.version),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span></code></pre></div><p>为了防止替换过程中，将<code>something=false</code>替换成<code>false=false</code>，引发错误的问题，可以将<code>preventAssignment</code>设置为<code>true</code>。</p><h2 id="五、demo地址" tabindex="-1">五、Demo地址 <a class="header-anchor" href="#五、demo地址" aria-label="Permalink to &quot;五、Demo地址&quot;">​</a></h2><p>这里有个简单的<a href="https://github.com/novlan1/rollup-intro" target="_blank" rel="noreferrer">例子</a>，你可以<code>clone</code>下来，然后执行<code>npm install</code>、<code>npm run build</code>查看打包结果。</p><p>该<a href="https://github.com/novlan1/rollup-intro" target="_blank" rel="noreferrer">项目</a>中还包含了一些自定义<a href="https://rollupjs.org/guide/en/#plugin-development" target="_blank" rel="noreferrer">插件</a>。</p><h2 id="六、rollup原理" tabindex="-1">六、Rollup原理 <a class="header-anchor" href="#六、rollup原理" aria-label="Permalink to &quot;六、Rollup原理&quot;">​</a></h2><p><code>Rollup</code>分为<code>build</code>（构建）阶段和<code>output generate</code>（输出生成）阶段。主要过程如下：</p><ul><li>获取入口文件的内容，包装成<code>module</code>，生成抽象语法树</li><li>对入口文件抽象语法树进行依赖解析</li><li>生成最终代码</li><li>写入目标文件</li></ul><img src="http://doc.uwayfly.com/rollup-code-structure.png" width="800"><h2 id="七、rollup与webpack" tabindex="-1">七、Rollup与Webpack <a class="header-anchor" href="#七、rollup与webpack" aria-label="Permalink to &quot;七、Rollup与Webpack&quot;">​</a></h2><p><code>Rollup</code>优势：</p><ul><li>基于<code>ES6</code>，支持<code>tree shaking</code></li><li>冗余代码少，执行快</li><li>打包结果依然完全可读</li></ul><p><code>Rollup</code>缺陷：</p><ul><li>不支持热更新</li><li>对于<code>commonjs</code>模块，需要用插件读成<code>ES6</code>代码后再处理</li><li><code>umd</code>和<code>iife</code>格式无法对公共代码进行拆分，因为自执行函数会把所有的模块都放到一个函数中，并没有像<code>webpack</code>一样有一些引导代码，所以没有办法做到代码拆分</li></ul><h2 id="八、相关资料" tabindex="-1">八、相关资料 <a class="header-anchor" href="#八、相关资料" aria-label="Permalink to &quot;八、相关资料&quot;">​</a></h2><ol><li><a href="https://rollupjs.org/guide/en/" target="_blank" rel="noreferrer">Rollup文档</a></li><li><a href="https://github.com/novlan1/rollup-intro" target="_blank" rel="noreferrer">文章中的例子</a></li><li><a href="https://juejin.cn/post/6869551115420041229" target="_blank" rel="noreferrer">一文带你快速上手Rollup</a></li><li><a href="https://www.jianshu.com/p/f9db553849f2" target="_blank" rel="noreferrer">Rollup使用</a></li><li><a href="https://juejin.cn/post/7023934469568462878" target="_blank" rel="noreferrer">从0到1解读rollup Plugin</a></li><li><a href="https://juejin.cn/post/6970657641559392269" target="_blank" rel="noreferrer">rollup实践系列之从0到1手写rollup</a></li><li><a href="https://juejin.cn/post/6898865993289105415" target="_blank" rel="noreferrer">从rollup初版源码学习打包原理</a></li><li><a href="https://github.com/estree/estree" target="_blank" rel="noreferrer">estree</a></li><li><a href="https://juejin.cn/post/6844904094377705480" target="_blank" rel="noreferrer">原来rollup这么简单之rollup.rollup篇</a></li><li><a href="https://juejin.cn/post/6844903450287800327" target="_blank" rel="noreferrer">使用 Acorn 来解析 JavaScript</a></li></ol>`,48)]))}const u=e(n,[["render",p]]);export{k as __pageData,u as default};
